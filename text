package com.cts.service;

import java.time.LocalDate;
import java.util.List;

import org.springframework.stereotype.Service;

import com.cts.dto.BookDTO;
import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.MemberDTO;
import com.cts.exception.BorrowingNotAllowedException;
import com.cts.exception.BorrowingTransactionNotFoundException;
import com.cts.feign.BookClient;
import com.cts.feign.MailClient;
import com.cts.feign.MemberClient;
import com.cts.model.BorrowingTransaction;
import com.cts.repository.BorrowingRepository;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@AllArgsConstructor
public class BorrowingServiceImpl implements BorrowingService {

	private final BorrowingRepository repository;
	private final BookClient bookClient;
	private final MemberClient memberClient;
	private final MailClient mailClient;

	@Override
	public BorrowingTransaction borrowBook(BorrowingTransactionDTO transactionDTO) {
		log.info("Attempting to borrow book with ID: {} for member ID: {}", transactionDTO.getBookId(),
				transactionDTO.getMemberId());

		// Validate member
		MemberDTO member = memberClient.getMember(transactionDTO.getMemberId());
		if (member == null) {
			throw new BorrowingNotAllowedException("Member not found");
		}

		// Validate book
		BookDTO book = bookClient.getBookById(transactionDTO.getBookId());
		if (book == null || book.getAvailableCopies() <= 0) {
			throw new BorrowingNotAllowedException("Book unavailable");
		}

		// Rules
		long activeCount = repository
				.findByMemberIdAndStatus(transactionDTO.getMemberId(), BorrowingTransaction.Status.BORROWED).size();

		if (activeCount >= 5) {
			throw new BorrowingNotAllowedException("Borrowing limit exceeded (Max 5 books)");
		}

		boolean alreadyBorrowed = repository.findByBookIdAndMemberIdAndStatus(transactionDTO.getBookId(),
				transactionDTO.getMemberId(), BorrowingTransaction.Status.BORROWED).isPresent();

		if (alreadyBorrowed) {
			throw new BorrowingNotAllowedException("Book already borrowed by this member");
		}

		// Create and Save transaction    LocalDate.now()
		BorrowingTransaction tx = BorrowingTransaction.builder().bookId(transactionDTO.getBookId())
				.memberId(transactionDTO.getMemberId()).borrowDate(LocalDate.now())
				.dueDate(LocalDate.now().plusDays(14)).status(BorrowingTransaction.Status.BORROWED).fineAmount(0)
				.bookTitle(book.getTitle()).build();

		log.info("Transaction ready to save: {}", tx);
		BorrowingTransaction savedTx = repository.save(tx);

		bookClient.updateBookCopies(transactionDTO.getBookId(), book.getAvailableCopies() - 1);

		// Try sending email (don't fail the method if email fails)
		try {
			String msg = "Book borrowed: " + book.getTitle() + ". Return by: " + savedTx.getDueDate();
			mailClient.sendEmail(member.getEmail(), "Library Borrowing Info", msg);
			log.info("Email sent to {}", member.getEmail());
		} catch (Exception e) {
			log.error("Email failed: {}", e.getMessage());
		}

		return savedTx;
	}

	@Override
	public BorrowingTransaction returnBook(Long memberId, Long bookId) {
		log.info("Returning book with ID: {} for member ID: {}", bookId, memberId);

		// Get active borrowing
		BorrowingTransaction tx = repository
				.findByBookIdAndMemberIdAndStatus(bookId, memberId, BorrowingTransaction.Status.BORROWED)
				.orElseThrow(() -> new BorrowingTransactionNotFoundException("No active borrowing found"));

		LocalDate today = LocalDate.now();
		LocalDate due = tx.getDueDate();
		double fine = today.isAfter(due) ? 7.0 * java.time.temporal.ChronoUnit.DAYS.between(due, today) : 0;

		// Update transaction
		tx.setReturnDate(today);
		tx.setFineAmount(fine);
		tx.setStatus(BorrowingTransaction.Status.RETURNED);

		// Fetch book details
		BookDTO book = bookClient.getBookById(bookId);
		if (book == null) {
			throw new RuntimeException("Book not found during return");
		}

		tx.setBookTitle(book.getTitle());
		BorrowingTransaction savedTx = repository.save(tx);

		// Update book copies
		bookClient.updateBookCopies(bookId, book.getAvailableCopies() + 1);

		// Get member info
		MemberDTO member = memberClient.getMember(memberId);

		// Send email (safely)
		try {
			String msg = "Book returned: " + book.getTitle() + ". Fine applied: ₹" + fine;
			mailClient.sendEmail(member.getEmail(), "Library Return Info", msg);
			log.info("Return email sent to {}", member.getEmail());
		} catch (Exception e) {
			log.error("Failed to send return email: {}", e.getMessage());
		}

		log.info("Return complete. Fine: ₹{}", fine);
		return tx; // return the updated tx (with bookTitle)
	}

	@Override
	public List<BorrowingTransactionDTO> getMemberBorrowedBooks(Long memberId) {
		List<BorrowingTransaction> transactions = repository.findByMemberIdAndStatus(memberId,
				BorrowingTransaction.Status.BORROWED);
	 
		transactions.forEach(tx -> {
			try {
				BookDTO book = bookClient.getBookById(tx.getBookId());
				tx.setBookTitle(book.getTitle());
			} catch (Exception e) {
				log.warn("Failed to fetch book title for Book ID: {}", tx.getBookId());
				tx.setBookTitle("Unavailable");
			}
		});
	 
		return transactions.stream().map(this::mapToDTO).toList();
	}
	 
	@Override
	public List<BorrowingTransactionDTO> getAllBorrows() {
		List<BorrowingTransaction> transactions = repository.findAll();
	 
		transactions.forEach(tx -> {
			try {
				BookDTO book = bookClient.getBookById(tx.getBookId());
				tx.setBookTitle(book.getTitle());
			} catch (Exception e) {
				log.warn("Failed to fetch book title for Book ID: {}", tx.getBookId());
				tx.setBookTitle("Unavailable");
			}
		});
	 
		return transactions.stream().map(this::mapToDTO).toList();
	}
	 
	private BorrowingTransactionDTO mapToDTO(BorrowingTransaction tx) {
		return BorrowingTransactionDTO.builder()
				.transactionId(tx.getTransactionId())
				.bookId(tx.getBookId())
				.memberId(tx.getMemberId())
				.borrowDate(tx.getBorrowDate())
				.dueDate(tx.getDueDate())
				.returnDate(tx.getReturnDate())
				.status(BorrowingTransactionDTO.Status.valueOf(tx.getStatus().name()))
				.fineAmount(tx.getFineAmount())
				.bookTitle(tx.getBookTitle())
				.build();
	}
}


package com.cts.controller;

import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.model.BorrowingTransaction;
import com.cts.service.BorrowingService;

import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/borrowings")
public class BorrowingController {

	private final BorrowingService borrowingService;

	@PostMapping("/borrow")
	public BorrowingTransaction borrowBook(@RequestBody BorrowingTransactionDTO transactionDTO) {
		return borrowingService.borrowBook(transactionDTO);
	}

	@PostMapping("/return")
	public BorrowingTransaction returnBook(@RequestBody BorrowingTransactionDTO transactionDTO) {
		return borrowingService.returnBook(transactionDTO.getMemberId(), transactionDTO.getBookId());
	}

	@GetMapping("/member/{memberId}")
	public List<BorrowingTransactionDTO> getBorrowedBooks(@PathVariable Long memberId) {
	return borrowingService.getMemberBorrowedBooks(memberId);
	}
	 
	@GetMapping("/getall")
	public List<BorrowingTransactionDTO> getAllBorrows() {
	return borrowingService.getAllBorrows();
	}
}



