 <app-navbar></app-navbar>
<div class="container">
  <div class="row align-items-center justify-content-center gap-4">
    <ng-container *ngFor="let book of books; let i = index">
      <div class="card shadow-lg col-md-3 mt-3 mb-3 text-center">
        <img
          src="https://tse1.mm.bing.net/th/id/OIP.li28PO9vkz1NQS9jN9ZOOAHaHa?w=161&h=180&c=7&r=0&o=5&dpr=1.2&pid=1.7"
          class="img-fluid rounded mt-3 mb-3"
          alt="Book Cover"
        />
        <h3 class="text-primary">{{ book.title }}</h3>
        <p><strong>Author:</strong> {{ book.author }}</p>
        <p><strong>Genre:</strong> {{ book.genre }}</p>
        <p><strong>ISBN:</strong> {{ book.isbn }}</p>
        <p><strong>Year:</strong> {{ book.yearPublished }}</p>
        
        <div class="d-flex justify-content-center mb-4 gap-2">
          <button class="btn btn-outline-success" >Borrow</button>
          <button class="btn btn-outline-danger">Return</button>
        </div>
      </div>
    </ng-container>
  </div>
 
  <div *ngIf="books.length === 0" class="alert alert-info text-center mt-4">
    No books available in the library.
  </div>
 
  <div class="d-grid">
    <button type="submit" class="btn btn-custom mt-5" routerLink="/book">Ok</button>
  </div>
</div>
 
@Component({
  selector: 'app-all-book',
  standalone: true,
  imports: [CommonModule, RouterLink, NavbarComponent],
  templateUrl: './all-book.component.html',
  styleUrls: ['./all-book.component.css']
})
export class AllBookComponent {
  books: AllBook[] = [];
  error: any;
 
  constructor(private bookService: BookService) {
    this.view();
  }
 
  
  view() {
    this.bookService.view().subscribe({
      next: (response: AllBook[]) => this.books = response,
      error: err => this.error = err.message
    });
  }
  
}
 
<app-navbar></app-navbar>
<div class="container p-5">
  <div class="add-book-card">
    <h3 class="text-center mb-10">Add New Book</h3>
    <form #addBook="ngForm" (ngSubmit)="validateAdd(addBook)">
      <div class="mb-3">
        <label for="title" class="form-label">Book Title</label>
        <input ngModel name="title" type="text" class="form-control" id="title" placeholder="Enter book title" required />
      </div>

      <div class="mb-3">
        <label for="author" class="form-label">Author</label>
        <input ngModel name="author" type="text" class="form-control" id="author" placeholder="Enter author name" required />
      </div>

      <div class="mb-3">
        <label for="genre" class="form-label">Genre</label>
        <input ngModel name="genre" type="text" class="form-control" id="genre" placeholder="Enter genre" required />
      </div>

      <div class="mb-3">
        <label for="isbn" class="form-label">ISBN</label>
        <input ngModel name="isbn" type="text" class="form-control" id="isbn" placeholder="e.g., 978-3-16-148410-0" required />
      </div>

      <div class="mb-3">
        <label for="year" class="form-label">Publication Year</label>
        <input ngModel name="yearPublished" type="number" class="form-control" id="year" placeholder="e.g., 2024" required />
      </div>

      <div class="mb-3">
        <label for="copies" class="form-label">Available Copies</label>
        <input ngModel name="availableCopies" type="number" class="form-control" id="copies" placeholder="e.g., 2024" required />
      </div>

      <div class="d-grid">
        <button type="submit" class="btn btn-custom">Add Book</button>
      </div>
    </form>
  </div>
</div>

@Component({
  selector: 'addbook',
  imports: [NavbarComponent,RouterLink,FormsModule],
  templateUrl: './add-book.component.html',
  styleUrl: './add-book.component.css'
})
export class AddBookComponent {
  constructor(private router:Router, private bookService:BookService){}

  validateAdd(form:NgForm){
    this.bookService.add(form.value).subscribe(response=>console.log(response))
    alert("Book Added Successfully")
    this.router.navigate(["/book"])

  }

}

<app-navbar></app-navbar>
<!-- book-search.component.html -->
<div class="container book-search-container">
    <div class="header-title">Search Books</div>
   
    <div class="row mb-4">
      <div class="col-md-4">
        <select class="form-select" [(ngModel)]="searchType">
          <option value="title">Title</option>
          <option value="author">Author</option>
          <option value="genre">Genre</option>
        </select>
      </div>
      <div class="col-md-6">
        <input type="text" class="form-control" placeholder="Enter value to search" [(ngModel)]="searchValue">
      </div>
      <div class="col-md-2">
        <button class="btn btn-primary w-100" (click)="searchBooks()">Search</button>
      </div>
    </div>
   
    <div class="table-responsive" *ngIf="books.length > 0">
      <table class="table table-bordered table-hover align-middle text-center">
        <thead>
          <tr>
            <!-- <th>#</th> -->
            <th>Book Title</th>
            <th>Author</th>
            <th>Genre</th>
            <th>ISBN</th>
            <th>Year</th>
            <th>Available</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let book of books; let i = index">
            <td>{{ i + 1 }}</td>
            <!-- <td>{{ book.title }}</td> -->
            <td>{{ book.author }}</td>
            <td>{{ book.genre }}</td>
            <td>{{ book.isbn }}</td>
            <td>{{ book.yearPublished }}</td>
            <td>{{ book.availableCopies }}</td>
          </tr>
        </tbody>
      </table>
    </div>
   
    <div *ngIf="books.length === 0" class="alert alert-info text-center mt-4">
      No matching books found.
    </div>
    <div class="d-grid">
      <button type="submit" class="btn btn-custom" routerLink="/book">Ok</button>
    </div>
  </div>
   
  @Component({
  selector: 'app-book-search',
  standalone:true,
  imports: [NavbarComponent, RouterLink,FormsModule,CommonModule],
  templateUrl: './book-search.component.html',
  styleUrls: ['./book-search.component.css']
})
export class BookSearchComponent {
  books: AllBook[] = [];
  searchType: string = 'title';
  searchValue: string = '';
 
  constructor(private bookService: BookService) {}
 
  searchBooks(): void {
    if (!this.searchValue.trim()) return;
 
    switch (this.searchType) {
      case 'title':
        this.bookService.searchByTitle(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'author':
        this.bookService.searchByAuthor(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'genre':
        this.bookService.searchByGenre(this.searchValue).subscribe(data => this.books = data);
        break;
    }
  }
}

<app-navbar></app-navbar>
<div class="container">
  <div class="row align-items-center justify-content-center gap-4">
    <ng-container *ngFor="let book of books; trackBy: trackById">
      <div class="card shadow-lg col-md-3 mt-3 mb-3 text-center">
        <img
src="https://tse1.mm.bing.net/th/id/OIP.li28PO9vkz1NQS9jN9ZOOAHaHa?w=161&h=180&c=7&r=0&o=5&dpr=1.2&pid=1.7"
          class="img-fluid rounded mt-3 mb-3"
          alt="Book Cover"
        />
        <h3 class="text-primary">{{ book.title }}</h3>
        <p><strong>Author:</strong> {{ book.author }}</p>
        <p><strong>Genre:</strong> {{ book.genre }}</p>
        <p><strong>ISBN:</strong> {{ book.isbn }}</p>
        <p><strong>Year:</strong> {{ book.yearPublished }}</p>
        <div class="d-flex justify-content-center mb-4 gap-2">
          <button class="btn btn-outline-warning" (click)="updateBook(book.bookId)">
            Update
          </button>
          <button class="btn btn-outline-danger" (click)="deleteBook(book.bookId)">
            Delete
          </button>
        </div>
      </div>
    </ng-container>
  </div>
 
  <div *ngIf="books.length === 0" class="alert alert-info text-center mt-4">
    No books available in the library.
  </div>
  <div class="d-grid">
    <button type="submit" class="btn btn-custom mt-5" routerLink="/book">Ok</button>
  </div>
</div>

@Component({
  selector: 'app-book-up-del',
  standalone: true,
  imports: [NavbarComponent, RouterLink, FormsModule, CommonModule],
  templateUrl: './book-up-del.component.html',
  styleUrls: ['./book-up-del.component.css']
})
export class BookUpDelComponent {
  books: AllBook[] = [];
 
  constructor(
    private bookService: BookService,
    private router: Router,
    private route: ActivatedRoute
  ) {}
 
  ngOnInit(): void {
    this.getAllBooks();
  }
 
  getAllBooks(): void {
    this.bookService.view().subscribe((data) => {
      this.books = data;
    });
  }
 
  deleteBook(bookId: string): void {
    if (confirm('Are you sure you want to delete this book?')) {
      this.bookService.delete(bookId).subscribe(() => {
        this.books = this.books.filter(book => book.bookId !== bookId);
      });
    }
  }
 
  updateBook(bookId: string): void {
    console.log("clicked")
    this.router.navigate(['/updatebook', bookId]);
  }

  trackById(index: number, book: AllBook) {
    return book.bookId;
  }
}

<app-navbar></app-navbar>
<div class="container " style="max-width: 500px; margin-top: 150px;">
    <div class="card shadow-sm">
      <div class="card-header bg-primary text-white text-center">
        <h3 class="mb-0">Update Book Details</h3>
      </div>
      <div class="card-body">
        <form (ngSubmit)="updateBook()" #updateForm="ngForm" novalidate>
          
          <div class="form-floating mb-3">
            <input
              type="text"
              class="form-control"
              id="title"
              name="title"
              placeholder="Title"
              [(ngModel)]="book.title"
              required
              #title="ngModel"
            />
            <label for="title">Title</label>
            <div *ngIf="title.invalid && (title.dirty || title.touched)" class="text-danger small">
              Title is required.
            </div>
          </div>
          
          <div class="form-floating mb-3">
            <input
              type="text"
              class="form-control"
              id="author"
              name="author"
              placeholder="Author"
              [(ngModel)]="book.author"
              required
              #author="ngModel"
            />
            <label for="author">Author</label>
            <div *ngIf="author.invalid && (author.dirty || author.touched)" class="text-danger small">
              Author is required.
            </div>
          </div>
   
          <div class="form-floating mb-3">
            <input
              type="text"
              class="form-control"
              id="genre"
              name="genre"
              placeholder="Genre"
              [(ngModel)]="book.genre"
              required
              #genre="ngModel"
            />
            <label for="genre">Genre</label>
            <div *ngIf="genre.invalid && (genre.dirty || genre.touched)" class="text-danger small">
              Genre is required.
            </div>
          </div>
   
          <div class="form-floating mb-3">
            <input
              type="text"
              class="form-control"
              id="isbn"
              name="isbn"
              placeholder="ISBN"
              [(ngModel)]="book.isbn"
              required
              #isbn="ngModel"
            />
            <label for="isbn">ISBN</label>
            <div *ngIf="isbn.invalid && (isbn.dirty || isbn.touched)" class="text-danger small">
              ISBN is required.
            </div>
          </div>
   
          <div class="form-floating mb-3">
            <input
              type="number"
              min="0"
              class="form-control"
              id="yearPublished"
              name="yearPublished"
              placeholder="Year Published"
              [(ngModel)]="book.yearPublished"
              required
              #yearPublished="ngModel"
            />
            <label for="yearPublished">Year Published</label>
            <div *ngIf="yearPublished.invalid && (yearPublished.dirty || yearPublished.touched)" class="text-danger small">
              Year Published is required and must be valid.
            </div>
          </div>
   
          <div class="form-floating mb-4">
            <input
              type="number" min="0" class="form-control"  id="availableCopies" name="availableCopies"   placeholder="Available Copies" [(ngModel)]="book.availableCopies"  required #availableCopies="ngModel" />
               <label for="availableCopies">Available Copies</label>
            <div *ngIf="availableCopies.invalid && (availableCopies.dirty || availableCopies.touched)" class="text-danger small">
              Available Copies is required and must be valid.
            </div>
          </div>
   
          <button  class="btn btn-success  w-80 fw-bold" type="submit" [disabled]="updateForm.invalid">
            Update Book
          </button>
        </form>
      </div>
    </div>
  </div>

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router, RouterLink } from '@angular/router';
import { BookService, AddBook, AllBook } from '../book.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NavbarComponent } from '../navbar/navbar.component';
 
@Component({
  selector: 'app-book-update',
  standalone: true,
  imports: [FormsModule, CommonModule, NavbarComponent,RouterLink],
  templateUrl: './book-update.component.html',
  styleUrls: ['./book-update.component.css']
})
export class BookUpdateComponent implements OnInit {
  bookId!: string;
  book: AddBook = new AddBook('', '', '', '', '', '');
 
  constructor( 
    private route: ActivatedRoute,
    private bookService: BookService,
    private router: Router
  ) {}
 
  ngOnInit(): void {
    this.bookId = this.route.snapshot.paramMap.get('id')!;
    this.bookService.getById(this.bookId).subscribe((data: AllBook) => {
      this.book = new AddBook(
        data.title,
        data.author,
        data.genre,
        data.isbn,
        data.yearPublished,
        data.availableCopies
      );
    });
  }
 
  updateBook(): void {
    this.bookService.update(this.bookId, this.book).subscribe(() => {
      alert('Book updated successfully!');
      this.router.navigate(['/bookUpDel']);
    });
  }
}

<app-navbar></app-navbar>

<div class="container " style="margin-top: 150px;">
    <div class="card p-4 shadow-sm">
      <h3 class="mb-3">Borrow Book</h3>
      <form (ngSubmit)="borrow()">
        <div class="mb-3">
          <label for="memberId" class="form-label">Member ID</label>
          <input type="number" id="memberId" class="form-control" [(ngModel)]="memberId" name="memberId" required min="1"/>
        </div>
   
        <div class="mb-3">
          <label for="bookId" class="form-label">Book ID</label>
          <input type="number" id="bookId" class="form-control" [(ngModel)]="bookId" name="bookId" required min="1"/>
        </div>
   
        <div class="mb-3">
          <label for="returnDate" class="form-label">Return Date</label>
          <input type="date" id="returnDate" class="form-control"  [(ngModel)]="returnDate" name="returnDate" required  min="{{ today }}" />
        </div>
   
        <button type="submit" class="btn btn-primary">Borrow</button>
      </form>
      <p class="mt-3 text-success" *ngIf="message">{{ message }}</p>
    </div>
  </div>

export class BorrowBookComponent {
  memberId!: number;
  bookId!: number;
  returnDate!: string;
  message: string = '';
  today: string = new Date().toISOString().split('T')[0]; 
 
  constructor(private borrowService: BorrowService, private router:Router) {}
 
  borrow() {
    if (!this.memberId || !this.bookId || !this.returnDate) {
      alert('Please fill all fields.');
      return;
    }
 
    this.borrowService.borrowBook(this.memberId, this.bookId, this.returnDate)
      .subscribe({
        next: (response) => {
          this.message = 'Book borrowed successfully!';
          console.log(response);
          alert(this.message);
          this.clearForm();
        },
        error: (err) => {
          this.message = 'Failed to borrow book. Please try again.';
          console.error(err);
          alert(this.message);
        }
      });
  }
 
  clearForm() {
    this.memberId = 0;
    this.bookId = 0;
    this.returnDate = '';
    this.router.navigate(['/borrow'])
  }
}

<app-navbar></app-navbar>

<div class="container " style="margin-top: 150px;">
    <div class="card p-4 shadow-sm">
      <h3 class="mb-3">Return Book</h3>
      <form (ngSubmit)="returnBook()">
        <div class="mb-3">
          <label for="memberId" class="form-label">Member ID</label>
          <input type="number"  id="memberId"  class="form-control" [(ngModel)]="memberId" name="memberId" required min="1" />
        </div>
   
        <div class="mb-3">
          <label for="bookId" class="form-label">Book ID</label>
          <input
            type="number"
            id="bookId"
            class="form-control"
            [(ngModel)]="bookId"
            name="bookId"
            required
            min="1"
          />
        </div>
   
        <button type="submit" class="btn btn-success">Return</button>
      </form>
      <p class="mt-3 text-success" *ngIf="message">{{ message }}</p>
    </div>
  </div>

@Component({
  selector: 'app-return-book',
  imports: [NavbarComponent, RouterLink,FormsModule,CommonModule],
  templateUrl: './return-book.component.html',
  styleUrl: './return-book.component.css'
})
export class ReturnBookComponent {
  memberId!: number;
  bookId!: number;
  message: string = '';
 
  constructor(private borrowService: BorrowService) {}
 
  returnBook() {
    if (!this.memberId || !this.bookId) {
      alert('Please fill all fields.');
      return;
    }
 
    this.borrowService.returnBook(this.memberId, this.bookId)
      .subscribe({
        next: (res) => {
          this.message = 'Book returned successfully!';
          console.log(res);
          alert(this.message);
          this.clearForm();
        },
        error: (err) => {
          this.message = 'Failed to return book.';
          console.error(err);
          alert(this.message);
        }
      });
  } 
  clearForm() {
    this.memberId = 0;
    this.bookId = 0;
  }
}
