package com.service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtService {

	public static final String SECRET = "d3780ec3d1cfaba271e0538d4fae686d8367e10155ee424691fbf191eabec53d";

	public String extractUsername(String token) {
		return extractClaim(token, Claims::getSubject);
	}

	public Date extractExpiration(String token) {
		return extractClaim(token, Claims::getExpiration);
	}

	public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
		final Claims claims = extractAllClaims(token);
		return claimsResolver.apply(claims);
	}

	private Claims extractAllClaims(String token) {
		return Jwts.parserBuilder().setSigningKey(getSignKey()).build().parseClaimsJws(token).getBody();
	}

	private Boolean isTokenExpired(String token) {
		return extractExpiration(token).before(new Date());
	}

	public Boolean validateToken(String token, UserDetails userDetails) {
		final String username = extractUsername(token);
		return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
	}

	public String generateToken(String userName, String roles, int userId, String email, Long memberId) {
	    Map<String, Object> claims = new HashMap<>();
	    claims.put("roles", roles);
	    claims.put("userId", userId);
	    claims.put("email", email);
	    claims.put("memberId",member.getId());
	    return createToken(claims, userName);
	}


	private String createToken(Map<String, Object> claims, String userName) {
		return Jwts.builder().setClaims(claims).setSubject(userName).setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
				.signWith(getSignKey(), SignatureAlgorithm.HS256).compact();
		
	}

	private Key getSignKey() {
		byte[] keyBytes = Decoders.BASE64.decode(SECRET);
		return Keys.hmacShaKeyFor(keyBytes);
	}
	
	public Long extractMemberId(String token) {
	    Claims claims = extractAllClaims(token);
	    System.out.print("All claims: "+claims);
	    Object memberIdClaim = claims.get("memberId");
	    if (memberIdClaim instanceof Integer) {
	        return ((Integer) memberIdClaim).longValue();
	    } else if (memberIdClaim instanceof Long) {
	        return (Long) memberIdClaim;
	    } else if (memberIdClaim instanceof String) {
	        return Long.parseLong((String) memberIdClaim);
	    }
	    return null;
	}
}

package com.controller;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.client.MemberClient;
import com.dto.AuthRequest;
import com.dto.MemberDTO;
import com.entity.UserInfo;
import com.repository.UserInfoRepository;
import com.service.JwtService;
import com.service.UserService;

import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/auth")
//@CrossOrigin("*")
@AllArgsConstructor
public class AuthController {

	private UserService service;
	private JwtService jwtService;
	private MemberClient memberClient;
	private UserInfoRepository repo;
	private AuthenticationManager authenticationManager;

	@GetMapping("/welcome") // http://localhost:9090/auth/welcome
	public String welcome() {
		return "Welcome this endpoint is not secure";
	}

	@PostMapping("/new") // http://localhost:9090/auth/new
	public String addNewUser(@RequestBody UserInfo userInfo) {
		return service.addUser(userInfo);
	}

	@PostMapping("/authenticate")
	public String authenticateAndGetToken(@RequestBody AuthRequest authRequest) {
		Authentication authentication = authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword()));

		if (authentication.isAuthenticated()) {
			UserInfo user = repo.findByName(authRequest.getUsername()).orElse(null);

			Long memberId = null;
			if (user.getRoles().contains("MEMBER")) {
				try {
					MemberDTO member = memberClient.getMemberByUsername(authRequest.getUsername());
					memberId = member.getMemberId();
				} catch (Exception e) {
					// Log and handle gracefully
					System.out.println("Member service not available or user not found.");
				}
			}

			return jwtService.generateToken(authRequest.getUsername(), user.getRoles(), user.getId(), user.getEmail(),
					memberId);
		} else {
			throw new UsernameNotFoundException("Invalid user request!");
		}
		
	}

	@GetMapping("/getroles/{username}") // http://localhost:9090/auth/getroles/{username}
	public String getRoles(@PathVariable String username) {
		return service.getRoles(username);
	}
}


package com.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.entity.UserInfo;

import java.util.List;
import java.util.Optional;

public interface UserInfoRepository extends JpaRepository<UserInfo, Integer> {
    Optional<UserInfo> findByName(String username);

}


package com.client;

import org.springframework.cloud.openfeign.FeignClient;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.dto.MemberDTO;

@FeignClient(name = "MEMBERSERVICE", path = "/members")
public interface MemberClient {

	@GetMapping("/user/{username}")
	MemberDTO getMemberByUsername(@PathVariable String username);

	@GetMapping("/{memberId}")
	MemberDTO getMemberById(@PathVariable("memberId") Long memberId);

}
