package com.example.Apigateway.filter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;

import com.example.Apigateway.util.JwtUtil;
import com.google.common.net.HttpHeaders;

import reactor.core.publisher.Mono;

@Component
public class AuthenticationFilter extends AbstractGatewayFilterFactory<AuthenticationFilter.Config> {

    @Autowired
    private RouteValidator validator;

    @Autowired
    private JwtUtil util;

    public static class Config {
    }

    public AuthenticationFilter() {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            if (validator.isSecured.test(exchange.getRequest())) {
                if (!exchange.getRequest().getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) {
                    return handleUnauthorized(exchange.getResponse(), "Missing authorization header");
                }

                String authHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
                if (authHeader != null && authHeader.startsWith("Bearer ")) {
                    authHeader = authHeader.substring(7);
                }

                try {
                    String role = util.extractRolesFromToken(authHeader);
                    String path = exchange.getRequest().getPath().toString();
                    String method = exchange.getRequest().getMethod().name();

                    // Logging for debugging
                    System.out.println("Role: " + role + " | Path: " + path + " | Method: " + method);

                    if (!isAuthorized(role, path, method)) {
                        return handleUnauthorized(exchange.getResponse(), "Unauthorized access");
                    }

                } catch (Exception e) {
                    return handleUnauthorized(exchange.getResponse(), "Invalid token");
                }
            }
            return chain.filter(exchange);
        };
    }

    private boolean isAuthorized(String role, String path, String method) {
        switch (role.toUpperCase()) {
            case "ADMIN":
                return path.startsWith("/books")
                    || path.startsWith("/members")
                    || path.startsWith("/borrowings")
                    || path.startsWith("/fines")
                    || path.startsWith("/notifications");

            case "MEMBER":
                if (method.equalsIgnoreCase("GET")) {
                    return path.startsWith("/books")
                        || path.startsWith("/borrowings")
                        || path.startsWith("/fines")
                        || path.startsWith("/notifications")
                        || path.matches("^/members/\\d+$"); // Allow /members/{id} only
                }

                if (method.equalsIgnoreCase("PUT")) {
                    return path.matches("^/members/update/\\d+$") // Allow updating own member data
                        || path.startsWith("/borrowings/return")
                        || path.startsWith("/borrowings/borrow");
                }

                if (method.equalsIgnoreCase("POST")) {
                    return path.startsWith("/borrowings/return")
                        || path.startsWith("/borrowings/borrow")
                        || path.startsWith("/fines/pay");
                }

                return false;

            default:
                return false;
        }
    }

    private Mono<Void> handleUnauthorized(ServerHttpResponse response, String message) {
        response.setStatusCode(HttpStatus.FORBIDDEN);
        return response.setComplete();
    }
}
