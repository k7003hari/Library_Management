import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'

})
export class BookService {
private pathAdd = 'http://localhost:9090/books/addbook';
private pathView = 'http://localhost:9090/books/getall';
private pathUpdate = 'http://localhost:9090/books/update/';
private pathDelete = 'http://localhost:9090/books/delete/';
private pathId = 'http://localhost:9090/books/getById/';
private pathTitle = 'http://localhost:9090/books/search/title/';
private pathAuthor = 'http://localhost:9090/books/search/author/';
private pathGenre = 'http://localhost:9090/books/search/genre/';

  constructor(private client: HttpClient) {}

  public add(addBook: AddBook): Observable<string> {
    return this.client.post(this.pathAdd, addBook, { responseType: 'text' });
      }

      public view(): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathView);
      }

      public delete(bookId: string): Observable<void> {
        return this.client.delete<void>(this.pathDelete + bookId);
      }

      public getById(bookId: string): Observable<AllBook> {
        return this.client.get<AllBook>(this.pathId + bookId);
      }

      public update(bookId: string, book: AddBook): Observable<string> {
        return this.client.put(this.pathUpdate + bookId, book, { responseType: 'text' });
      }

      public searchByTitle(title: string): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathTitle + title);
      }

      public searchByAuthor(author: string): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathAuthor + author);
      }

      public searchByGenre(genre: string): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathGenre + genre);
      }


      public borrowBook(bookId: string): Observable<string> {
        const memberId = localStorage.getItem("memberId");
        const body = { bookId, memberId };
    return this.client.post('http://localhost:9090/borrowings/borrow', body, { responseType: 'text' });
      }
    }

export class AddBook {
  constructor(
    public title: string,
    public author: string,
    public genre: string,
    public isbn: string,
    public yearPublished: string,
    public availableCopies: string
  ) { }
}

export class AllBook {
  constructor(
    public bookId: string,
    public title: string,
    public author: string,
    public genre: string,
    public isbn: string,
    public yearPublished: string,
    public availableCopies: string,
  ) { }
}

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
 
@Injectable({
  providedIn: 'root'
})
export class BorrowService {
 
private pathBorrow = 'http://localhost:9090/borrowings/borrow'; // ("memberId": 3, "bookId": 2, "returnDate":"2025-06-03")
private pathReturn = 'http://localhost:9090/borrowings/return'; // ("memberId": 1, "bookId": 2)
private pathAllBorrows = 'http://localhost:9090/borrowings/'; // http://localhost:9090/borrowings/1 pass the member. Id
 
  constructor(private clients: HttpClient) {}
 
  borrowBook(memberId: number, bookId: number, returnDate: string): Observable<any> {
    const payload = { memberId, bookId, returnDate };
return this.clients.post(this.pathBorrow, payload);
  }

  returnBook(memberId: number, bookId: number): Observable<any> {
    const payload = { memberId, bookId };
  return this.clients.post(this.pathReturn, payload);
  }
  
  viewBorrowsByMember(memberId: number): Observable<any> {
    return this.clients.get(this.pathAllBorrows + memberId);
  }

}

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import {jwtDecode }from 'jwt-decode';



@Injectable({
  providedIn: 'root'
})
export class AuthService {
  
  pathL = "http://localhost:9090/auth/authenticate"  
  pathR = "http://localhost:9090/auth/new"

  constructor(private client: HttpClient) { }

  public authenticate_User(authUser: User): Observable<string> {
    console.log("Inside autheticate")
    console.log(authUser)
    return this.client.post(this.pathL, authUser, { responseType: 'text' });
  }

 public register(register:RegisterUser): Observable<string> {
    return this.client.post(this.pathR,register,{responseType: 'text'})
  }

  getJWT():string
  {
    
    return localStorage.getItem("JWT")
  }
  removeToken()
  {
    localStorage.removeItem("JWT")
  }
      
   

}



export class User {
  username: string
  password: string
  constructor(username: string, password: string) {
    this.username = username
    this.password = password
  }
}
export class RegisterUser{
  username:string
  email:string
  password:string
  roles:string
  constructor(username: string,email:string,  password: string,roles:string)
  {
    this.username=username
    this.email=email
    this.password=password
    this.roles=roles
  }
}


 localStorage.setItem("JWT",response)
    const decoded = jwtDecode<JwtPayload>(localStorage.getItem('JWT'));
    const role: string = decoded.roles ?? 'No role found';
    const id :any = decoded.userId ?? 'No id found';
    sessionStorage.setItem('userId',id.toString());
    sessionStorage.setItem('roles',role)
    console.log(role);
    console.log(id);

interface JwtPayload {
  roles?: string;  
  userId ?:any;
}
