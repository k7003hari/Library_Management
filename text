import { Component } from '@angular/core';
import { Router, RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { FormsModule, NgForm } from '@angular/forms';
import { AuthService } from '../auth.service';
import { MemberService } from '../member.service';

@Component({
  selector: 'app-register',
  imports: [NavbarComponent, RouterLink, FormsModule],
  templateUrl: './register.component.html',
  styleUrl: './register.component.css'
})
export class RegisterComponent {

  constructor(private router: Router, private authService: AuthService, private memberService: MemberService) { }

  validateR(form: NgForm) {
    console.log('User Registration');

    const userPayload = {
      username: form.value.name,
      email: form.value.email,
      password: form.value.password,
      roles: form.value.roles
    };

    const memberPayload = {
      name: form.value.name,
      email: form.value.email,
      phone: form.value.phone,
      address: form.value.address,
      membershipStatus: form.value.membershipStatus
    };

    this.authService.register(userPayload).subscribe({
      next: (response) => {
        console.log('User registered:', response);

        // After successful user registration, register member
        console.log('Registering as Member');
        this.memberService.addMember(memberPayload).subscribe({
          next: (res) => {
            console.log('Member registered:', res);
            alert('Registration successful!');
            this.router.navigate(['/login']);
          },
          error: (err) => {
            console.error('Member registration failed:', err);
            alert('Member registration failed.');
          }
        });
      },
      error: (err) => {
        console.error('User registration failed:', err);
        alert('User registration failed.');
      }
    });
  }
}


<app-navbar></app-navbar>
<section class="vh-100" style="background-color: #eee;">
  <div class="container h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col-lg-12 col-xl-11">
        <div class="card text-black" style="border-radius: 25px;">
          <div class="card-body p-md-5">
            <div class="row justify-content-center">
              <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Sign up</p>

                <form #RegisterForm="ngForm" class="mx-1 mx-md-4" (ngSubmit)="validateR(RegisterForm)">

                  <div class="d-flex flex-row align-items-center mb-4">
                    <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                    <div data-mdb-input-init class="form-outline flex-fill mb-0">
                      <input ngModel name="name" type="text" id="form3Example1c" class="form-control" />
                      <label class="form-label" for="form3Example1c">Your Name</label>
                    </div>
                  </div>

                  <div class="d-flex flex-row align-items-center mb-4">
                    <i class="fas fa-envelope fa-lg me-3 fa-fw"></i>
                    <div data-mdb-input-init class="form-outline flex-fill mb-0">
                      <input ngModel name="email" type="email" id="form3Example3c" class="form-control" />
                      <label class="form-label" for="form3Example3c">Your Email</label>
                    </div>
                  </div>

                  <div class="d-flex flex-row align-items-center mb-4">
                    <i class="fas fa-lock fa-lg me-3 fa-fw"></i>
                    <div data-mdb-input-init class="form-outline flex-fill mb-0">
                      <input ngModel name="password" type="password" id="form3Example4c" class="form-control" />
                      <label class="form-label" for="form3Example4c">Password</label>
                    </div>
                  </div>

                  <div class="d-flex flex-row align-items-center mb-4">
                    <i class="fas fa-circle-user fa-lg me-2 fa-fw"></i>
                    <div data-mdb-input-init class="form-outline flex-fill mb-0">
                      <input ngModel name="roles" type="text" id="role" class="form-control" />
                      <label class="form-label" for="role">Role</label>
                    </div>
                  </div>

                  <!-- Phone -->
                  <div class="d-flex flex-row align-items-center mb-4">
                    <i class="fas fa-phone fa-lg me-3 fa-fw"></i>
                    <div class="form-outline flex-fill mb-0">
                      <input ngModel name="phone" type="text" class="form-control" />
                      <label class="form-label">Phone</label>
                    </div>
                  </div>

                  <!-- Address -->
                  <div class="d-flex flex-row align-items-center mb-4">
                    <i class="fas fa-home fa-lg me-3 fa-fw"></i>
                    <div class="form-outline flex-fill mb-0">
                      <input ngModel name="address" type="text" class="form-control" />
                      <label class="form-label">Address</label>
                    </div>
                  </div>

                  <!-- Membership Status -->
                  <div class="d-flex flex-row align-items-center mb-4">
                    <i class="fas fa-id-badge fa-lg me-3 fa-fw"></i>
                    <div class="form-outline flex-fill mb-0">
                      <input ngModel name="membershipStatus" type="text" class="form-control" value="Active" />
                      <label class="form-label">Membership Status</label>
                    </div>
                  </div>

                  <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                    <button type="submit" data-mdb-button-init data-mdb-ripple-init
                      class="btn btn-primary btn-lg">Register</button>
                  </div>

                </form>

              </div>
              <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">

                <img
                  src="https://img.freepik.com/premium-vector/library-public-reading-room-with-bookcase-bookshelves-wooden-desks-chairs-computers_176411-1523.jpg?w=900"
                  class="img-fluid" alt="Sample image">

              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import {jwtDecode }from 'jwt-decode';



@Injectable({
  providedIn: 'root'
})
export class AuthService {
  
  
  pathL = "http://localhost:9090/auth/authenticate"  
  pathR = "http://localhost:9090/auth/new"
  
  constructor(private client: HttpClient) { }

  public authenticate_User(authUser: User): Observable<string> {
    console.log("Inside autheticate")
    console.log(authUser)
    return this.client.post(this.pathL, authUser, { responseType: 'text' });
  }

 public register(register:RegisterUser): Observable<string> {
    return this.client.post(this.pathR,register,{responseType: 'text'})
  }

  

  getJWT():string
  {
    
    return localStorage.getItem("JWT")
  }
  removeToken()
  {
    localStorage.removeItem("JWT")
  }
         

}

export class User {
  username: string
  password: string
  constructor(username: string, password: string) {
    this.username = username
    this.password = password
  }
}
export class RegisterUser{
  username:string
  email:string
  password:string
  roles:string
  constructor(username: string,email:string,  password: string,roles:string)
  {
    this.username=username
    this.email=email
    this.password=password
    this.roles=roles
  }
}
export class addMember {
  constructor(
    public memberId: number,
    public name: string,
    public email: string,
    public phone: string,
    public address: string
  ) { }
}


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class MemberService {
  private addUrl = 'http://localhost:9090/members/regMember';
  private viewUrl = 'http://localhost:9090/members/getallMember';
  private searchUrl = 'http://localhost:9090/members/';
  private updateUrl = 'http://localhost:9090/members/update/';
  private deleteUrl = 'http://localhost:9090/members/delete/';

  constructor(private http: HttpClient) {}

  addMember(member: any): Observable<any> {
    return this.http.post(this.addUrl, member);
  }

  getAllMembers(): Observable<any> {
    return this.http.get(this.viewUrl);
  }

  getMemberById(id: number): Observable<any> {
    return this.http.get(this.searchUrl + id);
  }

  updateMember(id: number, member: any): Observable<any> {
    return this.http.put(this.updateUrl + id, member);
  }

  deleteMember(id: number): Observable<any> {
    return this.http.delete(this.deleteUrl + id);
  }
}
