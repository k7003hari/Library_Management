import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { AllBook, BookService, } from '../book.service';
import { FormsModule } from '@angular/forms';
 
@Component({
  selector: 'app-all-book',
  standalone: true,
  imports: [CommonModule, RouterLink, NavbarComponent,FormsModule],
  templateUrl: './all-book.component.html',
  styleUrls: ['./all-book.component.css']
})
export class AllBookComponent {

  books: AllBook[] = [];
  allBooks: AllBook[] = []; // To restore original list after clearing search
  searchType: string = 'title';
  searchValue: string = '';
  error: any;

  constructor(private bookService: BookService,private route: Router,) {
    this.loadBooks();
  }

  loadBooks(): void {
    this.bookService.view().subscribe({
      next: (response: AllBook[]) => {
        this.books = response;
        this.allBooks = response;
      },
      error: err => this.error = err.message
    });
  }

  searchBooks(): void {
    if (!this.searchValue.trim()) {
      this.books = this.allBooks;
      return;
    }

    switch (this.searchType) {
      case 'title':
        this.bookService.searchByTitle(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'author':
        this.bookService.searchByAuthor(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'genre':
        this.bookService.searchByGenre(this.searchValue).subscribe(data => this.books = data);
        break;
    }
  }

  deleteBook(bookId: string): void {
    if (confirm('Are you sure you want to delete this book?')) {
      this.bookService.delete(bookId).subscribe(() => {
        this.books = this.books.filter(book => book.bookId !== bookId);
      });
    }
  }

  updateBook(bookId: string): void {
    console.log("clicked")
    this.route.navigate(['/updatebook', bookId]);
  }

  trackById(index: number, book: AllBook) {
    return book.bookId;
  }
}

<app-navbar></app-navbar>

  <div class="container">
    <!-- 🔍 Search Area -->
    <div class="row mb-4 mt-4 search-area align-items-center">
      <div class="col-sm-12 col-md-4 mb-2 mb-md-0">
        <select class="form-select" [(ngModel)]="searchType">
          <option value="title">Search by Title</option>
          <option value="author">Search by Author</option>
          <option value="genre">Search by Genre</option>
        </select>
      </div>
      <div class="col-sm-12 col-md-6 mb-2 mb-md-0">
        <input type="text" class="form-control" placeholder="Enter value to search" [(ngModel)]="searchValue">
      </div>
      <div class="col-sm-12 col-md-2">
        <button class="btn btn-primary w-100" (click)="searchBooks()">
          <i class="bi bi-search"></i> Search
        </button>
      </div>
    </div>
  
    <!-- 📚 Book Cards -->
    <div class="row">
      <ng-container *ngFor="let book of books">
        <div class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
          <div class="card shadow w-100 text-center">
            <img
              src="https://tse1.mm.bing.net/th/id/OIP.li28PO9vkz1NQS9jN9ZOOAHaHa?w=161&h=180&c=7&r=0&o=5&dpr=1.2&pid=1.7"
              class="img-fluid rounded mt-3"
              alt="Book Cover"
            />
            <div class="card-body">
              <h4 class="text-primary fw-bold">{{ book.title }}</h4>
              <p><strong>Author:</strong> {{ book.author }}</p>
              <p><strong>Genre:</strong> {{ book.genre }}</p>
              <p><strong>ISBN:</strong> {{ book.isbn }}</p>
              <p><strong>Year:</strong> {{ book.yearPublished }}</p>
              <p><strong>Available:</strong> {{ book.availableCopies }}</p>
            </div>
            <div class="card-footer d-flex flex-wrap justify-content-center gap-2 p-3">
              <button class="btn btn-outline-success" title="Borrow Book">
                <i class="bi bi-book"></i> Borrow
              </button>
              <button class="btn btn-outline-danger" title="Return Book">
                <i class="bi bi-arrow-return-left"></i> Return
              </button>
              <button class="btn btn-outline-warning" title="Update Book">
                <i class="bi bi-pencil-square"(click)="updateBook(book.bookId)" ></i> Update
              </button>
              <button class="btn btn-outline-danger" title="Delete Book">
                <i class="bi bi-trash"(click)="deleteBook(book.bookId)"></i> Delete
              </button>
            </div>
          </div>
        </div>
      </ng-container>
  
      <!-- ➕ Add New Book Card -->
      <div class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
        <div class="card add-book-card shadow w-100 text-center" routerLink="/addBook" style="cursor: pointer;">
          <div class="card-body d-flex flex-column justify-content-center align-items-center">
            <i class="bi bi-plus-circle-fill display-4 text-success mb-3"></i>
            <h5 class="text-success fw-semibold">Add New Book</h5>
            <p class="text-muted small">Click to add a new book to the library</p>
          </div>
        </div>
      </div>
    </div>
  
    <!-- ❗ No Results -->
    <div *ngIf="books.length === 0" class="alert alert-info text-center mt-4">
      No books found.
    </div>
  
    <!-- ✔ OK Button -->
    <div class="d-flex justify-content-center mt-4">
      <button class="btn btn-custom" routerLink="/book">Ok</button>
    </div>
  </div>
  

