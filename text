<app-navbar></app-navbar>

<!-- ✅ Toast Notification -->
<div *ngIf="toastMessage" class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">
  <div class="toast show align-items-center text-white bg-success border-0" role="alert">
    <div class="d-flex">
      <div class="toast-body">
        {{ toastMessage }}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" aria-label="Close" (click)="toastMessage = null"></button>
    </div>
  </div>
</div>

<!-- ✅ Form -->
<div class="container" style="max-width: 500px; margin-top: 150px;">
  <div class="card shadow-sm">
    <div class="card-header bg-primary text-white text-center">
      <h3 class="mb-0">Update Book Details</h3>
    </div>
    <div class="card-body">
      <form (ngSubmit)="updateBook()" #updateForm="ngForm" novalidate>

        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="title" name="title" placeholder="Title"
            [(ngModel)]="book.title" required minlength="3" #title="ngModel" />
          <label for="title">Title</label>
          <div *ngIf="title.invalid && (title.dirty || title.touched)" class="text-danger small">
            <div *ngIf="title.errors?.['required']">Title is required.</div>
            <div *ngIf="title.errors?.['minlength']">Title must be at least 3 characters.</div>
          </div>
        </div>

        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="author" name="author" placeholder="Author"
            [(ngModel)]="book.author" required minlength="3" #author="ngModel" />
          <label for="author">Author</label>
          <div *ngIf="author.invalid && (author.dirty || author.touched)" class="text-danger small">
            <div *ngIf="author.errors?.['required']">Author is required.</div>
            <div *ngIf="author.errors?.['minlength']">Author must be at least 3 characters.</div>
          </div>
        </div>

        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="genre" name="genre" placeholder="Genre"
            [(ngModel)]="book.genre" required #genre="ngModel" />
          <label for="genre">Genre</label>
          <div *ngIf="genre.invalid && (genre.dirty || genre.touched)" class="text-danger small">
            Genre is required.
          </div>
        </div>

        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="isbn" name="isbn" placeholder="ISBN"
            [(ngModel)]="book.isbn" required pattern="^[0-9\-]{10,13}$" #isbn="ngModel" />
          <label for="isbn">ISBN</label>
          <div *ngIf="isbn.invalid && (isbn.dirty || isbn.touched)" class="text-danger small">
            <div *ngIf="isbn.errors?.['required']">ISBN is required.</div>
            <div *ngIf="isbn.errors?.['pattern']">ISBN must be 10–13 digits or hyphenated.</div>
          </div>
        </div>

        <div class="form-floating mb-3">
          <input type="number" class="form-control" id="yearPublished" name="yearPublished"
            [(ngModel)]="book.yearPublished" required min="1900" max="2099" #yearPublished="ngModel"
            placeholder="Year Published" />
          <label for="yearPublished">Year Published</label>
          <div *ngIf="yearPublished.invalid && (yearPublished.dirty || yearPublished.touched)"
            class="text-danger small">
            <div *ngIf="yearPublished.errors?.['required']">Year Published is required.</div>
            <div *ngIf="yearPublished.errors?.['min']">Year must be after 1900.</div>
            <div *ngIf="yearPublished.errors?.['max']">Year must be before 2100.</div>
          </div>
        </div>

        <div class="form-floating mb-4">
          <input type="number" class="form-control" id="availableCopies" name="availableCopies"
            [(ngModel)]="book.availableCopies" required min="0" #availableCopies="ngModel"
            placeholder="Available Copies" />
          <label for="availableCopies">Available Copies</label>
          <div *ngIf="availableCopies.invalid && (availableCopies.dirty || availableCopies.touched)"
            class="text-danger small">
            <div *ngIf="availableCopies.errors?.['required']">Available Copies is required.</div>
            <div *ngIf="availableCopies.errors?.['min']">Value cannot be negative.</div>
          </div>
        </div>

        <button class="btn btn-success w-100 fw-bold" type="submit" [disabled]="updateForm.invalid">
          Update Book
        </button>
      </form>
    </div>
  </div>
</div>


import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router, RouterLink } from '@angular/router';
import { BookService, AddBook, AllBook } from '../book.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NavbarComponent } from '../navbar/navbar.component';

@Component({
  selector: 'app-book-update',
  standalone: true,
  imports: [FormsModule, CommonModule, NavbarComponent, RouterLink],
  templateUrl: './book-update.component.html',
  styleUrls: ['./book-update.component.css']
})
export class BookUpdateComponent implements OnInit {
  bookId!: string;
  book: AddBook = new AddBook('', '', '', '', '', '');
  toastMessage: string | null = null;

  constructor(
    private route: ActivatedRoute,
    private bookService: BookService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.bookId = this.route.snapshot.paramMap.get('id')!;
    this.bookService.getById(this.bookId).subscribe({
      next: (data: AllBook) => {
        this.book = new AddBook(
          data.title,
          data.author,
          data.genre,
          data.isbn,
          data.yearPublished,
          data.availableCopies
        );
      },
      error: (err) => {
        console.error('Error fetching book:', err);
      }
    });
  }

  updateBook(): void {
    if (!this.bookId) return;
    this.bookService.update(this.bookId, this.book).subscribe({
      next: () => {
        console.log('✅ Book updated:', this.book);
        this.toastMessage = 'Book updated successfully!';
        setTimeout(() => {
          this.toastMessage = null;
          this.router.navigate(['/allBook']);
        }, 3000);
      },
      error: (err) => {
        console.error('❌ Error updating book:', err);
        this.toastMessage = 'Failed to update book!';
        setTimeout(() => (this.toastMessage = null), 3000);
      }
    });
  }
}


