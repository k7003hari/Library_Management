
package com.cts.service;

import java.time.LocalDate;
import java.util.List;

import org.springframework.stereotype.Service;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.MemberDTO;
import com.cts.dto.BookDTO;
import com.cts.exception.BorrowingNotAllowedException;
import com.cts.exception.BorrowingTransactionNotFoundException;
import com.cts.feign.BookClient;
import com.cts.feign.MailClient;
import com.cts.feign.MemberClient;
import com.cts.model.BorrowingTransaction;
import com.cts.repository.BorrowingRepository;

import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@AllArgsConstructor
public class BorrowingServiceImpl implements BorrowingService {

	private final BorrowingRepository repository;
	private final BookClient bookClient;
	private final MemberClient memberClient;
	private final MailClient mailClient;

	@Override
	public BorrowingTransaction borrowBook(BorrowingTransactionDTO transactionDTO) {
		log.info("Attempting to borrow book with ID: {} for member ID: {}", transactionDTO.getBookId(),
				transactionDTO.getMemberId());

		// Validate member
		MemberDTO member = memberClient.getMember(transactionDTO.getMemberId());
		if (member == null) {
			throw new BorrowingNotAllowedException("Member not found");
		}

		// Validate book
		BookDTO book = bookClient.getBookById(transactionDTO.getBookId());
		if (book == null || book.getAvailableCopies() <= 0) {
			throw new BorrowingNotAllowedException("Book unavailable");
		}

		// Rules
		long activeCount = repository
				.findByMemberIdAndStatus(transactionDTO.getMemberId(), BorrowingTransaction.Status.BORROWED).size();

		if (activeCount >= 5) {
			throw new BorrowingNotAllowedException("Borrowing limit exceeded (Max 5 books)");
		}

		boolean alreadyBorrowed = repository.findByBookIdAndMemberIdAndStatus(transactionDTO.getBookId(),
				transactionDTO.getMemberId(), BorrowingTransaction.Status.BORROWED).isPresent();

		if (alreadyBorrowed) {
			throw new BorrowingNotAllowedException("Book already borrowed by this member");
		}

		// Create and Save transaction    LocalDate.now()
		BorrowingTransaction tx = BorrowingTransaction.builder().bookId(transactionDTO.getBookId())
				.memberId(transactionDTO.getMemberId()).borrowDate(LocalDate.now())
				.dueDate(LocalDate.now().plusDays(14)).status(BorrowingTransaction.Status.BORROWED).fineAmount(0)
				.bookTitle(book.getTitle()).build();

		log.info("Transaction ready to save: {}", tx);
		BorrowingTransaction savedTx = repository.save(tx);

		bookClient.updateBookCopies(transactionDTO.getBookId(), book.getAvailableCopies() - 1);

		// Try sending email (don't fail the method if email fails)
		try {
			String msg = "Book borrowed: " + book.getTitle() + ". Return by: " + savedTx.getDueDate();
			mailClient.sendEmail(member.getEmail(), "Library Borrowing Info", msg);
			log.info("Email sent to {}", member.getEmail());
		} catch (Exception e) {
			log.error("Email failed: {}", e.getMessage());
		}

		return savedTx;
	}

	@Override
	public BorrowingTransaction returnBook(Long memberId, Long bookId) {
		log.info("Returning book with ID: {} for member ID: {}", bookId, memberId);

		// Get active borrowing
		BorrowingTransaction tx = repository
				.findByBookIdAndMemberIdAndStatus(bookId, memberId, BorrowingTransaction.Status.BORROWED)
				.orElseThrow(() -> new BorrowingTransactionNotFoundException("No active borrowing found"));

		LocalDate today = LocalDate.now();
		LocalDate due = tx.getDueDate();
		double fine = today.isAfter(due) ? 7.0 * java.time.temporal.ChronoUnit.DAYS.between(due, today) : 0;

		// Update transaction
		tx.setReturnDate(today);
		tx.setFineAmount(fine);
		tx.setStatus(BorrowingTransaction.Status.RETURNED);

		// Fetch book details
		BookDTO book = bookClient.getBookById(bookId);
		if (book == null) {
			throw new RuntimeException("Book not found during return");
		}

		tx.setBookTitle(book.getTitle());
		BorrowingTransaction savedTx = repository.save(tx);

		// Update book copies
		bookClient.updateBookCopies(bookId, book.getAvailableCopies() + 1);

		// Get member info
		MemberDTO member = memberClient.getMember(memberId);

		// Send email (safely)
		try {
			String msg = "Book returned: " + book.getTitle() + ". Fine applied: ‚Çπ" + fine;
			mailClient.sendEmail(member.getEmail(), "Library Return Info", msg);
			log.info("Return email sent to {}", member.getEmail());
		} catch (Exception e) {
			log.error("Failed to send return email: {}", e.getMessage());
		}

		log.info("Return complete. Fine: ‚Çπ{}", fine);
		return tx; // return the updated tx (with bookTitle)
	}

	@Override
	public List<BorrowingTransaction> getMemberBorrowedBooks(Long memberId) {
		List<BorrowingTransaction> transactions = repository.findByMemberIdAndStatus(memberId,
				BorrowingTransaction.Status.BORROWED);

		// Populate book titles manually
		transactions.forEach(tx -> {
			try {
				BookDTO book = bookClient.getBookById(tx.getBookId());
				tx.setBookTitle(book.getTitle()); // Set the transient field manually
			} catch (Exception e) {
				log.warn("Failed to fetch book title for Book ID: {}", tx.getBookId());
				tx.setBookTitle("Unavailable");
			}
		});

		return transactions;
	}

	@Override
	public List<BorrowingTransaction> getAllBorrows() {
		List<BorrowingTransaction> transactions = repository.findAll();

		// Populate book titles manually
		transactions.forEach(tx -> {
			try {
				BookDTO book = bookClient.getBookById(tx.getBookId());
				tx.setBookTitle(book.getTitle());
			} catch (Exception e) {
				log.warn("Failed to fetch book title for Book ID: {}", tx.getBookId());
				tx.setBookTitle("Unavailable");
			}
		});

		return transactions;
	}
}

above is borrowserviceimpl code

package com.cts.service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.ctc.exception.FineNotFoundException;
import com.ctc.exception.UnauthorizedAccessException;
import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.FineDTO;
import com.cts.feign.BorrowingClient;
import com.cts.feign.MemberClient;
import com.cts.model.Fine;
import com.cts.repository.FineRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class FineServiceImpl implements FineService {

	private final FineRepository fineRepository;
	private final BorrowingClient borrowingClient;
	private final MemberClient memberClient;

	private static final BigDecimal FINE_PER_DAY = BigDecimal.valueOf(1.00);

	@Override
	public FineDTO calculateFine(Long memberId) {
		log.info("Calculating fine for member ID: {}", memberId);

		List<Fine> pendingFines = fineRepository.findByMemberIdAndStatus(memberId, Fine.FineStatus.PENDING);
		if (!pendingFines.isEmpty()) {
			throw new RuntimeException("‚ö†Ô∏è You already have a pending fine. Please pay it before calculating again.");
		}

		List<BorrowingTransactionDTO> borrowedBooks = borrowingClient.getBorrowedBooksByMember(memberId);
		BigDecimal totalFine = BigDecimal.ZERO;

		for (BorrowingTransactionDTO tx : borrowedBooks) {
			if (tx.getStatus() == BorrowingTransactionDTO.Status.RETURNED) {
				LocalDate dueDate = tx.getBorrowDate().plusDays(14);
				long overdueDays = calculateOverdueDays(dueDate, tx.getReturnDate());

				if (overdueDays > 0) {
					totalFine = totalFine.add(FINE_PER_DAY.multiply(BigDecimal.valueOf(overdueDays)));
				}
			}
		}

		if (totalFine.compareTo(BigDecimal.ZERO) <= 0) {
			log.info("No overdue books for member ID: {}", memberId);
			return FineDTO.builder()
					.fineId(null)
					.memberId(memberClient.getMemberById(memberId))
					.amount(BigDecimal.ZERO)
					.status("NO_FINE")
					.transactionDate(null)
					.message("‚úÖ You have no fines to pay. All books were returned on time!")
					.build();
		}

		Fine fine = Fine.builder()
				.memberId(memberId)
				.amount(totalFine)
				.status(Fine.FineStatus.PENDING)
				.transactionDate(LocalDate.now())
				.build();

		fineRepository.save(fine);

		return mapToDTO(fine);
	}

	@Override
	public FineDTO payFine(Long memberId, Long fineId) {
		log.info("Processing payment for fine ID: {} by member ID: {}", fineId, memberId);

		Fine fine = fineRepository.findById(fineId)
				.orElseThrow(() -> new FineNotFoundException("Fine not found with ID: " + fineId));

		if (!fine.getMemberId().equals(memberId)) {
			throw new UnauthorizedAccessException("üö´ You are not authorized to pay this fine.");
		}

		if (fine.getStatus() == Fine.FineStatus.PAID) {
			throw new RuntimeException("‚ÑπÔ∏è This fine is already paid.");
		}

		fine.setStatus(Fine.FineStatus.PAID);
		fineRepository.save(fine);

		log.info("‚úÖ Fine ID {} paid successfully by member {}", fineId, memberId);
		return mapToDTO(fine);
	}

	@Override
	public List<FineDTO> getAllFines() {
		log.info("Fetching all fines (admin view)");
		return fineRepository.findAll().stream()
				.map(this::mapToDTO)
				.collect(Collectors.toList());
	}

	@Override
	public List<FineDTO> getFinesByMemberId(Long memberId) {
		log.info("Fetching fines for member ID: {}", memberId);
		return fineRepository.findByMemberId(memberId).stream()
				.map(this::mapToDTO)
				.collect(Collectors.toList());
	}

	private long calculateOverdueDays(LocalDate dueDate, LocalDate returnDate) {
		if (returnDate != null && returnDate.isAfter(dueDate)) {
			return java.time.temporal.ChronoUnit.DAYS.between(dueDate, returnDate);
		}
		return 0;
	}

	private FineDTO mapToDTO(Fine fine) {
		return FineDTO.builder()
				.fineId(fine.getFineId())
				.memberId(memberClient.getMemberById(fine.getMemberId()))
				.amount(fine.getAmount())
				.status(fine.getStatus().name())
				.transactionDate(fine.getTransactionDate())
				.message("‚úÖ Fine details retrieved successfully.")
				.build();
	}
}

above is fineserviceImpl
