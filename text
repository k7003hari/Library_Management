<app-navbar></app-navbar>

<!-- ✅ Toast Notification -->
<div *ngIf="toastMessage" class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">
  <div class="toast show align-items-center text-white bg-success border-0" role="alert">
    <div class="d-flex">
      <div class="toast-body">
        {{ toastMessage }}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" (click)="toastMessage = null"></button>
    </div>
  </div>
</div>

<div class="container p-5">
  <div class="add-book-card">
    <h3 class="text-center mb-4">Add New Book</h3>
    <form #addBook="ngForm" (ngSubmit)="validateAdd(addBook)" novalidate>

      <div class="mb-3">
        <label for="title" class="form-label">Book Title</label>
        <input ngModel name="title" type="text" class="form-control" id="title" placeholder="Enter book title"
          required minlength="3" #title="ngModel" />
        <div *ngIf="title.invalid && (title.dirty || title.touched)" class="text-danger small">
          <div *ngIf="title.errors?.['required']">Title is required.</div>
          <div *ngIf="title.errors?.['minlength']">Title must be at least 3 characters.</div>
        </div>
      </div>

      <div class="mb-3">
        <label for="author" class="form-label">Author</label>
        <input ngModel name="author" type="text" class="form-control" id="author" placeholder="Enter author name"
          required minlength="3" #author="ngModel" />
        <div *ngIf="author.invalid && (author.dirty || author.touched)" class="text-danger small">
          <div *ngIf="author.errors?.['required']">Author is required.</div>
          <div *ngIf="author.errors?.['minlength']">Author must be at least 3 characters.</div>
        </div>
      </div>

      <div class="mb-3">
        <label for="genre" class="form-label">Genre</label>
        <input ngModel name="genre" type="text" class="form-control" id="genre" placeholder="Enter genre"
          required #genre="ngModel" />
        <div *ngIf="genre.invalid && (genre.dirty || genre.touched)" class="text-danger small">
          Genre is required.
        </div>
      </div>

      <div class="mb-3">
        <label for="isbn" class="form-label">ISBN</label>
        <input ngModel name="isbn" type="text" class="form-control" id="isbn"
          placeholder="e.g., 978-3-16-148410-0" required pattern="^[0-9\-]{10,13}$" #isbn="ngModel" />
        <div *ngIf="isbn.invalid && (isbn.dirty || isbn.touched)" class="text-danger small">
          <div *ngIf="isbn.errors?.['required']">ISBN is required.</div>
          <div *ngIf="isbn.errors?.['pattern']">Invalid ISBN format.</div>
        </div>
      </div>

      <div class="mb-3">
        <label for="year" class="form-label">Publication Year</label>
        <input ngModel name="yearPublished" type="number" class="form-control" id="year" required
          min="1900" max="2099" placeholder="e.g., 2024" #yearPublished="ngModel" />
        <div *ngIf="yearPublished.invalid && (yearPublished.dirty || yearPublished.touched)" class="text-danger small">
          <div *ngIf="yearPublished.errors?.['required']">Publication Year is required.</div>
          <div *ngIf="yearPublished.errors?.['min']">Year must be after 1900.</div>
          <div *ngIf="yearPublished.errors?.['max']">Year must be before 2100.</div>
        </div>
      </div>

      <div class="mb-4">
        <label for="copies" class="form-label">Available Copies</label>
        <input ngModel name="availableCopies" type="number" class="form-control" id="copies" required
          min="0" placeholder="e.g., 5" #availableCopies="ngModel" />
        <div *ngIf="availableCopies.invalid && (availableCopies.dirty || availableCopies.touched)"
          class="text-danger small">
          <div *ngIf="availableCopies.errors?.['required']">Available Copies is required.</div>
          <div *ngIf="availableCopies.errors?.['min']">Copies cannot be negative.</div>
        </div>
      </div>

      <div class="d-grid">
        <button type="submit" class="btn btn-custom" [disabled]="addBook.invalid">Add Book</button>
      </div>
    </form>
  </div>
</div>


import { Component } from '@angular/core';
import { NavbarComponent } from '../navbar/navbar.component';
import { Router, RouterLink } from '@angular/router';
import { BookService } from '../book.service';
import { FormsModule, NgForm } from '@angular/forms';

@Component({
  selector: 'addbook',
  standalone: true,
  imports: [NavbarComponent, RouterLink, FormsModule],
  templateUrl: './add-book.component.html',
  styleUrl: './add-book.component.css'
})
export class AddBookComponent {
  toastMessage: string | null = null;

  constructor(private router: Router, private bookService: BookService) {}

  validateAdd(form: NgForm) {
    if (form.invalid) return;

    this.bookService.add(form.value).subscribe({
      next: (response) => {
        console.log('✅ Book added:', response);
        this.toastMessage = 'Book added successfully!';
        setTimeout(() => {
          this.toastMessage = null;
          this.router.navigate(['/allBook']);
        }, 3000);
      },
      error: (error) => {
        console.error('❌ Error adding book:', error);
        this.toastMessage = 'Failed to add book!';
        setTimeout(() => (this.toastMessage = null), 3000);
      }
    });
  }
}
