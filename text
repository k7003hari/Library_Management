spring.application.name=MailNotification
server.port=4009
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=k7003hari@gmail.com
spring.mail.password=zzzu ywch nbuv ybsg
spring.mail.properties.mail.smtp.auth=true
spring.cloud.config.import-check.enabled=false
spring.mail.properties.mail.smtp.starttls.enable=true


package com.cts.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cts.service.NotificationService;

@RestController
@RequestMapping("/email")
public class NotificationController {
	@Autowired
	private NotificationService notificationService;
 
	@PostMapping("/send")
	public String sendEmail(@RequestParam String recipient, @RequestParam String subject,
			@RequestParam String message) {
		return notificationService.sendEmail(recipient, subject, message);
	}
}

package com.cts.demo;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
@ComponentScan(basePackages="com.cts")
public class MailNotificationApplication {
 
	public static void main(String[] args) {
		SpringApplication.run(MailNotificationApplication.class, args);
	}
 
}
package com.cts.repository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Repository;

@Repository
public class NotificationRepository {
	@Autowired
    private JavaMailSender mailSender;
 
    public String sendEmail(String recipientEmail, String subject, String content) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom("k7003hari@gmail.com"); // Configured in properties
        message.setTo(recipientEmail);
        message.setSubject(subject);
        message.setText(content);
 
        mailSender.send(message);
        return "Email sent successfully";
    }
	
}

package com.cts.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cts.repository.NotificationRepository;

@Service
public class NotificationService {
	@Autowired
    private NotificationRepository notificationRepository;
 
    public String sendEmail(String recipientEmail, String subject, String content) {
    	return notificationRepository.sendEmail(recipientEmail, subject, content);
    }
}

package com.cts;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableFeignClients
public class BorrowingServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(BorrowingServiceApplication.class, args);
	}

}
package com.cts.controller;

import java.util.List;

import org.springframework.web.bind.annotation.*;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.ReturnRequestDTO;
import com.cts.model.BorrowingTransaction;
import com.cts.service.BorrowingService;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/borrowings")
public class BorrowingController {

	private final BorrowingService borrowingService;

	@PostMapping("/borrow")
	public BorrowingTransaction borrowBook(@Valid @RequestBody BorrowingTransactionDTO transactionDTO) {
		return borrowingService.borrowBook(transactionDTO);
	}

	@PutMapping("/return")
	public BorrowingTransaction returnBook(@Valid @RequestBody ReturnRequestDTO returnDTO) {
		return borrowingService.returnBook(returnDTO.getMemberId(), returnDTO.getBookId());
	}

	@GetMapping("/member/{memberId}")
	public List<BorrowingTransaction> getBorrowedBooks(@PathVariable Long memberId) {
		return borrowingService.getMemberBorrowedBooks(memberId);
	}

	@GetMapping("/allborrow")
	public List<BorrowingTransaction> getAllBorrows() {
		return borrowingService.getAllBorrows();
	}
}
package com.cts.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class BookDTO {
    private Long bookId;
    private String title;
    private String author;
    private String genre;
    private String isbn;
    private int yearPublished;
    private int availableCopies;
}

package com.cts.dto;

import java.time.LocalDate;

import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class BorrowingTransactionDTO {
    private Long transactionId;

    @NotNull(message = "Book ID cannot be null")
    private Long bookId;

    @NotNull(message = "Member ID cannot be null")
    private Long memberId;
}
package com.cts.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class MemberDTO {
    private Long memberId;
    private String name;
    private String email;
    private String phone;
    private String address;
    private String membershipStatus;
}
package com.cts.dto;
 
import lombok.Getter;
import lombok.Setter;
 
@Getter
@Setter
public class ReturnRequestDTO {
private Long memberId;
private Long bookId;
}

package com.cts.exception;

public class BorrowingException extends RuntimeException {
    public BorrowingException(String message) {
        super("Borrowing is Regreted");
    }
}
package com.cts.exception;

public class BorrowingNotAllowedException extends RuntimeException {
    public BorrowingNotAllowedException(String message) {
        super("Book already borrowed");
    }
}
package com.cts.exception;

public class BorrowingTransactionNotFoundException extends RuntimeException {
    public BorrowingTransactionNotFoundException(String message) {
        super(message);
    }
}

package com.cts.exception;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {

	@ExceptionHandler(BorrowingTransactionNotFoundException.class)
	@ResponseStatus(HttpStatus.NOT_FOUND)
	public Map<String, String> handleNotFound(BorrowingTransactionNotFoundException ex) {
		Map<String, String> error = new HashMap<>();
		error.put("error", ex.getMessage());
		return error;
	}

	@ExceptionHandler(BorrowingNotAllowedException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public Map<String, String> handleNotAllowed(BorrowingNotAllowedException ex) {
		Map<String, String> error = new HashMap<>();
		error.put("error", ex.getMessage());
		return error;
	}

	@ExceptionHandler(MethodArgumentNotValidException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public Map<String, String> handleValidation(MethodArgumentNotValidException ex) {
		Map<String, String> errors = new HashMap<>();
		ex.getBindingResult().getFieldErrors().forEach(e -> errors.put(e.getField(), e.getDefaultMessage()));
		return errors;
	}
}
package com.cts.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.cts.dto.BookDTO;

import lombok.Data;
import lombok.Getter;

@FeignClient(name = "BOOKSERVICE", path="/books")
public interface BookClient {
    @GetMapping("/getById/{id}")
    BookDTO getBook(@PathVariable Long id);
 
    @PutMapping("/books/{id}/copies")
    void updateBookCopies(@PathVariable Long id, @RequestParam int availableCopies);	
}
package com.cts.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@FeignClient(name = "NOTIFICATIONSERVICE", path = "/email")
public interface MailClient {
	@PostMapping("/send")
	public String sendEmail(@RequestParam String recipient, @RequestParam String subject,
			@RequestParam String message) ;
 
}

package com.cts.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.cts.dto.MemberDTO;

@FeignClient(name = "MEMBERSERVICE", path="/members")
public interface MemberClient {
 
    @GetMapping("/{id}")
    Object getMember(@PathVariable Long id);
 
    @GetMapping("/email/{email}")
    MemberDTO getMemberByEmail(@PathVariable String email);
}

package com.cts.model;

import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class BorrowingTransaction {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Ensures auto-increment works
    private Long id;

    private Long memberId;
    private Long bookId;
    
    private LocalDate borrowDate;
    
    private LocalDate returnDate;

    @Enumerated(EnumType.STRING)
    private Status status;

    public enum Status {
        BORROWED,
        RETURNED
    }
}

package com.cts.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.cts.model.BorrowingTransaction;

public interface BorrowingRepository extends JpaRepository<BorrowingTransaction, Long> {

	List<BorrowingTransaction> findByMemberIdAndStatus(Long memberId, BorrowingTransaction.Status status);

	Optional<BorrowingTransaction> findByBookIdAndMemberIdAndStatus(Long bookId, Long memberId,
			BorrowingTransaction.Status status);
	
}

package com.cts.service;

import java.util.List;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.model.BorrowingTransaction;

public interface BorrowingService {

	BorrowingTransaction borrowBook(BorrowingTransactionDTO transactionDTO);

	BorrowingTransaction returnBook(Long memberId, Long bookId);

	List<BorrowingTransaction> getMemberBorrowedBooks(Long memberId);

	List<BorrowingTransaction> getAllBorrows();
}

package com.cts.service;

import java.time.LocalDate;
import java.util.List;

import org.springframework.stereotype.Service;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.ReturnRequestDTO;
import com.cts.exception.BorrowingNotAllowedException;
import com.cts.exception.BorrowingTransactionNotFoundException;
import com.cts.feign.BookClient;
import com.cts.feign.MailClient;
import com.cts.feign.MemberClient;
import com.cts.model.BorrowingTransaction;
import com.cts.repository.BorrowingRepository;

import feign.FeignException;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@AllArgsConstructor
public class BorrowingServiceImpl implements BorrowingService {

	private final BorrowingRepository repository;
	private final BookClient bookClient;
	private final MemberClient memberClient;
	private final MailClient mailClient;

	@Override
	public BorrowingTransaction borrowBook(BorrowingTransactionDTO transactionDTO) {
		log.info("Attempting to borrow book with ID: {} for member ID: {}", transactionDTO.getBookId(),
				transactionDTO.getMemberId());

// Validate member
		try {
			memberClient.getMember(transactionDTO.getMemberId());
		} catch (FeignException e) {
			log.error("Member not found: {}", transactionDTO.getMemberId());
			throw new BorrowingNotAllowedException("Member not found");
		}

// Validate book
		try {
			bookClient.getBook(transactionDTO.getBookId());
		} catch (FeignException e) {
			log.error("Book not found: {}", transactionDTO.getBookId());
			throw new BorrowingNotAllowedException("Book not found");
		}

// Check for borrowing limit
		long activeBorrowings = repository
				.findByMemberIdAndStatus(transactionDTO.getMemberId(), BorrowingTransaction.Status.BORROWED).size();
		if (activeBorrowings >= 5) {
			log.warn("Borrowing limit exceeded for member ID: {}", transactionDTO.getMemberId());
			throw new BorrowingNotAllowedException("Borrowing limit exceeded");
		}

// Check if book already borrowed
		boolean alreadyBorrowedSameBook = repository.findByBookIdAndMemberIdAndStatus(transactionDTO.getBookId(),
				transactionDTO.getMemberId(), BorrowingTransaction.Status.BORROWED).isPresent();

		if (alreadyBorrowedSameBook) {
			log.warn("Book already borrowed by member ID: {}", transactionDTO.getMemberId());
			throw new BorrowingNotAllowedException("Book is already borrowed by this member");
		}

		BorrowingTransaction tx = BorrowingTransaction.builder().bookId(transactionDTO.getBookId())
				.memberId(transactionDTO.getMemberId()).borrowDate(LocalDate.now())
				.status(BorrowingTransaction.Status.BORROWED).build();

		BorrowingTransaction savedTx = repository.save(tx);
		log.info("Borrowing saved successfully");

		String msg = "Successfully borrowed Book ID: " + transactionDTO.getBookId() + " by Member ID: "
				+ transactionDTO.getMemberId();
		mailClient.sendEmail("k7003hari@gmail.com", "Library Management System", msg); // Optional: Replace with dynamic
																						// email

		return savedTx;
	}

	@Override
	public BorrowingTransaction returnBook(Long memberId, Long bookId) {
		log.info("Attempting to return book ID: {} for member ID: {}", bookId, memberId);

		BorrowingTransaction tx = repository
				.findByBookIdAndMemberIdAndStatus(bookId, memberId, BorrowingTransaction.Status.BORROWED)
				.orElseThrow(() -> {
					log.error("No active borrowing found for member ID: {}, book ID: {}", memberId, bookId);
					return new BorrowingTransactionNotFoundException("No active borrowing found");
				});

		tx.setStatus(BorrowingTransaction.Status.RETURNED);
		tx.setReturnDate(LocalDate.now());
		return repository.save(tx);
	}

	@Override
	public List<BorrowingTransaction> getMemberBorrowedBooks(Long memberId) {
		log.debug("Fetching borrowed books for member ID: {}", memberId);
		List<BorrowingTransaction> borrowedBooks = repository.findByMemberIdAndStatus(memberId,
				BorrowingTransaction.Status.BORROWED);
		log.info("Retrieved {} borrowed books for member ID: {}", borrowedBooks.size(), memberId);
		return borrowedBooks;
	}

	@Override
	public List<BorrowingTransaction> getAllBorrows() {
		log.debug("Fetching all borrow transactions");
		return repository.findAll();
	}
}

{
    "timestamp": "2025-06-07T09:35:41.197+00:00",
    "status": 500,
    "error": "Internal Server Error",
    "trace": "feign.FeignException$InternalServerError: [500] during [POST] to [http://NOTIFICATIONSERVICE/email/send?recipient=k7003hari%40gmail.com&subject=Library%20Management%20System&message=Successfully%20borrowed%20Book%20ID%3A%201%20by%20Member%20ID%3A%201] [MailClient#sendEmail(String,String,String)]: [{\"code\":\"INTERNAL_SERVER_ERROR\",\"message\":\"Something went wrong\",\"path\":null,\"timestamp\":\"2025-06-07T15:05:41.1853742\"}]\r\n\tat feign.FeignException.serverErrorStatus(FeignException.java:281)\r\n\tat feign.FeignException.errorStatus(FeignException.java:226)\r\n\tat feign.FeignException.errorStatus(FeignException.java:213)\r\n\tat feign.codec.ErrorDecoder$Default.decode(ErrorDecoder.java:103)\r\n\tat feign.InvocationContext.decodeError(InvocationContext.java:133)\r\n\tat feign.InvocationContext.proceed(InvocationContext.java:80)\r\n\tat feign.ResponseHandler.handleResponse(ResponseHandler.java:69)\r\n\tat feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:109)\r\n\tat feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:53)\r\n\tat feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:104)\r\n\tat jdk.proxy7/jdk.proxy7.$Proxy199.sendEmail(Unknown Source)\r\n\tat com.cts.service.BorrowingServiceImpl.borrowBook(BorrowingServiceImpl.java:79)\r\n\tat com.cts.controller.BorrowingController.borrowBook(BorrowingController.java:24)\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\r\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\r\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\r\n",
    "message": "[500] during [POST] to [http://NOTIFICATIONSERVICE/email/send?recipient=k7003hari%40gmail.com&subject=Library%20Management%20System&message=Successfully%20borrowed%20Book%20ID%3A%201%20by%20Member%20ID%3A%201] [MailClient#sendEmail(String,String,String)]: [{\"code\":\"INTERNAL_SERVER_ERROR\",\"message\":\"Something went wrong\",\"path\":null,\"timestamp\":\"2025-06-07T15:05:41.1853742\"}]",
    "path": "/borrowings/borrow"
}


