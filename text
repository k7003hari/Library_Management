package com.cts.service;

import java.time.LocalDate;
import java.util.List;

import org.springframework.stereotype.Service;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.MemberDTO;
import com.cts.exception.BorrowingNotAllowedException;
import com.cts.exception.BorrowingTransactionNotFoundException;
import com.cts.feign.BookClient;
import com.cts.feign.MailClient;
import com.cts.feign.MemberClient;
import com.cts.model.BorrowingTransaction;
import com.cts.repository.BorrowingRepository;

import feign.FeignException;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@AllArgsConstructor
public class BorrowingServiceImpl implements BorrowingService {

	private final BorrowingRepository repository;
	private final BookClient bookClient;
	private final MemberClient memberClient;
	private final MailClient mailClient;

	@Override
	public BorrowingTransaction borrowBook(BorrowingTransactionDTO transactionDTO) {
		try {
			// existing logic
			BorrowingTransaction transaction = BorrowingTransaction.builder().bookId(transactionDTO.getBookId())
					.memberId(transactionDTO.getMemberId()).borrowDate(LocalDate.now())
					.status(BorrowingTransaction.Status.BORROWED).build();

			BorrowingTransaction savedTransaction = repository.save(transaction);

			// Update book copies via BookClient (assumed done already)

			// Get member email
			Object memberObj = memberClient.getMember(transactionDTO.getMemberId());
			String email = ""; // You can extract from memberObj or cast it to MemberDTO

			if (memberObj instanceof MemberDTO member) {
				email = member.getEmail();
				String subject = "Library Borrow Confirmation";
				String message = "You have borrowed Book ID: " + transactionDTO.getBookId() + " on " + LocalDate.now()
						+ ". Please return on time.";

				mailClient.sendEmail(email, subject, message);
			}

			log.info("Email sent to member: {}", email);

			return savedTransaction;
		} catch (FeignException e) {
			log.error("Error while communicating with external services: {}", e.getMessage());
			throw new BorrowingNotAllowedException("Could not process borrowing due to external service error.");
		}
	}

	@Override
	public BorrowingTransaction returnBook(Long memberId, Long bookId) {
		log.info("Attempting to return book ID: {} for member ID: {}", bookId, memberId);

		BorrowingTransaction tx = repository
				.findByBookIdAndMemberIdAndStatus(bookId, memberId, BorrowingTransaction.Status.BORROWED)
				.orElseThrow(() -> {
					log.error("No active borrowing found for member ID: {}, book ID: {}", memberId, bookId);
					return new BorrowingTransactionNotFoundException("No active borrowing found");
				});

		tx.setStatus(BorrowingTransaction.Status.RETURNED);
		tx.setReturnDate(LocalDate.now());
		return repository.save(tx);
	}

	@Override
	public List<BorrowingTransaction> getMemberBorrowedBooks(Long memberId) {
		log.debug("Fetching borrowed books for member ID: {}", memberId);
		List<BorrowingTransaction> borrowedBooks = repository.findByMemberIdAndStatus(memberId,
				BorrowingTransaction.Status.BORROWED);
		log.info("Retrieved {} borrowed books for member ID: {}", borrowedBooks.size(), memberId);
		return borrowedBooks;
	}

	@Override
	public List<BorrowingTransaction> getAllBorrows() {
		log.debug("Fetching all borrow transactions");
		return repository.findAll();
	}
}

package com.cts.controller;

import java.util.List;

import org.springframework.web.bind.annotation.*;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.ReturnRequestDTO;
import com.cts.model.BorrowingTransaction;
import com.cts.service.BorrowingService;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/borrowings")
public class BorrowingController {

	private final BorrowingService borrowingService;

	@PostMapping("/borrow")
	public BorrowingTransaction borrowBook(@Valid @RequestBody BorrowingTransactionDTO transactionDTO) {
		return borrowingService.borrowBook(transactionDTO);
	}

	@PutMapping("/return")
	public BorrowingTransaction returnBook(@Valid @RequestBody ReturnRequestDTO returnDTO) {
		return borrowingService.returnBook(returnDTO.getMemberId(), returnDTO.getBookId());
	}

	@GetMapping("/member/{memberId}")
	public List<BorrowingTransaction> getBorrowedBooks(@PathVariable Long memberId) {
		return borrowingService.getMemberBorrowedBooks(memberId);
	}

	@GetMapping("/allborrow")
	public List<BorrowingTransaction> getAllBorrows() {
		return borrowingService.getAllBorrows();
	}
}

package com.cts.exception;

public class BorrowingException extends RuntimeException {
    public BorrowingException(String message) {
        super("Borrowing is Regreted");
    }
}



package com.cts.exception;

public class BorrowingNotAllowedException extends RuntimeException {
    public BorrowingNotAllowedException(String message) {
        super("Book already borrowed");
    }
}

package com.cts.exception;

public class BorrowingTransactionNotFoundException extends RuntimeException {
    public BorrowingTransactionNotFoundException(String message) {
        super(message);
    }
}
package com.cts.exception;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {

	@ExceptionHandler(BorrowingTransactionNotFoundException.class)
	@ResponseStatus(HttpStatus.NOT_FOUND)
	public Map<String, String> handleNotFound(BorrowingTransactionNotFoundException ex) {
		Map<String, String> error = new HashMap<>();
		error.put("error", ex.getMessage());
		return error;
	}

	@ExceptionHandler(BorrowingNotAllowedException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public Map<String, String> handleNotAllowed(BorrowingNotAllowedException ex) {
		Map<String, String> error = new HashMap<>();
		error.put("error", ex.getMessage());
		return error;
	}

	@ExceptionHandler(MethodArgumentNotValidException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public Map<String, String> handleValidation(MethodArgumentNotValidException ex) {
		Map<String, String> errors = new HashMap<>();
		ex.getBindingResult().getFieldErrors().forEach(e -> errors.put(e.getField(), e.getDefaultMessage()));
		return errors;
	}
}
