<app-navbar></app-navbar>

<div class="container mt-5 text-center">
  <h2 class="mb-3 text-primary">ðŸ‘¥ Member Module</h2>
  <p class="text-muted">Manage all member-related operations from here</p>

  <!-- Search Member Section -->
  <div class="container mt-5 pt-5">
    <h4 class="text-primary mb-3">Search Member by ID</h4>

    <div class="card p-4 shadow-sm mx-auto" style="max-width: 500px;">
      <div class="form-group mb-3">
        <input
          type="number"
          [(ngModel)]="memberId"
          class="form-control"
          placeholder="Enter Member ID"
        />
      </div>
      <button class="btn btn-primary w-100" (click)="searchMember()">Search</button>
    </div>

    <div *ngIf="member" class="card mt-4 shadow border-success mx-auto" style="max-width: 500px;">
      <div class="card-body text-start">
        <h5 class="text-success">âœ… Member Found</h5>
        <p><strong>Name:</strong> {{ member.name }}</p>
        <p><strong>Email:</strong> {{ member.email }}</p>
        <p><strong>Phone:</strong> {{ member.phone }}</p>
        <p><strong>Address:</strong> {{ member.address }}</p>
        <p><strong>Status:</strong> {{ member.membershipStatus }}</p>
      </div>
      <div class="card-footer text-end">
        <button class="btn btn-outline-secondary" routerLink="/member">OK</button>
      </div>
    </div>
  </div>

  <!-- Manage Members Section -->
  <div class="container mt-5">
    <h4 class="text-primary mb-4">Manage Members</h4>
    <div class="row row-cols-1 row-cols-md-3 g-4">
      <div class="col" *ngFor="let member of members">
        <div class="card h-100 shadow-sm">
          <img
            src="https://cdn-icons-png.flaticon.com/512/2288/2288510.png"
            class="card-img-top p-4"
            alt="Member Icon"
            style="height: 180px; object-fit: contain;"
          />
          <div class="card-body text-start">
            <h5 class="card-title text-center text-primary">Member Details</h5>
            <p><strong>Name:</strong> {{ member.name }}</p>
            <p><strong>Email:</strong> {{ member.email }}</p>
            <p><strong>Phone:</strong> {{ member.phone }}</p>
            <p><strong>Address:</strong> {{ member.address }}</p>
            <p><strong>Status:</strong> {{ member.membershipStatus }}</p>
          </div>
          <div class="card-footer d-flex flex-column gap-2">
            <button class="btn btn-warning" (click)="updateMember(member.memberId)">Update</button>
            <button class="btn btn-danger" (click)="deleteMember(member.memberId)">Delete</button>
            <button class="btn btn-success" (click)="checkfine()">Check Fine</button>
            <button class="btn btn-primary" (click)="pay()">Pay Fine</button>
          </div>
        </div>
      </div>

      <!-- Add Member Card -->
      <div class="col d-flex align-items-stretch">
        <div
          class="card add-book-card shadow w-100 text-center"
          routerLink="/addMember"
          style="cursor: pointer;"
        >
          <div class="card-body d-flex flex-column justify-content-center align-items-center">
            <i class="bi bi-plus-circle-fill display-4 text-success mb-3"></i>
            <h5 class="text-success fw-semibold">Add New Member</h5>
            <p class="text-muted small">Click to add a new Member</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

import { Component, OnInit } from '@angular/core';
import { MemberService } from '../member.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';

@Component({
  selector: 'app-member-up-del',
  standalone: true,
  imports: [RouterLink, FormsModule, CommonModule, NavbarComponent],
  templateUrl: './member-up-del.component.html',
  styleUrls: ['./member-up-del.component.css']
})
export class MemberUpDelComponent implements OnInit {
  members: any[] = [];
  memberId: number = 0;
  member: any = null;

  constructor(private memberService: MemberService, private router: Router) {}

  ngOnInit(): void {
    this.loadMembers();
  }

  loadMembers(): void {
    this.memberService.getAllMembers().subscribe({
      next: (data) => {
        this.members = data;
        console.log("Loaded members:", this.members);
      },
      error: (err) => {
        console.error("Error loading members", err);
      }
    });
  }

  updateMember(memberId: number): void {
    this.router.navigate(['/updateMember', memberId]);
  }

  deleteMember(memberId: number): void {
    console.log("Deleting member with ID:", memberId);
    if (confirm('Are you sure you want to delete this member?')) {
      this.memberService.deleteMember(memberId).subscribe({
        next: () => {
          alert("Deleted successfully");
          this.loadMembers();
        },
        error: (err) => {
          alert("Error deleting member");
          console.error("Delete error:", err);
        }
      });
    }
  }

  searchMember(): void {
    if (!this.memberId) {
      alert('Please enter a valid Member ID');
      return;
    }

    this.memberService.getMemberById(this.memberId).subscribe({
      next: (data) => {
        this.member = data;
        console.log('Member found:', data);
      },
      error: (error) => {
        alert('Member not found.');
        this.member = null;
        console.error('Error fetching member:', error);
      }
    });
  }

  checkfine(): void {
    this.router.navigate(['/fineCal']);
  }

  pay(): void {
    this.router.navigate(['/finePay']);
  }
}

/* member-up-del.component.css */

/* Centering text and spacing around the module title */
.container h2 {
  margin-top: 1rem;
  margin-bottom: 1rem;
}

/* Improve spacing inside cards */
.card {
  border-radius: 12px;
  padding: 1rem;
  transition: transform 0.2s ease;
}

.card:hover {
  transform: scale(1.02);
}

/* Image styling for consistency */
.card-img-top {
  max-height: 180px;
  object-fit: contain;
}

/* Footer buttons layout */
.card-footer {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

/* Style for the "Add New Member" card */
.add-book-card {
  border: 2px dashed #28a745;
  background-color: #f8fff8;
}

.add-book-card:hover {
  background-color: #e6ffe6;
}

/* Mobile responsiveness tweak */
@media (max-width: 576px) {
  .card-footer {
    flex-direction: column;
  }
}
