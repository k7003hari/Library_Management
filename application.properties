<app-navbar></app-navbar>
<div class="container ">
  <div class="align-items-center justify-content-center text-center mt-3 mb-4">
    <h2 class="mb-4 text-primary ">
      📚 Book Module
    </h2>
    <p class="text-muted mb-5">Manage all book-related operations from here</p>
  </div>
  <!-- 🔍 Search Bar (Visible to all roles) -->
  <div class="row mb-4 mt-4 search-area align-items-center">
    <div class="col-sm-12 col-md-4 mb-2 mb-md-0">
      <select class="form-select" [(ngModel)]="searchType">
        <option value="title">Search by Title</option>
        <option value="author">Search by Author</option>
        <option value="genre">Search by Genre</option>
      </select>
    </div>
    <div class="col-sm-12 col-md-6 mb-2 mb-md-0">
      <input type="text" class="form-control" placeholder="Enter value to search" [(ngModel)]="searchValue">
    </div>
    <div class="col-sm-12 col-md-2">
      <button class="btn btn-primary w-100" (click)="searchBooks()">
        <i class="bi bi-search"></i> Search
      </button>
    </div>
  </div>
  <!-- 📚 Book Cards -->
  <div class="row">
    <ng-container *ngFor="let book of books">
      <div class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
        <div class="card shadow w-100 text-center">
          <img
            src="https://tse1.mm.bing.net/th/id/OIP.li28PO9vkz1NQS9jN9ZOOAHaHa?w=161&h=180&c=7&r=0&o=5&dpr=1.2&pid=1.7"
            class="img-fluid rounded mt-3" alt="Book Cover" />
          <div class="card-body">
            <h4 class="text-primary fw-bold">{{ book.title }}</h4>
            <p><strong>Author:</strong> {{ book.author }}</p>
            <p><strong>Genre:</strong> {{ book.genre }}</p>
            <p><strong>ISBN:</strong> {{ book.isbn }}</p>
            <p><strong>Year:</strong> {{ book.yearPublished }}</p>
            <p><strong>Available:</strong> {{ book.availableCopies }}</p>
          </div>
          <div class="card-footer d-flex flex-wrap justify-content-center gap-2 p-3">
            <!-- Buttons visible only to MEMBER -->
            <ng-container *ngIf="userRole === 'member'">
              <button class="btn btn-outline-success" routerLink="/borrowBook"  title="Borrow Book">
                <i class="bi bi-book"></i> Borrow
              </button>
              <button class="btn btn-outline-danger" routerLink="/returnBook"  title="Return Book">
                <i class="bi bi-arrow-return-left"></i> Return
              </button>
            </ng-container>
            <!-- Buttons visible only to ADMIN -->
            <ng-container *ngIf="userRole === 'admin'">
              <button class="btn btn-outline-warning" (click)="updateBook(book.bookId)" title="Update Book">
                <i class="bi bi-pencil-square"></i> Update
              </button>
              <button class="btn btn-outline-danger" (click)="deleteBook(book.bookId)" title="Delete Book">
                <i class="bi bi-trash"></i> Delete
              </button>
            </ng-container>
          </div>
        </div>
      </div>
   </ng-container>
    <!-- ➕ Add New Book (Only visible to ADMIN) -->
    <div *ngIf="userRole === 'admin'" class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
      <div class="card add-book-card shadow w-100 text-center" routerLink="/addBook" style="cursor: pointer;">
        <div class="card-body d-flex flex-column justify-content-center align-items-center">
          <i class="bi bi-plus-circle-fill display-4 text-success mb-3"></i>
          <h5 class="text-success fw-semibold">Add New Book</h5>
          <p class="text-muted small">Click to add a new book to the library</p>
        </div>
      </div>
    </div>
 </div>
  <!-- ❗ No Results -->
  <div *ngIf="books.length === 0" class="alert alert-info text-center mt-4">
    No books found.
  </div>    
</div>

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { AllBook, BookService } from '../book.service';
import { FormsModule } from '@angular/forms';
import { jwtDecode } from 'jwt-decode';
 
@Component({
  selector: 'app-all-book',
  standalone: true,
  imports: [CommonModule, RouterLink, NavbarComponent, FormsModule],
  templateUrl: './all-book.component.html',
  styleUrls: ['./all-book.component.css']
})
export class AllBookComponent {
 
  books: AllBook[] = [];
  allBooks: AllBook[] = [];
  searchType: string = 'title';
  searchValue: string = '';
  error: any;
 
  userRole: string = ''; // Store role: "admin" or "member"
 
  constructor(private bookService: BookService, private route: Router) {
    this.loadBooks();
    this.extractRole();
  }
 
  extractRole(): void {
    const token = localStorage.getItem('JWT');
    if (token) {
      try {
        const decoded: any = jwtDecode(token);
        this.userRole = decoded.role || decoded.roles ||'';  // Assumes JWT contains 'role'
        localStorage.setItem("memberId", decoded.userId); // store memberId (user ID)
      } catch (err) {
        console.error('Failed to decode JWT', err);
      }
    }
  }
 
  loadBooks(): void {
    this.bookService.view().subscribe({
      next: (response: AllBook[]) => {
        this.books = response;
        this.allBooks = response;
      },
      error: err => this.error = err.message
    });
  }
 
  searchBooks(): void {
    if (!this.searchValue.trim()) {
      this.books = this.allBooks;
      return;
    }
 
    switch (this.searchType) {
      case 'title':
        this.bookService.searchByTitle(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'author':
        this.bookService.searchByAuthor(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'genre':
        this.bookService.searchByGenre(this.searchValue).subscribe(data => this.books = data);
        break;
    }
  }
 
  deleteBook(bookId: string): void {
    if (confirm('Are you sure you want to delete this book?')) {
      this.bookService.delete(bookId).subscribe(() => {
        this.books = this.books.filter(book => book.bookId !== bookId);
      });
    }
  }
 
  updateBook(bookId: string): void {
    console.log("clicked");
    this.route.navigate(['/updatebook', bookId]);
  }
 
  trackById(index: number, book: AllBook) {
    return book.bookId;
  }

  borrowBook(bookId: string): void {
    this.bookService.borrowBook(bookId).subscribe({
      next: (res) => {
        alert('Book borrowed successfully!');
        console.log(res);
        this.loadBooks();
      },
      error: (err) => {
        console.error(err);
        alert('Error borrowing book: ' + err.error);
      }
    });
  }
   
  returnBook(bookId: string): void {
    this.bookService.returnBook(bookId).subscribe({
      next: (res) => {
        alert('Book returned successfully!');
        console.log(res);
        this.loadBooks();
      },
      error: (err) => {
        console.error(err);
        alert('Error returning book: ' + err.error);
      }
    });
  }

}

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'

})
export class BookService {
  private pathAdd = 'http://localhost:9090/books/addbook';
  private pathView = 'http://localhost:9090/books/getall';
  private pathUpdate = 'http://localhost:9090/books/update/';
  private pathDelete = 'http://localhost:9090/books/delete/';
  private pathId = 'http://localhost:9090/books/getById/';
  private pathTitle = 'http://localhost:9090/books/search/title/';
  private pathAuthor = 'http://localhost:9090/books/search/author/';
  private pathGenre = 'http://localhost:9090/books/search/genre/';
  private pathBorrow = 'http://localhost:9090/borrowings/borrow'; // ("memberId": 3, "bookId": 2, "returnDate":"2025-06-03")
  private pathReturn = 'http://localhost:9090/borrowings/return'; // ("memberId": 1, "bookId": 2)
  

  constructor(private client: HttpClient) { }

  public add(addBook: AddBook): Observable<string> {
    return this.client.post(this.pathAdd, addBook, { responseType: 'text' });
  }

  public view(): Observable<AllBook[]> {
    return this.client.get<AllBook[]>(this.pathView);
  }

  public delete(bookId: string): Observable<void> {
    return this.client.delete<void>(this.pathDelete + bookId);
  }

  public getById(bookId: string): Observable<AllBook> {
    return this.client.get<AllBook>(this.pathId + bookId);
  }

  public update(bookId: string, book: AddBook): Observable<string> {
    return this.client.put(this.pathUpdate + bookId, book, { responseType: 'text' });
  }

  public searchByTitle(title: string): Observable<AllBook[]> {
    return this.client.get<AllBook[]>(this.pathTitle + title);
  }

  public searchByAuthor(author: string): Observable<AllBook[]> {
    return this.client.get<AllBook[]>(this.pathAuthor + author);
  }

  public searchByGenre(genre: string): Observable<AllBook[]> {
    return this.client.get<AllBook[]>(this.pathGenre + genre);
  }


  public borrowBook(bookId: string): Observable<string> {
    const memberId = localStorage.getItem("memberId");
    const body = { bookId: +bookId, memberId: +memberId };
    return this.client.post(this.pathBorrow, body, { responseType: 'text' });
  }

  public returnBook(bookId: string): Observable<string> {
    const memberId = localStorage.getItem("memberId");
    const body = { bookId: +bookId, memberId: +memberId };
    return this.client.post(this.pathReturn, body, { responseType: 'text' });
  }
}

export class AddBook {
  constructor(
    public title: string,
    public author: string,
    public genre: string,
    public isbn: string,
    public yearPublished: string,
    public availableCopies: string
  ) { }
}

export class AllBook {
  constructor(
    public bookId: string,
    public title: string,
    public author: string,
    public genre: string,
    public isbn: string,
    public yearPublished: string,
    public availableCopies: string,
  ) { }
}
