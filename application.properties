<app-navbar></app-navbar>

<div class="container" style="margin-top: 100px;">
  <div class="text-center mt-3 mb-4">
    <div *ngIf="userRole === 'member'" class="alert alert-info text-center">
      Logged in as: {{ members[0]?.email }}
    </div>
    <h2 class="text-primary">👥 Member Module</h2>
    <p class="text-muted mb-5">Manage all member-related operations from here</p>
  </div>

  <!-- 🔍 Search for Admin -->
  <div class="row mb-5 justify-content-center" *ngIf="userRole === 'admin'">
    <div class="col-md-6">
      <div class="card shadow-sm p-4">
        <h5 class="text-primary mb-3 text-center">Search Member by ID</h5>
        <input type="number" [(ngModel)]="memberId" class="form-control mb-3" placeholder="Enter Member ID" />
        <button class="btn btn-primary w-100" (click)="searchMember()">
          <i class="bi bi-search"></i> Search
        </button>
      </div>
    </div>
  </div>

  <!-- ✅ Searched Member -->
  <div *ngIf="member" class="row justify-content-center">
    <div class="col-md-6">
      <div class="card shadow border-success">
        <div class="card-body">
          <h5 class="text-success text-center">✅ Member Found</h5>
          <p><strong>Name:</strong> {{ member.name }}</p>
          <p><strong>Email:</strong> {{ member.email }}</p>
          <p><strong>Phone:</strong> {{ member.phone }}</p>
          <p><strong>Address:</strong> {{ member.address }}</p>
          <p><strong>Status:</strong> {{ member.membershipStatus }}</p>
        </div>
        <div class="card-footer text-center">
          <button class="btn btn-outline-secondary" routerLink="/member">OK</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 👥 Member Cards -->
  <div class="row">
    <ng-container *ngFor="let member of members">
      <div class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
        <div class="card shadow w-100 text-center">
          <img
            src="https://cdn-icons-png.flaticon.com/512/2288/2288510.png"
            class="img-fluid rounded-top p-4"
            alt="Member Icon"
            style="height: 180px; object-fit: contain;"
          />
          <div class="card-body text-start">
            <h5 class="card-title text-primary text-center">Member Details</h5>
            <p><strong>Name:</strong> {{ member.name }}</p>
            <p><strong>Email:</strong> {{ member.email }}</p>
            <p><strong>Phone:</strong> {{ member.phone }}</p>
            <p><strong>Address:</strong> {{ member.address }}</p>
            <p><strong>Status:</strong> {{ member.membershipStatus }}</p>
          </div>
          <div class="card-footer d-flex flex-wrap justify-content-center gap-2 p-3">
            <button *ngIf="userRole === 'admin'" class="btn btn-outline-warning" (click)="updateMember(member.memberId)">
              <i class="bi bi-pencil-square"></i> Update
            </button>
            <button *ngIf="userRole === 'admin'" class="btn btn-outline-danger" (click)="deleteMember(member.memberId)">
              <i class="bi bi-trash"></i> Delete
            </button>
            <button *ngIf="userRole === 'member'" class="btn btn-outline-success" (click)="checkfine()">
              <i class="bi bi-currency-rupee"></i> Check Fine
            </button>
            <button *ngIf="userRole === 'member'" class="btn btn-outline-primary" (click)="pay()">
              <i class="bi bi-wallet"></i> Pay Fine
            </button>
          </div>
        </div>
      </div>
    </ng-container>

    <!-- ➕ Add Member Card (Admin Only) -->
    <div *ngIf="userRole === 'admin'" class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
      <div class="card shadow w-100 text-center" routerLink="/addMember" style="cursor: pointer;">
        <div class="card-body d-flex flex-column justify-content-center align-items-center">
          <i class="bi bi-plus-circle-fill display-4 text-success mb-3"></i>
          <h5 class="text-success fw-semibold">Add New Member</h5>
          <p class="text-muted small">Click to add a new Member</p>
        </div>
      </div>
    </div>
  </div>

  <!-- No Members -->
  <div *ngIf="members.length === 0" class="alert alert-info text-center mt-4">
    No members found.
  </div>

  <!-- Register Button (Admin Only) -->
  <div *ngIf="userRole === 'admin'" class="d-flex justify-content-center mt-4">
    <button class="btn btn-custom" routerLink="/addMember">Register As New Member</button>
  </div>
</div>

import { Component, OnInit } from '@angular/core';
import { MemberService } from '../member.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { jwtDecode } from 'jwt-decode';
 
@Component({
  selector: 'app-member-up-del',
  standalone: true,
  imports: [RouterLink, FormsModule, CommonModule, NavbarComponent],
  templateUrl: './member-up-del.component.html',
  styleUrls: ['./member-up-del.component.css']
})
export class MemberUpDelComponent implements OnInit {
  members: any[] = [];
  member: any = null;
  memberId: any;
  userRole: string = '';
  loggedInMemberId: number = 0;
  loggedInEmail: string = '';
 
  constructor(private memberService: MemberService, private router: Router) {}
 
  ngOnInit(): void {
    this.extractRole();
    this.loadMembers();
  }
 
  extractRole(): void {
    const token = localStorage.getItem('JWT');
    if (token) {
      try {
        const decoded: any = jwtDecode(token);
        this.userRole = decoded.role || decoded.roles || '';
        this.loggedInMemberId = decoded.userId;
this.loggedInEmail = decoded.email;
 
        localStorage.setItem('memberId', decoded.userId);
localStorage.setItem('email', decoded.email);
 
        console.log('Decoded Role:', this.userRole);
        console.log('Decoded Email:', this.loggedInEmail);
      } catch (err) {
        console.error('Failed to decode JWT', err);
      }
    }
  }
 
  loadMembers(): void {
    if (this.userRole === 'admin') {
      this.memberService.getAllMembers().subscribe({
        next: (data) => {
          this.members = data;
        },
        error: (err) => {
          console.error('Error loading members', err);
        }
      });
    } else if (this.userRole === 'member') {
      const email = localStorage.getItem('email');
      if (email) {
        this.memberService.getMemberByEmail(email).subscribe({
          next: (data) => {
            this.members = [data];
          },
          error: (err) => {
            console.error('Error fetching member by email', err);
          }
        });
      }
    }
  }
 
  updateMember(memberId: number): void {
    this.router.navigate(['/updateMember', memberId]);
  }
 
  deleteMember(memberId: number): void {
    if (confirm('Are you sure you want to delete this member?')) {
      this.memberService.deleteMember(memberId).subscribe(() => {
        this.members = this.members.filter(member => member.memberId !== memberId);
      });
    }
  }
 
  searchMember(): void {
    if (!this.memberId) {
      alert('Please enter a valid Member ID');
      return;
    }
 
    this.memberService.getMemberById(this.memberId).subscribe({
      next: (data) => {
        this.member = data;
      },
      error: () => {
        alert('Member not found.');
        this.member = null;
      }
    });
  }
 
  checkfine(): void {
    this.router.navigate(['/fineCal']);
  }
 
  pay(): void {
    this.router.navigate(['/finePay']);
  }
}

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class MemberService {
  private addUrl = 'http://localhost:9090/members/regMember';
  private viewUrl = 'http://localhost:9090/members/getallMember';
  private searchUrl = 'http://localhost:9090/members/';
  private updateUrl = 'http://localhost:9090/members/update/';
  private deleteUrl = 'http://localhost:9090/members/delete/';
  private emailUrl = 'http://localhost:9090/members/email/';

  constructor(private http: HttpClient) { }

  addMember(member: any): Observable<any> {
    return this.http.post(this.addUrl, member);
  }

  getAllMembers(): Observable<any> {
    return this.http.get(this.viewUrl);
  }

  getMemberById(id: number): Observable<any> {
    return this.http.get(this.searchUrl + id);
  }

  updateMember(id: number, member: any): Observable<any> {
    return this.http.put(this.updateUrl + id, member);
  }

  deleteMember(id: number): Observable<any> {
    return this.http.delete<void>(this.deleteUrl + id);
  }

  getMemberByEmail(email: string) {
    return this.http.get(this.emailUrl + email);    
  
  }
}

