import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';

@Component({
  selector: 'app-register',
  imports: [NavbarComponent,RouterLink,FormsModule],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent {
  registerData: CombinedRegister = new CombinedRegister('', '', '', '', '', '', '');

  constructor(private http: HttpClient) {}

  onRegister(): void {
    console.log('Registering user and member:', this.registerData);

       
    this.http.post('http://localhost:9090/auth/register', {
      username: this.registerData.username,
      email: this.registerData.email,
      password: this.registerData.password,
      roles: this.registerData.roles
    }).subscribe(() => {
      this.http.post('http://localhost:9090/members/regMember', {
        name: this.registerData.name,
        email: this.registerData.email,
        phone: this.registerData.phone,
        address: this.registerData.address
      }).subscribe(
        () => alert('User and Member Registered Successfully'),
        err => alert('User registered, but Member failed')
      );
    });
    
  }
}

// models/combined-register.model.ts
export class CombinedRegister {
  constructor(
    public username: string,
    public email: string, // used for both user and member
    public password: string,
    public roles: string,
    public name: string,
    public phone: string,
    public address: string
  ) {}
}


<!-- <app-navbar></app-navbar>
<section class="vh-100" style="background-color: #eee;">
    <div class="container h-100">
      <div class="row d-flex justify-content-center align-items-center h-100">
        <div class="col-lg-12 col-xl-11">
          <div class="card text-black" style="border-radius: 25px;">
            <div class="card-body p-md-5">
              <div class="row justify-content-center">
                <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">
  
                  <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Sign up</p>
  
                  <form #RegisterForm="ngForm" class="mx-1 mx-md-4" (ngSubmit)="validateR(RegisterForm)">
  
                    <div class="d-flex flex-row align-items-center mb-4">
                      <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                      <div data-mdb-input-init class="form-outline flex-fill mb-0">
                        <input ngModel name="name" type="text" id="form3Example1c" class="form-control" />
                        <label class="form-label" for="form3Example1c">Your Name</label>
                      </div>
                    </div>
  
                    <div class="d-flex flex-row align-items-center mb-4">
                      <i class="fas fa-envelope fa-lg me-3 fa-fw"></i>
                      <div data-mdb-input-init class="form-outline flex-fill mb-0">
                        <input ngModel name="email" type="email" id="form3Example3c" class="form-control" />
                        <label class="form-label" for="form3Example3c">Your Email</label>
                      </div>
                    </div>
  
                    <div class="d-flex flex-row align-items-center mb-4">
                      <i class="fas fa-lock fa-lg me-3 fa-fw"></i>
                      <div data-mdb-input-init class="form-outline flex-fill mb-0">
                        <input ngModel name="password" type="password" id="form3Example4c" class="form-control" />
                        <label class="form-label" for="form3Example4c">Password</label>
                      </div>
                    </div>
  
                    <div class="d-flex flex-row align-items-center mb-4">
                      <i class="fas fa-circle-user fa-lg me-2 fa-fw"></i>
                      
                      <div data-mdb-input-init class="form-outline flex-fill mb-0">
                        <input ngModel name="roles" type="text" id="role" class="form-control" />
                        <label class="form-label" for="role">Role</label>
                      </div>
                    </div>
  
                    <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                      <button  type="submit" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg" >Register</button>
                    </div>
  
                  </form>
  
                </div>
                <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">
  
                  <img src="https://img.freepik.com/premium-vector/library-public-reading-room-with-bookcase-bookshelves-wooden-desks-chairs-computers_176411-1523.jpg?w=900"
                    class="img-fluid" alt="Sample image">
  
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section> -->


  <!-- register.component.html -->
<div class="container mt-4">
  <div class="card p-4 shadow">
    <h2 class="mb-3 text-center">Register as Library Member</h2>
    <form (ngSubmit)="onRegister()" #registerForm="ngForm">

      <!-- Username -->
      <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input [(ngModel)]="registerData.username" name="username" id="username" type="text" class="form-control" required>
      </div>

      <!-- Email -->
      <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input [(ngModel)]="registerData.email" name="email" id="email" type="email" class="form-control" required>
      </div>

      <!-- Password -->
      <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input [(ngModel)]="registerData.password" name="password" id="password" type="password" class="form-control" required>
      </div>

      <!-- Role -->
      <div class="mb-3">
        <label for="roles" class="form-label">Roles</label>
        <input [(ngModel)]="registerData.roles" name="roles" id="roles" type="text" class="form-control" required>
      </div>

      <hr>

      <!-- Member Name -->
      <div class="mb-3">
        <label for="name" class="form-label">Full Name</label>
        <input [(ngModel)]="registerData.name" name="name" id="name" type="text" class="form-control" required>
      </div>

      <!-- Member Phone -->
      <div class="mb-3">
        <label for="phone" class="form-label">Phone</label>
        <input [(ngModel)]="registerData.phone" name="phone" id="phone" type="text" class="form-control" required>
      </div>

      <!-- Member Address -->
      <div class="mb-3">
        <label for="address" class="form-label">Address</label>
        <textarea [(ngModel)]="registerData.address" name="address" id="address" class="form-control" required></textarea>
      </div>

      <button type="submit" class="btn btn-success w-100">Register & Add Member</button>
    </form>
  </div>
</div>

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';



@Injectable({
  providedIn: 'root'
})
export class AuthService {
  
  pathL = "http://localhost:9090/auth/authenticate"  
  pathR = "http://localhost:9090/auth/new"

  constructor(private client: HttpClient) { }

  public authenticate_User(authUser: User): Observable<string> {
    console.log("Inside autheticate")
    console.log(authUser)
    return this.client.post(this.pathL, authUser, { responseType: 'text' });
  }

 public register(register:RegisterUser): Observable<string> {
    return this.client.post(this.pathR,register,{responseType: 'text'})
  }

  getJWT():string
  {
    
    return localStorage.getItem("JWT")
  }
  removeToken()
  {
    localStorage.removeItem("JWT")
  }
}



export class User {
  username: string
  password: string
  constructor(username: string, password: string) {
    this.username = username
    this.password = password
  }
}
export class RegisterUser{
  username:string
  email:string
  password:string
  roles:string
  constructor(username: string,email:string,  password: string,roles:string)
  {
    this.username=username
    this.email=email
    this.password=password
    this.roles=roles
  }
}


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class MemberService {
  private addUrl = 'http://localhost:9090/members/regMember';
  private viewUrl = 'http://localhost:9090/members/getallMember';
  private searchUrl = 'http://localhost:9090/members/';
  private updateUrl = 'http://localhost:9090/members/update/';
  private deleteUrl = 'http://localhost:9090/members/delete/';

  constructor(private http: HttpClient) {}

  addMember(member: any): Observable<any> {
    return this.http.post(this.addUrl, member);
  }

  getAllMembers(): Observable<any> {
    return this.http.get(this.viewUrl);
  }

  getMemberById(id: number): Observable<any> {
    return this.http.get(this.searchUrl + id);
  }

  updateMember(id: number, member: any): Observable<any> {
    return this.http.put(this.updateUrl + id, member);
  }

  deleteMember(id: number): Observable<any> {
    return this.http.delete<void>(this.deleteUrl + id);
  }
 
}


