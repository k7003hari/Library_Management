<app-navbar></app-navbar>

<div class="container" style="margin-top: 100px;">
  <div class="text-center mt-3 mb-4">
    <div *ngIf="userRole === 'member'" class="alert alert-info">
      You are logged in as: <strong>{{ members[0]?.email }}</strong>
    </div>
    <div *ngIf="userRole === 'admin'" class="alert alert-primary">
      Admin Dashboard - Manage Members
    </div>
    <h2 class="text-primary">👥 Member Module</h2>
    <p class="text-muted mb-4">Manage all member-related operations from here</p>

    <!--➕ Add Member button for admin -->
    <div *ngIf="userRole === 'admin'" class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
      <div class="card shadow text-center w-100" routerLink="/addMember" style="cursor: pointer;">
        <div class="card-body d-flex flex-column justify-content-center align-items-center">
          <i class="bi bi-plus-circle-fill display-4 text-success mb-3"></i>
          <h5 class="text-success fw-semibold">Register New Member</h5>
          <p class="text-muted small">Click to add a Member</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Member Cards -->
  <div class="row">
    <ng-container *ngFor="let member of members">
      <div class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
        <div class="card shadow text-center w-100">
          <img src="https://cdn-icons-png.flaticon.com/512/2288/2288510.png" class="img-fluid p-3 mx-auto"
            style="height: 180px; object-fit: contain;" />
          <div class="card-body text-start">
            <h5 class="text-primary text-center">Member Details</h5>
            <p><strong>Name:</strong> {{ member.name }}</p>
            <p><strong>Email:</strong> {{ member.email }}</p>
            <p><strong>Phone:</strong> {{ member.phone }}</p>
            <p><strong>Address:</strong> {{ member.address }}</p>
            <p><strong>Status:</strong> {{ member.membershipStatus }}</p>

            <!-- Fine Info for Member -->
            <div *ngIf="userRole === 'member'" class="border border-info p-3 rounded mt-3">
              <h6 class="text-info text-center mb-2">💰 Fine Info</h6>

              <!-- ✅ Show Fine Details -->
              <ng-container *ngFor="let fine of fineDetails">
                <p><strong>BookId:</strong> {{ fine.bookId }}</p>
                <p><strong>Amount:</strong> {{ fine.fineAmount }}</p>
                <p><strong>Status:</strong>
                  <span class="badge" [ngClass]="{
          'bg-success': fineDetails.status === 'PAID',
          'bg-danger': fineDetails.status === 'PENDING'
        }">
                    {{ fine.status }}
                  </span>
                </p>
                <p><strong>Date:</strong> {{ fine.returnDate }}</p>

              </ng-container>
              <p style="color:red" *ngIf="totalFines>0"><strong>TOTAL DUE:</strong> {{ totalFines}}</p>


              <!-- ✅ Show Message Always -->
              <div *ngIf="message" class="alert alert-success text-center mt-2">{{ message }}</div>
              <div *ngIf="error" class="alert alert-danger text-center mt-2">{{ error }}</div>
            </div>
          </div>

          <!-- Actions -->
          <div class="card-footer d-flex flex-wrap justify-content-center gap-2 p-3">
            <!-- Admin Actions -->
            <button *ngIf="userRole === 'admin'" class="btn btn-outline-warning"
              (click)="updateMember(member.memberId)">
              ✏️ Update
            </button>
            <button *ngIf="userRole === 'admin'" class="btn btn-outline-danger" (click)="deleteMember(member.memberId)">
              🗑️ Delete
            </button>

            <!-- Member Actions -->
            <button *ngIf="userRole === 'member' && totalFines==0"  class="btn btn-outline-success" (click)="calculateFine()">
              💰 Check Fine
            </button>
            <button *ngIf="userRole === 'member' && totalFines>0 " (click)="openRazorpayUI()"
              class="btn btn-outline-primary">
              🧾 Pay Fine
            </button>
          </div>
        </div>
      </div>
    </ng-container>
  </div>

  <!-- No Members Message -->
  <div *ngIf="members.length === 0" class="alert alert-info text-center">
    No members found.
  </div>
</div>


import { Component, OnInit } from '@angular/core';
import { MemberService } from '../member.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { jwtDecode } from 'jwt-decode';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-member-up-del',
  standalone: true,
  imports: [RouterLink, FormsModule, CommonModule, NavbarComponent],
  templateUrl: './member-up-del.component.html',
  styleUrls: ['./member-up-del.component.css']
})
export class MemberUpDelComponent implements OnInit {
  members: any[] = [];
  member: any = null;
  memberId: number | null = null;
  memberEmail: string = '';
  userRole: string = '';
  loggedInEmail: string = '';
  totalFines: number = 0;

  constructor(
    private memberService: MemberService,
    private router: Router,
    private toastr: ToastrService
  ) { }

  ngOnInit(): void {
    this.extractRoleAndThenLoadMembers();
    // this.calculateFine()
  }
   
  extractRoleAndThenLoadMembers(): void {
    const token = localStorage.getItem('JWT');
    if (token) {
      try {
        const decoded: any = jwtDecode(token);
        this.userRole = decoded.role || decoded.roles || '';
        this.loggedInEmail = decoded.email;
   
        localStorage.setItem('email', this.loggedInEmail);
   
        if (this.userRole === 'admin') {
          this.loadMembers(); // Admin loads all members
        } else if (this.userRole === 'member') {
          this.fetchLoggedInMemberId(); // Fetch memberId from email
        }
      } catch (err) {
        console.error('Failed to decode JWT', err);
        this.toastr.error('Invalid JWT token');
      }
    }
  }
   
  // ✅ This method ensures you fetch correct memberId via email
  fetchLoggedInMemberId(): void {
    const email = localStorage.getItem('email');
    if (email) {
      this.memberService.getMemberByEmail(email).subscribe({
        next: (data) => {
          this.memberId = data.memberId;
          this.members = [data];
          console.log('✅ Logged-in memberId:', this.memberId);
        },
        error: () => {
          this.toastr.error('Could not fetch your profile');
        }
      });
    }
  }
   

  loadMembers(): void {
    if (this.userRole === 'admin') {
      this.memberService.getAllMembers().subscribe({
        next: (data) => this.members = data,
        error: (err) => {
          console.error('Error loading members', err);
          this.toastr.error('Failed to load members');
        }
      });
    } else if (this.userRole === 'member') {
      const email = localStorage.getItem('email');
      if (email) {
        // Get the member's details using the email from the JWT
        this.memberService.getMemberByEmail(email).subscribe({
          next: (data) => {
            this.members = [data];
            this.memberId = data.memberId; // Ensure you get the memberId here
          },
          error: () => {
            this.toastr.error('Could not fetch your profile');
          }
        });
      }
    }
  }

  updateMember(memberId: number): void {
    this.router.navigate(['/updateMember', memberId]);
  }

  deleteMember(memberId: number): void {
    if (confirm('Are you sure you want to delete this member?')) {
      this.memberService.deleteMember(memberId).subscribe({
        next: () => {
          this.members = this.members.filter(m => m.memberId !== memberId);
          this.toastr.success('Member deleted successfully');
        },
        error: () => {
          this.toastr.error('Failed to delete member');
        }
      });
    }
  }

  searchMember(): void {
    if (this.memberId) {
      this.memberService.getMemberById(this.memberId).subscribe({
        next: (data) => this.member = data,
        error: () => {
          this.toastr.warning('Member not found by ID');
          this.member = null;
        }
      });
    } else if (this.memberEmail) {
      this.memberService.getMemberByEmail(this.memberEmail).subscribe({
        next: (data) => this.member = data,
        error: () => {
          this.toastr.warning('Member not found by email');
          this.member = null;
        }
      });
    } else {
      this.toastr.info('Please enter a Member ID or Email to search');
    }
  }

  fineDetails: any = null;
  message: string = '';
  error: string = '';

  calculateFine(): void {
    this.message = '';
    this.error = '';

    // Ensure you are using the memberId that was fetched earlier from getMemberByEmail
    if (!this.memberId) {
      this.error = '⚠️ Member ID not found.';
      return;
    }

    this.memberService.calculateFine(this.memberId).subscribe({
      next: (res) => {
        this.fineDetails = res;
        this.fineDetails.map((fine: any) => {})
        console.log('✅ Fine details:', this.fineDetails);
        this.fineDetails.map((fine: any) => {
          this.totalFines += fine.fineAmount; // Assuming fineAmount is the field for fine amount
          fine.fineAmount = `₹${fine.fineAmount.toFixed(2)}`; // Format fine amount
          fine.dueDate = new Date(fine.dueDate).toLocaleDateString(); // Format due date  
          fine.fineId = fine.fineId || fine.id; // Ensure fineId is set
          fine.status = fine.status || 'PENDING'; // Default status if not set
          return fine;
      })
        if (!this.fineDetails || this.fineDetails.amount === 0) {
          this.message = '🎉 You have no pending fine.';
          return;
        }

        if (this.fineDetails.status === 'PAID') {
          this.message = '✅ Fine already paid.';
          return;
        }

        this.message = '✅ Fine calculated successfully. Opening payment...';

       
      },
      error: (err) => {
        console.error('❌ Backend error:', err);

        const errMsg = err?.error?.message || '';

        if (
          errMsg.toLowerCase().includes('no fine due') ||
          errMsg.toLowerCase().includes('fine not found') ||
          err.status === 404
        ) {
          this.message = '🎉 You have no pending fine.';
        } else {
          this.error = '❌ Error calculating fine.';
        }
      }
    });
  }

  payFine(): void {
    this.message = '';
    this.error = '';
    const fineId = this.fineDetails?.fineId;

    if (!fineId) {
      this.error = '⚠️ Please calculate fine first.';
      return;
    }

    this.memberService.payFine(this.memberId, fineId).subscribe({
      next: () => {
        this.message = '💸 Fine paid successfully.';
        this.fineDetails.status = 'PAID';

        // ✅ Optional UI refresh
        setTimeout(() => {
          this.loadMembers();
        }, 1000);
      },
      error: (err) => {
        this.error = '❌ Payment failed.';
        console.error(err);
      }
    });
  }

  goToAddMember(): void {
    this.router.navigate(['/addMember']);
  }

  openRazorpayUI(): void {
    const self = this; // capture Angular context

    const options = {
      key: 'rzp_test_mMYCMsqoLV36CI',
      amount: this.totalFines * 100, // convert ₹ to paise
      currency: 'INR',
      name: 'Library Management System',
      description: 'Fine Payment',
      handler: function (response: any) {
        alert('✅ Payment successful!\nPayment ID: ' + response.razorpay_payment_id);

        // ✅ Now correctly call Angular method
        self.payFine();
      },
      prefill: {
        name: self.members[0]?.name || 'Member',
        email: self.members[0]?.email || 'member@example.com'
      },
      theme: {
        color: '#007bff'
      }
    };

    const rzp = new (window as any).Razorpay(options);
    rzp.open();
    this.router.navigate(['/allBook']);
  }
}
