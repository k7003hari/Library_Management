book.HTMl code

<app-navbar></app-navbar> 
<div class="container mt-5 text-center">
  <h2 class="mb-4 text-primary">📚 Book Management</h2>
  <p class="text-muted mb-5">Manage all book-related operations from here</p> 
  <!-- 🔍 Search Bar -->
  <div class="mb-4 d-flex justify-content-center">
    <input
      type="text"
      class="form-control w-50 me-2"
      placeholder="Search by Title, Author, or Genre"
      [(ngModel)]="searchValue"
    />
    <button class="btn btn-primary" (click)="searchBooks()">Search</button>
  </div> 
  <!-- 🧾 Book Management Cards -->
  <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4 justify-content-center"> 
    <!-- 📖 View All Books -->
    <div class="col">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">View All Books</h5>
          <p class="card-text">Available books</p>
          <button class="btn btn-outline-primary w-100" routerLink="/allBook">Go</button>
        </div>
      </div>
    </div> 
    <!-- ➕ Add New Book (Admin only) -->
    <div class="col" *ngIf="role === 'ROLE_ADMIN'">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">Add New Book</h5>
          <p class="card-text">Add a new book to library</p>
          <button class="btn btn-outline-success w-100" routerLink="/addBook">Add</button>
        </div>
      </div>
    </div>
 
    <!-- 🛠 Update / Delete (Admin only) -->
    <div class="col" *ngIf="role === 'ROLE_ADMIN'">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">Update / Delete</h5>
          <p class="card-text">Modify or remove books</p>
          <button class="btn btn-outline-danger w-100" routerLink="/bookUpDel">Manage</button>
        </div>
      </div>
    </div> 
    <!-- 📗 Borrow Book (Member only) -->
    <div class="col" *ngIf="role === 'ROLE_MEMBER' && !hasBorrowed">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">Borrow Book</h5>
          <p class="card-text">Choose books to borrow</p>
          <button class="btn btn-outline-success w-100" routerLink="/book/borrow">Borrow</button>
        </div>
      </div>
    </div>
 
    <!-- 🔁 Return Book (Member only) -->
    <div class="col" *ngIf="role === 'ROLE_MEMBER' && hasBorrowed">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">Return Book</h5>
          <p class="card-text">Return your borrowed book</p>
          <button class="btn btn-outline-warning w-100" routerLink="/book/return">Return</button>
        </div>
      </div>
    </div>
  </div>
 
  <!-- 🔽 Search Results -->
  <div *ngIf="books.length > 0" class="mt-5">
    <h4 class="text-success mb-3">Search Results:</h4>
    <div class="row row-cols-1 row-cols-md-3 g-4">
      <div class="col" *ngFor="let book of books">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h5 class="card-title">{{ book.title }}</h5>
            <p class="card-text">
              <strong>Author:</strong> {{ book.author }}<br />
              <strong>Genre:</strong> {{ book.genre }}
            </p>
 
            <!-- Admin Actions -->
            <div *ngIf="role === 'ROLE_ADMIN'" class="d-flex justify-content-between">
              <button class="btn btn-warning w-50 me-1" [routerLink]="['/bookUpdate', book.bookId]">Update</button>
              <button class="btn btn-danger w-50 ms-1" (click)="deleteBook(book.bookId)">Delete</button>
            </div>
 
            <!-- Member Actions -->
            <div *ngIf="role === 'ROLE_MEMBER'" class="mt-2">
              <button class="btn btn-success w-100" *ngIf="!book.isBorrowed" (click)="borrowBook(book.bookId)">Borrow</button>
              <button class="btn btn-warning w-100" *ngIf="book.isBorrowed" (click)="returnBook(book.bookId)">Return</button>
            </div>
 
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

book.component.ts
import { Component, OnInit } from '@angular/core';
import { FormsModule, NgForm } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { BookService, AddBook, AllBook } from '../book.service';
import { NavbarComponent } from '../navbar/navbar.component';
 
@Component({
  selector: 'app-book',
  imports: [NavbarComponent, RouterLink,FormsModule],
  templateUrl: './book.component.html',
  styleUrls: ['./book.component.css'],
})
export class BookComponent implements OnInit {
  // For add book
  addBookModel: AddBook = new AddBook('', '', '', '', '', '');
 
  // For view/search books
  books: AllBook[] = [];
  error: any;
 
  // For search
  searchType: string = 'title';
  searchValue: string = '';
 
  constructor(private bookService: BookService, private router: Router) {}
 
  ngOnInit(): void {
    this.viewAllBooks();
  }
 
  // ========== Add Book ==========
  validateAdd(form: NgForm): void {
    if (!form.valid) return;
 
    this.bookService.add(form.value).subscribe({
      next: (response) => {
        alert('Book Added Successfully');
        console.log(response);
        form.reset();
        this.viewAllBooks();
      },
      error: (err) => {
        console.error(err);
        alert('Failed to add book');
      }
    });
  }
 
  // ========== View All ==========
  viewAllBooks(): void {
    this.bookService.view().subscribe({
      next: (response) => (this.books = response),
      error: (err) => (this.error = err.message),
    });
  }
 
  // ========== Search ==========
  searchBooks(): void {
    if (!this.searchValue.trim()) {
      this.viewAllBooks();
      return;
    }
 
    switch (this.searchType) {
      case 'title':
        this.bookService.searchByTitle(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'author':
        this.bookService.searchByAuthor(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'genre':
        this.bookService.searchByGenre(this.searchValue).subscribe(data => this.books = data);
        break;
    }
  }
 
  // ========== Delete ==========
  deleteBook(bookId: string): void {
    if (confirm('Are you sure you want to delete this book?')) {
      this.bookService.delete(bookId).subscribe(() => {
        this.books = this.books.filter((book) => book.bookId !== bookId);
        alert('Book deleted successfully');
      });
    }
  }
 
  // ========== Update Navigation ==========
  updateBook(bookId: string): void {
    console.log('Update clicked for book ID:', bookId);
    this.router.navigate(['/updatebook', bookId]);
  }
 
  // Optional: Borrow Book (if needed)
  borrowBook(bookId: string): void {
    this.bookService.borrowBook(bookId).subscribe({
      next: (response) => alert(response),
      error: (err) => alert("Borrowing failed: " + err.message)
    });
  }

  returnBook(bookId: number): void {
    console.log('Returning book with ID:', bookId);
    // Implement your return book logic here or route to return component
    this.router.navigate(['/book/return']); // or call service
  }
 
  trackById(index: number, book: AllBook): string {
    return book.bookId;
  }
}

book.service.ts
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
 
@Injectable({
  providedIn: 'root'
})
export class BookService {
private baseUrl = 'http://localhost:9090/books';
private borrowUrl = 'http://localhost:9090/borrowings/borrow';
 
  constructor(private client: HttpClient) {}
 
  // ========== Add Book ==========
  public add(addBook: AddBook): Observable<string> {
return this.client.post(`${this.baseUrl}/addbook`, addBook, { responseType: 'text' });
  }
 
  // ========== View All Books ==========
  public view(): Observable<AllBook[]> {
    return this.client.get<AllBook[]>(`${this.baseUrl}/getall`);
  }
 
  // ========== Delete Book ==========
  public delete(bookId: string): Observable<void> {
    return this.client.delete<void>(`${this.baseUrl}/delete/${bookId}`);
  }
 
  // ========== Get Book by ID ==========
  public getById(bookId: string): Observable<AllBook> {
    return this.client.get<AllBook>(`${this.baseUrl}/getById/${bookId}`);
  }
 
  // ========== Update Book ==========
  public update(bookId: string, book: AddBook): Observable<string> {
    return this.client.put(`${this.baseUrl}/update/${bookId}`, book, { responseType: 'text' });
  }
 
  // ========== Search ==========
  public searchByTitle(title: string): Observable<AllBook[]> {
    return this.client.get<AllBook[]>(`${this.baseUrl}/search/title/${title}`);
  }
 
  public searchByAuthor(author: string): Observable<AllBook[]> {
    return this.client.get<AllBook[]>(`${this.baseUrl}/search/author/${author}`);
  }
 
  public searchByGenre(genre: string): Observable<AllBook[]> {
    return this.client.get<AllBook[]>(`${this.baseUrl}/search/genre/${genre}`);
  }
 
  // ========== Borrow Book ==========
  public borrowBook(bookId: string): Observable<string> {
    const memberId = localStorage.getItem('memberId');
    const body = { bookId, memberId };
return this.client.post(this.borrowUrl, body, { responseType: 'text' });
  }
}
 
// ========== Models ==========
export class AddBook {
  constructor(
    public title: string,
    public author: string,
    public genre: string,
    public isbn: string,
    public yearPublished: string,
    public availableCopies: string
  ) {}
}
 
export class AllBook {
  constructor(
    public bookId: string,
    public title: string,
    public author: string,
    public genre: string,
    public isbn: string,
    public yearPublished: string,
    public availableCopies: string
  ) {}
}
