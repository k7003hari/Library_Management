<app-navbar></app-navbar>

<div class="container py-5 h-100">
  <div class="row d-flex justify-content-center align-items-center h-100">
    <div class="col col-xl-10">
      <div class="card rounded-4 shadow">
        <div class="row g-0">
          <div class="col-md-6 col-lg-5 d-none d-md-block">
            <img src="https://www.skoolbeep.com/blog/wp-content/uploads/2020/12/HOW-DO-YOU-DESIGN-A-LIBRARY-MANAGEMENT-SYSTEM-min.png"
              alt="login form" class="img-fluid rounded-start h-100 w-100" style="object-fit: cover;" />
          </div>
          <div class="col-md-6 col-lg-7 d-flex align-items-center">
            <div class="card-body p-4 p-lg-5 text-black">
              <form #Loginform="ngForm" (ngSubmit)="validate(Loginform)" novalidate>

                <h5 class="fw-bold mb-4 text-uppercase text-center">Member Login</h5>

                <div class="form-outline mb-4">
                  <label class="form-label" for="username">Username</label>
                  <input type="text" id="username" name="username" class="form-control form-control-lg"
                    placeholder="Enter username" ngModel required minlength="3" #username="ngModel" />
                  <div *ngIf="username.invalid && username.touched" class="text-danger mt-1">
                    <small *ngIf="username.errors?.['required']">Username is required.</small>
                    <small *ngIf="username.errors?.['minlength']">Minimum 3 characters required.</small>
                  </div>
                </div>

                <div class="form-outline mb-4">
                  <label class="form-label" for="password">Password</label>
                  <input type="password" id="password" name="password" class="form-control form-control-lg"
                    placeholder="Enter password" ngModel required minlength="4" #password="ngModel" />
                  <div *ngIf="password.invalid && password.touched" class="text-danger mt-1">
                    <small *ngIf="password.errors?.['required']">Password is required.</small>
                    <small *ngIf="password.errors?.['minlength']">Minimum 4 characters required.</small>
                  </div>
                </div>

                <div class="d-flex justify-content-between align-items-center mb-4">
                  <p class="mb-0">Don't have an account?
                    <a routerLink="/register" class="text-primary fw-semibold">Register</a>
                  </p>
                </div>

                <div class="text-center">
                  <button type="submit" class="btn btn-primary btn-lg w-100"
                    [disabled]="Loginform.invalid">Login</button>
                </div>
              </form>

              <!-- âœ… Toast Notification -->
              <div *ngIf="toastMessage" class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">
                <div class="toast show align-items-center text-white bg-success border-0" role="alert">
                  <div class="d-flex">
                    <div class="toast-body">
                      {{ toastMessage }}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" (click)="toastMessage = ''"
                      aria-label="Close"></button>
                  </div>
                </div>
              </div>

            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { NgForm } from '@angular/forms';
import { AuthService } from '../auth.service';
import jwtDecode from 'jwt-decode';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  toastMessage: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  validate(form: NgForm) {
    if (form.invalid) return;

    this.authService.authenticate_User(form.value).subscribe({
      next: (response: string) => {
        console.log("Login Success:", response);
        localStorage.setItem("JWT", response);

        const decodedToken: any = jwtDecode(response);
        const email = decodedToken.email;
        localStorage.setItem("email", email);
        localStorage.setItem("sub", form.value.username);

        this.toastMessage = "Login Successful! Redirecting...";
        setTimeout(() => {
          this.toastMessage = '';
          this.router.navigate(['/home']);
        }, 2000);
      },
      error: err => {
        console.error("Login Failed", err);
        this.toastMessage = "Login failed! Invalid credentials.";
        setTimeout(() => this.toastMessage = '', 3000);
      }
    });
  }
}



.toast-container {
  z-index: 1055;
}

.toast-body {
  font-weight: 500;
}
