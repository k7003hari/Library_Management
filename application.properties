import { Component } from '@angular/core';
import { NavbarComponent } from '../navbar/navbar.component';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-book',
  imports: [NavbarComponent, RouterLink],
  templateUrl: './book.component.html',
  styleUrl: './book.component.css'
})
export class BookComponent {}
above code is my book.component.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class BookService {
private pathAdd = 'http://localhost:9090/books/addbook';
private pathView = 'http://localhost:9090/books/getall';
private pathUpdate = 'http://localhost:9090/books/update/';
private pathDelete = 'http://localhost:9090/books/delete/';
private pathId = 'http://localhost:9090/books/getById/';
private pathTitle = 'http://localhost:9090/books/search/title/';
private pathAuthor = 'http://localhost:9090/books/search/author/';
private pathGenre = 'http://localhost:9090/books/search/genre/';
   constructor(private client: HttpClient) {}
   public add(addBook: AddBook): Observable<string> {
    return this.client.post(this.pathAdd, addBook, { responseType: 'text' });
      }
          public view(): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathView);
      }     
      public delete(bookId: string): Observable<void> {
        return this.client.delete<void>(this.pathDelete + bookId);
      }     
      public getById(bookId: string): Observable<AllBook> {
        return this.client.get<AllBook>(this.pathId + bookId);
      }     
      public update(bookId: string, book: AddBook): Observable<string> {
        return this.client.put(this.pathUpdate + bookId, book, { responseType: 'text' });
      }     
      public searchByTitle(title: string): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathTitle + title);
      }     
      public searchByAuthor(author: string): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathAuthor + author);
      }     
      public searchByGenre(genre: string): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathGenre + genre);
      }     
      // Optional: member-only borrowing
      public borrowBook(bookId: string): Observable<string> {
        const memberId = localStorage.getItem("memberId");
        const body = { bookId, memberId };
    return this.client.post('http://localhost:9090/borrowings/borrow', body, { responseType: 'text' });
      }
    } 
export class AddBook {
  constructor(
    public title: string,public author: string, public genre: string, public isbn: string, public yearPublished: string, public availableCopies: string ) {}
} export class AllBook {
  constructor( public bookId: string, public title: string, public author: string, public genre: string, public isbn: string, public yearPublished: string, public availableCopies: string) {}
}

this above code is my book.service.ts

export class AddBookComponent {
  constructor(private router:Router, private bookService:BookService){}
  validateAdd(form:NgForm){
    this.bookService.add(form.value).subscribe(response=>console.log(response))
    alert("Book Added Successfully")
    this.router.navigate(["/book"])

  }

}

this above code is add-book.component.ts

export class AllBookComponent {
  books: AllBook[] = [];
  error: any; 
  constructor(private bookService: BookService) {
    this.view();
  }  
  view() {
    this.bookService.view().subscribe({
      next: (response: AllBook[]) => this.books = response,
      error: err => this.error = err.message
    });
  }
}
 
this above code is all-book.component.ts
export class BookSearchComponent {
  books: AllBook[] = [];
  searchType: string = 'title';
  searchValue: string = '';
  constructor(private bookService: BookService) {}
  searchBooks(): void {
    if (!this.searchValue.trim()) return;
    switch (this.searchType) {
      case 'title':
        this.bookService.searchByTitle(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'author':
        this.bookService.searchByAuthor(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'genre':
        this.bookService.searchByGenre(this.searchValue).subscribe(data => this.books = data);
        break;
    }
  }
}
this above code is book-search.component.ts

export class BookUpDelComponent {
  books: AllBook[] = []; 
  constructor(
    private bookService: BookService,
    private router: Router,
    private route: ActivatedRoute
  ) {}
   ngOnInit(): void {    this.getAllBooks();  } 
  getAllBooks(): void {
    this.bookService.view().subscribe((data) => {
      this.books = data;
    });
  } 
  deleteBook(bookId: string): void {
    if (confirm('Are you sure you want to delete this book?')) {
      this.bookService.delete(bookId).subscribe(() => {
        this.books = this.books.filter(book => book.bookId !== bookId);
      });
    }  }
   updateBook(bookId: string): void {
    console.log("clicked")
    this.router.navigate(['/updatebook', bookId]);
  }
  trackById(index: number, book: AllBook) {
    return book.bookId;
  }
}
this above code is book-up-del.component.ts

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router, RouterLink } from '@angular/router';
import { BookService, AddBook, AllBook } from '../book.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NavbarComponent } from '../navbar/navbar.component';
 
@Component({
  selector: 'app-book-update',
  standalone: true,
  imports: [FormsModule, CommonModule, NavbarComponent,RouterLink],
  templateUrl: './book-update.component.html',
  styleUrls: ['./book-update.component.css']
})
export class BookUpdateComponent implements OnInit {
  bookId!: string;
  book: AddBook = new AddBook('', '', '', '', '', '');
 
  constructor( private route: ActivatedRoute, private bookService: BookService,private router: Router ) {} 
  ngOnInit(): void {
    this.bookId = this.route.snapshot.paramMap.get('id')!;
    this.bookService.getById(this.bookId).subscribe((data: AllBook) => {
      this.book = new AddBook( data.title, data.author, data.genre, data.isbn,  data.yearPublished,  data.availableCopies ); });
  } 
  updateBook(): void {
    this.bookService.update(this.bookId, this.book).subscribe(() => {
      alert('Book updated successfully!');
      this.router.navigate(['/bookUpDel']);
    });
  }
}
this above code is book-update.component.ts
