package com.cts.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.cts.model.Book;
import com.cts.service.BookService;

import lombok.AllArgsConstructor;

@RestController
//@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/books")
@AllArgsConstructor
public class BookController {

	private final BookService bookService;

	@PostMapping("/addbook")
	@ResponseStatus(HttpStatus.CREATED)
	public Book addBook(@RequestBody Book book) {
		return bookService.addBook(book);
	}

	@PutMapping("/update/{id}")
	public Book updateBook(@PathVariable Long id, @RequestBody Book book) {
		return bookService.updateBook(id, book);
	}

	@DeleteMapping("/delete/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deleteBook(@PathVariable Long id) {
		bookService.deleteBook(id);
	}

	@GetMapping("/getall")
	public List<Book> getAllBooks() {
		return bookService.getAllBooks();
	}

	@GetMapping("/getById/{id}")
	public Book getBookById(@PathVariable Long id) {
		return bookService.getBookById(id);
	}

	@GetMapping("/search/title/{title}")
	public List<Book> searchByTitle(@PathVariable("title") String title) {
		return bookService.searchByTitle(title);
	}

	@GetMapping("/search/author/{author}")
	public List<Book> searchByAuthor(@PathVariable("author") String author) {
		return bookService.searchByAuthor(author);
	}

	@GetMapping("/search/genre/{genre}")
	public List<Book> searchByGenre(@PathVariable("genre") String genre) {
		return bookService.searchByGenre(genre);
	}

	@GetMapping("/member/{id}/{Email}")
	public Book getBookForMember(@PathVariable Long id, @PathVariable("Email") String memberEmail) {
		return bookService.getBookForMember(id, memberEmail);
	}

	@PutMapping("/{id}/copies")
	public void updateBookCopies(@PathVariable Long id, @RequestParam("availableCopies") int availableCopies) {
	    bookService.updateBookCopies(id, availableCopies);
	}
}

package com.cts.controller;
 
import java.util.List;
 
import org.springframework.web.bind.annotation.*;
 
import com.cts.dto.BorrowingTransactionDTO;
import com.cts.model.BorrowingTransaction;
import com.cts.service.BorrowingService;
 
import lombok.AllArgsConstructor;
 
@RestController
@AllArgsConstructor
@RequestMapping("/borrowings")
public class BorrowingController {
 
	private final BorrowingService borrowingService;
 
	@PostMapping("/borrow")
	public BorrowingTransaction borrowBook(@RequestBody BorrowingTransactionDTO transactionDTO) {
	    return borrowingService.borrowBook(transactionDTO);
	}
 
	@PostMapping("/return")
	public BorrowingTransaction returnBook(@RequestBody BorrowingTransactionDTO transactionDTO) {
	    return borrowingService.returnBook(transactionDTO.getMemberId(), transactionDTO.getBookId());
	}
 
	@GetMapping("/{memberId}")
	public List<BorrowingTransaction> getBorrowedBooks(@PathVariable Long memberId) {
	    return borrowingService.getMemberBorrowedBooks(memberId);
	}
	
	@GetMapping("/getall")
	public List<BorrowingTransaction> getAllBorrows() {
	    return borrowingService.getAllBorrows();
	}
}
 package com.cts.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.cts.dto.BookDTO;

import lombok.Data;
import lombok.Getter;

@FeignClient(name = "BOOKSERVICE")
public interface BookClient {
 
	@GetMapping("/getById/{id}")
	public BookDTO getBookById(@PathVariable Long id) ;
	
    @PutMapping("/books/{id}/copies")
    void updateBookCopies(@PathVariable("id") Long bookId, @RequestParam("availableCopies") int availableCopies);
}

package com.cts.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import com.cts.dto.MemberDTO;

@FeignClient(name = "MEMBERSERVICE", path="/members")
public interface MemberClient {
    @GetMapping("/{id}")
    Object getMember(@PathVariable Long id);
}

package com.cts.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@FeignClient(name = "NOTIFICATIONSERVICE", path = "/email")
public interface MailClient {
	@PostMapping("/send")
	public String sendEmail(@RequestParam String recipient, @RequestParam String subject,
			@RequestParam String message) ;
 
}

package com.cts.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cts.service.NotificationService;

@RestController
@RequestMapping("/email")
public class NotificationController {
	@Autowired
	private NotificationService notificationService;
 
	@PostMapping("/send")
	public String sendEmail(@RequestParam String recipient, @RequestParam String subject,
			@RequestParam String message) {
		return notificationService.sendEmail(recipient, subject, message);
	}
}

package com.cts.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.model.Member;
import com.cts.service.MemberService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/members")
@RequiredArgsConstructor
@Slf4j
@Validated
public class MemberController {

    @Autowired
    private MemberService memberService;

    @PostMapping("/regMember")
    public Member registerMember(@RequestBody Member member) {
        log.info("POST /members");
        return memberService.registerMember(member);
    }

    @PutMapping("update/{id}")
    public Member updateMember(@PathVariable Long id, @Valid @RequestBody Member member) {
        log.info("PUT /members/{}", id);
        return memberService.updateMember(id, member);
    }

    @GetMapping("/email/{email}")
    public Member getMemberByEmail( @PathVariable("email") String email) {
        log.info("GET /members/{}", email);
        return memberService.getMemberByEmail(email);
    }
    
    @GetMapping("/getallMember")
	public List<Member> getAllMember() {
		return memberService.getAllMember();
	}


    @GetMapping("/{memberId}")
    public Member getMemberById(@PathVariable Long memberId) {
        log.info("GET /members/{}", memberId);
        return memberService.getMemberById(memberId);
    }
}

package com.cts.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.cts.model.BorrowingTransaction;

public interface BorrowingRepository extends JpaRepository<BorrowingTransaction, Long> {
	List<BorrowingTransaction> findByMemberIdAndStatus(Long memberId, BorrowingTransaction.Status status);

	Optional<BorrowingTransaction> findByBookIdAndMemberIdAndStatus(Long bookId, Long memberId,
			BorrowingTransaction.Status status);
}

package com.cts.service;

import java.util.List;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.model.BorrowingTransaction;

public interface BorrowingService {

	BorrowingTransaction borrowBook(BorrowingTransactionDTO transactionDTO);

	BorrowingTransaction returnBook(Long memberId, Long bookId);

	List<BorrowingTransaction> getMemberBorrowedBooks(Long memberId);

	List<BorrowingTransaction> getAllBorrows();
}

package com.cts.service;

import java.time.LocalDate;
import java.util.List;

import org.springframework.stereotype.Service;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.BookDTO;
import com.cts.exception.BorrowingNotAllowedException;
import com.cts.exception.BorrowingTransactionNotFoundException;
import com.cts.feign.BookClient;
import com.cts.feign.MailClient;
import com.cts.feign.MemberClient;
import com.cts.model.BorrowingTransaction;
import com.cts.repository.BorrowingRepository;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@AllArgsConstructor
public class BorrowingServiceImpl implements BorrowingService {

	private final BorrowingRepository repository;
	private final BookClient bookClient;
	private final MemberClient memberClient;
	private final MailClient mailClient;

	@Override
	public BorrowingTransaction borrowBook(BorrowingTransactionDTO transactionDTO) {
		log.info("Attempting to borrow book with ID: {} for member ID: {}", transactionDTO.getBookId(),
				transactionDTO.getMemberId());

// Validate existence
		memberClient.getMember(transactionDTO.getMemberId());
		BookDTO book = bookClient.getBookById(transactionDTO.getBookId());

// Borrowing rules
		long activeCount = repository
				.findByMemberIdAndStatus(transactionDTO.getMemberId(), BorrowingTransaction.Status.BORROWED).size();
		if (activeCount >= 5) {
			throw new BorrowingNotAllowedException("Borrowing limit exceeded");
		}

		boolean alreadyBorrowed = repository.findByBookIdAndMemberIdAndStatus(transactionDTO.getBookId(),
				transactionDTO.getMemberId(), BorrowingTransaction.Status.BORROWED).isPresent();

		if (alreadyBorrowed) {
			throw new BorrowingNotAllowedException("Book already borrowed by this member");
		}

// Save transaction
		BorrowingTransaction tx = BorrowingTransaction.builder().bookId(transactionDTO.getBookId())
				.memberId(transactionDTO.getMemberId()).borrowDate(LocalDate.now())
				.dueDate(LocalDate.now().plusDays(14)).status(BorrowingTransaction.Status.BORROWED).fineAmount(0)
				.bookTitle(book.getTitle()).build();

		repository.save(tx);

		bookClient.updateBookCopies(transactionDTO.getBookId(), book.getAvailableCopies() - 1);

		String msg = "Book borrowed: " + book.getTitle() + ". Return by: " + tx.getDueDate();
		mailClient.sendEmail("ms12032004tsi@gmail.com", "Library Borrowing Info", msg);

		log.info("Book borrowed successfully: {}", tx);
		return tx;
	}

	@Override
	public BorrowingTransaction returnBook(Long memberId, Long bookId) {
		log.info("Returning book with ID: {} for member ID: {}", bookId, memberId);

		BorrowingTransaction tx = repository
				.findByBookIdAndMemberIdAndStatus(bookId, memberId, BorrowingTransaction.Status.BORROWED)
				.orElseThrow(() -> new BorrowingTransactionNotFoundException("No active borrowing found"));

		LocalDate today = LocalDate.now();
		LocalDate due = tx.getDueDate();

		double fine = today.isAfter(due) ? 7.0 * java.time.temporal.ChronoUnit.DAYS.between(due, today) : 0;
		tx.setReturnDate(today);
		tx.setFineAmount(fine);
		tx.setStatus(BorrowingTransaction.Status.RETURNED);

		repository.save(tx);

		BookDTO book = bookClient.getBookById(bookId);
		bookClient.updateBookCopies(bookId, book.getAvailableCopies() + 1);

		String msg = "Book returned: " + book.getTitle() + ". Fine applied: ₹" + fine;
		mailClient.sendEmail("ms12032004tsi@gmail.com", "Library Return Info", msg);

		log.info("Return complete. Fine: ₹{}", fine);
		return tx;
	}

	@Override
	public List<BorrowingTransaction> getMemberBorrowedBooks(Long memberId) {
		return repository.findByMemberIdAndStatus(memberId, BorrowingTransaction.Status.BORROWED);
	}

	@Override
	public List<BorrowingTransaction> getAllBorrows() {
		return repository.findAll();
	}
}

i have give the controller file of member,book and mail to check the feign classes 
because my borrow and return is not working properly

these are the dtos
package com.cts.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class BookDTO {
    private Long bookId;
    private String title;
    private String author;
    private String genre;
    private String isbn;
    private int yearPublished;
    private int availableCopies;
}
package com.cts.dto;
 
import lombok.*;
 
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class BorrowingTransactionDTO {
    private Long bookId;
    private Long memberId;
}

package com.cts.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class MemberDTO {
    private Long memberId;
    private String name;
    private String email;
    private String phone;
    private String address;
    private String membershipStatus;
}
