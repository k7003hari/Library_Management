 getJWT():string
  {
    return localStorage.getItem("JWT")
  }
  removeToken()
  {
    localStorage.removeItem("JWT")
  }
 
  getUserRole(): string {
    const token = this.getJWT();
    if (!token) return '';
    const payload = JSON.parse(atob(token.split('.')[1]));
    return payload.roles || '';
  }
   
  getUserId(): number {
    const id = localStorage.getItem('memberId');
    return id ? +id : 0;
  }
  

export class BorrowService {
 
private pathBorrow = 'http://localhost:9090/borrowings/borrow'; // ("memberId": 3, "bookId": 2, "returnDate":"2025-06-03")
private pathReturn = 'http://localhost:9090/borrowings/return'; // ("memberId": 1, "bookId": 2)
private pathAllBorrows = 'http://localhost:9090/borrowings/'; // http://localhost:9090/borrowings/1 pass the member. Id
 
  constructor(private clients: HttpClient) {}
 
  borrowBook(memberId: number, bookId: number, returnDate: string): Observable<any> {
    const payload = { memberId, bookId, returnDate };
return this.clients.post(this.pathBorrow, payload);
  }

  returnBook(memberId: number, bookId: number): Observable<any> {
    const payload = { memberId, bookId };
  return this.clients.post(this.pathReturn, payload);
  }
  
  viewBorrowsByMember(memberId: number): Observable<any> {
    return this.clients.get(this.pathAllBorrows + memberId);
  }

}

export class BorrowBookComponent {
  memberId!: number;
  bookId!: number;
  returnDate!: string;
  message: string = '';
  today: string = new Date().toISOString().split('T')[0]; 
 
  constructor(private borrowService: BorrowService, private router:Router) {}
 
  borrow() {
    if (!this.memberId || !this.bookId || !this.returnDate) {
      alert('Please fill all fields.');
      return;
    }
 
    this.borrowService.borrowBook(this.memberId, this.bookId, this.returnDate)
      .subscribe({
        next: (response) => {
          this.message = 'Book borrowed successfully!';
          console.log(response);
          alert(this.message);
          this.clearForm();
        },
        error: (err) => {
          this.message = 'Failed to borrow book. Please try again.';
          console.error(err);
          alert(this.message);
        }
      });
  }
 
  clearForm() {
    this.memberId = 0;
    this.bookId = 0;
    this.returnDate = '';
    this.router.navigate(['/borrow'])
  }
}

export class ReturnBookComponent {
  memberId!: number;
  bookId!: number;
  message: string = '';
 
  constructor(private borrowService: BorrowService) {}
 
  returnBook() {
    if (!this.memberId || !this.bookId) {
      alert('Please fill all fields.');
      return;
    }
 
    this.borrowService.returnBook(this.memberId, this.bookId)
      .subscribe({
        next: (res) => {
          this.message = 'Book returned successfully!';
          console.log(res);
          alert(this.message);
          this.clearForm();
        },
        error: (err) => {
          this.message = 'Failed to return book.';
          console.error(err);
          alert(this.message);
        }
      });
  }
 
  clearForm() {
    this.memberId = 0;
    this.bookId = 0;
  }
}
