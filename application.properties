import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router, RouterLink } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NavbarComponent } from '../navbar/navbar.component';
import { BookService, AddBook } from '../book.service';
 
@Component({
  selector: 'app-book-update',
  standalone: true,
  imports: [FormsModule, CommonModule, NavbarComponent,RouterLink],
  templateUrl: './book-update.component.html',
  styleUrls: ['./book-update.component.css']
})
export class BookUpdateComponent implements OnInit {
  bookId!: string;
  book: AddBook = new AddBook('', '', '', '', '', '');
 
  constructor( 
    private route: ActivatedRoute,
    private bookService: BookService,
    private router: Router
  ) {}
 
  ngOnInit(): void {
    this.bookId = this.route.snapshot.paramMap.get('id')!;
    this.bookService.getBookById(this.bookId).subscribe((data: AllBook) => {
      this.book = new AddBook(
        data.title,
        data.author,
        data.genre,
        data.isbn,
        data.yearPublished,
        data.availableCopies
      );
    });
  }
 
  updateBook(): void {
    this.bookService.updateBook(this.bookId, this.book).subscribe(() => {
      alert('Book updated successfully!');
      this.router.navigate(['/allBook']);
    });
  }
}

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, switchMap, throwError } from 'rxjs';

export interface AllBook {
  bookId: string;
  title: string;
  author: string;
  genre: string;
  isbn: string;
  yearPublished: number;
  availableCopies: number;
}
export class AddBook {
  constructor(
    public title: string,
    public author: string,
    public genre: string,
    public isbn: string,
    public yearPublished: string,
    public availableCopies: string
  ) {}
}

@Injectable({
  providedIn: 'root'
})
export class BookService {
  private bookUrl = 'http://localhost:9090/books';
  private memberUrl = 'http://localhost:9090/members';
  private borrowingUrl = 'http://localhost:9090/borrowings';

  constructor(private http: HttpClient) {}

  private getAuthHeaders(): HttpHeaders {
    const token = localStorage.getItem('JWT');
    return new HttpHeaders({
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`
    });
  }

  // üì• Get Member ID from email
  private getMemberIdFromEmail(): Observable<string> {
    const email = localStorage.getItem('email');
    if (!email) return throwError(() => new Error('Email not found in localStorage'));

    return this.http.get<any>(`${this.memberUrl}/email/${email}`, {
      headers: this.getAuthHeaders()
    }).pipe(
      switchMap((member) => {
        if (!member || !member.memberId) {
          return throwError(() => new Error('Member ID not found for email'));
        }
        return new Observable<string>((observer) => {
          observer.next(member.memberId);
          observer.complete();
        });
      })
    );
  }

  // üìö View All Books
  view(): Observable<AllBook[]> {
    return this.http.get<AllBook[]>(`${this.bookUrl}/getAllBook`, {
      headers: this.getAuthHeaders()
    });
  }

  // üîç Search
  searchByTitle(title: string): Observable<AllBook[]> {
    return this.http.get<AllBook[]>(`${this.bookUrl}/search/title/${title}`, {
      headers: this.getAuthHeaders()
    });
  }

  searchByAuthor(author: string): Observable<AllBook[]> {
    return this.http.get<AllBook[]>(`${this.bookUrl}/search/author/${author}`, {
      headers: this.getAuthHeaders()
    });
  }

  searchByGenre(genre: string): Observable<AllBook[]> {
    return this.http.get<AllBook[]>(`${this.bookUrl}/search/genre/${genre}`, {
      headers: this.getAuthHeaders()
    });
  }

  // ‚ûï Add
  add(book: AllBook): Observable<AllBook> {
    return this.http.post<AllBook>(`${this.bookUrl}/addBook`, book, {
      headers: this.getAuthHeaders()
    });
  }

  // üîÑ Update
  updateBook(bookId: string, book: AllBook): Observable<AllBook> {
    return this.http.put<AllBook>(`${this.bookUrl}/updateBook/${bookId}`, book, {
      headers: this.getAuthHeaders()
    });
  }

  // ‚ùå Delete
  delete(bookId: string): Observable<void> {
    return this.http.delete<void>(`${this.bookUrl}/deleteBook/${bookId}`, {
      headers: this.getAuthHeaders()
    });
  }

  // üìñ Get Book by ID
  getBookById(bookId: string): Observable<AllBook> {
    return this.http.get<AllBook>(`${this.bookUrl}/getBook/${bookId}`, {
      headers: this.getAuthHeaders()
    });
  }

  // ‚úÖ Borrow Book (calls /borrowing/borrow)
  borrowBook(bookId: string): Observable<any> {
    return this.getMemberIdFromEmail().pipe(
      switchMap((memberId) => {
        const request = {
          memberId: memberId,
          bookId: bookId
        };
        return this.http.post<any>(
          `${this.borrowingUrl}/borrow`,
          request,
          { headers: this.getAuthHeaders() }
        );
      })
    );
  }

  // üîÅ Return Book (calls /borrowing/return)
  returnBook(bookId: string): Observable<any> {
    return this.getMemberIdFromEmail().pipe(
      switchMap((memberId) => {
        const request = {
          memberId: memberId,
          bookId: bookId
        };
        return this.http.post<any>(
          `${this.borrowingUrl}/return`,
          request,
          { headers: this.getAuthHeaders() }
        );
      })
    );
  }
}

<app-navbar></app-navbar>
<div class="container " style="max-width: 500px; margin-top: 150px;">
  <div class="card shadow-sm">
    <div class="card-header bg-primary text-white text-center">
      <h3 class="mb-0">Update Book Details</h3>
    </div>
    <div class="card-body">
      <form (ngSubmit)="updateBook()" #updateForm="ngForm" novalidate>

        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="title" name="title" placeholder="Title" [(ngModel)]="book.title"
            required #title="ngModel" />
          <label for="title">Title</label>
          <div *ngIf="title.invalid && (title.dirty || title.touched)" class="text-danger small">
            Title is required.
          </div>
        </div>

        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="author" name="author" placeholder="Author"
            [(ngModel)]="book.author" required #author="ngModel" />
          <label for="author">Author</label>
          <div *ngIf="author.invalid && (author.dirty || author.touched)" class="text-danger small">
            Author is required.
          </div>
        </div>

        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="genre" name="genre" placeholder="Genre" [(ngModel)]="book.genre"
            required #genre="ngModel" />
          <label for="genre">Genre</label>
          <div *ngIf="genre.invalid && (genre.dirty || genre.touched)" class="text-danger small">
            Genre is required.
          </div>
        </div>

        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="isbn" name="isbn" placeholder="ISBN" [(ngModel)]="book.isbn"
            required #isbn="ngModel" />
          <label for="isbn">ISBN</label>
          <div *ngIf="isbn.invalid && (isbn.dirty || isbn.touched)" class="text-danger small">
            ISBN is required.
          </div>
        </div>

        <div class="form-floating mb-3">
          <input type="number" min="0" class="form-control" id="yearPublished" name="yearPublished"
            placeholder="Year Published" [(ngModel)]="book.yearPublished" required #yearPublished="ngModel" />
          <label for="yearPublished">Year Published</label>
          <div *ngIf="yearPublished.invalid && (yearPublished.dirty || yearPublished.touched)"
            class="text-danger small">
            Year Published is required and must be valid.
          </div>
        </div>

        <div class="form-floating mb-4">
          <input type="number" min="0" class="form-control" id="availableCopies" name="availableCopies"
            placeholder="Available Copies" [(ngModel)]="book.availableCopies" required #availableCopies="ngModel" />
          <label for="availableCopies">Available Copies</label>
          <div *ngIf="availableCopies.invalid && (availableCopies.dirty || availableCopies.touched)"
            class="text-danger small">
            Available Copies is required and must be valid.
          </div>
        </div>

        <button class="btn btn-success  w-80 fw-bold" type="submit" [disabled]="updateForm.invalid">
          Update Book
        </button>
      </form>
    </div>
  </div>
</div>
