package com.cts.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.model.Member;
import com.cts.service.MemberService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/members")
@RequiredArgsConstructor
@Slf4j
@Validated
public class MemberController {

    @Autowired
    private MemberService memberService;

    @PostMapping("/regMember")
    public Member registerMember(@RequestBody Member member) {
        log.info("POST /members");
        return memberService.registerMember(member);
    }

    @PutMapping("update/{id}")
    public Member updateMember(@PathVariable Long id, @Valid @RequestBody Member member) {
        log.info("PUT /members/{}", id);
        return memberService.updateMember(id, member);
    }

    @GetMapping("/email/{Email}")
    public Member getMemberByEmail( @PathVariable("email") String email) {
        log.info("GET /members/{}", email);
        return memberService.getMemberByEmail(email);
    }
    
    @GetMapping("/getallMember")
	public List<Member> getAllMember() {
		return memberService.getAllMember();
	}


    @GetMapping("/{memberId}")
    public Member getMemberById(@PathVariable Long memberId) {
        log.info("GET /members/{}", memberId);
        return memberService.getMemberById(memberId);
    }
}

package com.cts.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.cts.model.Member;

public interface MemberRepository extends JpaRepository<Member, Long> {
	Optional<Member> findByEmail(String email);
}

package com.cts.service;

import java.util.List;

import com.cts.model.Member;

public interface MemberService {

	Member registerMember(Member member);

	Member updateMember(Long memberId, Member member);

	Member getMemberByEmail( String requesterEmail);
	
	Member getMemberById(Long memberId);

	List<Member> getAllMember();	     
}

package com.cts.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.cts.exception.MemberNotFoundException;
import com.cts.model.Member;
import com.cts.repository.MemberRepository;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@AllArgsConstructor
public class MemberServiceImpl implements MemberService {

	private final MemberRepository memberRepository;

	@Override
	public Member registerMember(Member member) {
		log.info("Registering new member: {}", member.getEmail());
		Member saved = memberRepository.save(member);
		log.info("Member registered successfully with ID: {}", saved.getMemberId());
		return saved;
	}

	@Override
	public Member updateMember(Long memberId, Member member) {
		log.info("Updating member: {}", memberId);
		Member existingMember = memberRepository.findById(memberId).orElseThrow(() -> {
			log.error("Update failed: Member not found with ID: {}", memberId);
			return new MemberNotFoundException("Member not found with ID: " + memberId);
		});
		existingMember.setName(member.getName());
		existingMember.setEmail(member.getEmail());
		existingMember.setPhone(member.getPhone());
		existingMember.setAddress(member.getAddress());
		existingMember.setMembershipStatus(member.getMembershipStatus());
		memberRepository.save(existingMember);
		log.info("Member updated successfully with ID: {}", memberId);
		return existingMember;
	}
	
	@Override
	public List<Member> getAllMember() {
	    log.debug("Fetching all Member");
	    return memberRepository.findAll();
	}

	@Override
	public Member getMemberByEmail(String requesterEmail) {
	    log.info("Fetching member for requester {}", requesterEmail);
	    Member member = memberRepository.findByEmail(requesterEmail).orElseThrow(() -> {
	        log.error("Member not found with email: {}", requesterEmail);
	        return new MemberNotFoundException("Member not found with email: " + requesterEmail);
	    });
	    return member;
	}


	@Override
	public Member getMemberById(Long memberId) {
		log.info("Fetching member by ID {}", memberId);
		return memberRepository.findById(memberId).orElseThrow(() -> {
			log.error("Member not found with ID: {}", memberId);
			return new MemberNotFoundException("Member not found with ID: " + memberId);
		});
	}
}
