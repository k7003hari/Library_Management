book.html
<app-navbar></app-navbar>
<div class="container mt-8 text-center">
    <h2 class="mb-4 text-primary">
      ðŸ“š Book Management
    </h2>
    <p class="text-muted mb-5">Manage all book-related operations from here</p>
   
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4 justify-content-center">
   
      <div class="col">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h5 class="card-title">View All Books</h5>
            <p class="card-text">Available books</p>
            <button class="btn btn-outline-primary w-100" routerLink="/allBook">Go</button>
          </div>
        </div>
      </div>
   
      <div class="col">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Add New Book</h5>
            <p class="card-text">Add a new book</p>
            <button class="btn btn-outline-success w-100" routerLink="/addBook">Add</button>
          </div>
        </div>
      </div>
   
      <div class="col">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Search Books</h5>
            <p class="card-text">Search for a book by title or author</p>
            <button class="btn btn-outline-info w-100"  routerLink="/bookSearch">Search</button>
          </div>
        </div>
      </div>
   
      <div class="col">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Update / Delete</h5>
            <p class="card-text">Edit or remove books </p>
            <button class="btn btn-outline-danger w-100" routerLink="/bookUpDel">Manage</button>
          </div>
        </div>
      </div>
   
    </div>
  </div>

book.component.ts
import { Component } from '@angular/core';
import { NavbarComponent } from '../navbar/navbar.component';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-book',
  imports: [NavbarComponent, RouterLink],
  templateUrl: './book.component.html',
  styleUrl: './book.component.css'
})
export class BookComponent {}


book.service.ts
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
 
@Injectable({
  providedIn: 'root'
})
export class BookService {
private pathAdd = 'http://localhost:9090/books/addbook';
private pathView = 'http://localhost:9090/books/getall';
private pathUpdate = 'http://localhost:9090/books/update/';
private pathDelete = 'http://localhost:9090/books/delete/';
private pathId = 'http://localhost:9090/books/getById/';
private pathTitle = 'http://localhost:9090/books/search/title/';
private pathAuthor = 'http://localhost:9090/books/search/author/';
private pathGenre = 'http://localhost:9090/books/search/genre/';
 
  constructor(private client: HttpClient) {}
 
  public add(addBook: AddBook): Observable<string> {
    return this.client.post(this.pathAdd, addBook, { responseType: 'text' });
      }
     
      public view(): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathView);
      }
     
      public delete(bookId: string): Observable<void> {
        return this.client.delete<void>(this.pathDelete + bookId);
      }
     
      public getById(bookId: string): Observable<AllBook> {
        return this.client.get<AllBook>(this.pathId + bookId);
      }
     
      public update(bookId: string, book: AddBook): Observable<string> {
        return this.client.put(this.pathUpdate + bookId, book, { responseType: 'text' });
      }
     
      public searchByTitle(title: string): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathTitle + title);
      }
     
      public searchByAuthor(author: string): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathAuthor + author);
      }
     
      public searchByGenre(genre: string): Observable<AllBook[]> {
        return this.client.get<AllBook[]>(this.pathGenre + genre);
      }
     
      // Optional: member-only borrowing
      public borrowBook(bookId: string): Observable<string> {
        const memberId = localStorage.getItem("memberId");
        const body = { bookId, memberId };
    return this.client.post('http://localhost:9090/borrowings/borrow', body, { responseType: 'text' });
      }
    }
 
export class AddBook {
  constructor(
    public title: string,
    public author: string,
    public genre: string,
    public isbn: string,
    public yearPublished: string,
    public availableCopies: string
  ) {}
}
 
export class AllBook {
  constructor(
    public bookId: string,
    public title: string,
    public author: string,
    public genre: string,
    public isbn: string,
    public yearPublished: string,
    public availableCopies: string
  ) {}
}


