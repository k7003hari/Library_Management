<app-navbar></app-navbar>

<!-- ✅ Toast Notification -->
<div *ngIf="toastMessage" class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">
  <div class="toast show align-items-center text-white bg-success border-0" role="alert">
    <div class="d-flex">
      <div class="toast-body">
        {{ toastMessage }}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" (click)="toastMessage = ''"></button>
    </div>
  </div>
</div>

<div class="container">
  <div class="align-items-center justify-content-center text-center mt-3 mb-4">
    <h2 class="mb-4 text-primary">📚 Book Module</h2>
    <p class="text-muted mb-5">Manage all book-related operations from here</p>
  </div>

  

  <!-- ➕ Add New Book (Only for Admin) -->
  <div *ngIf="userRole === 'admin'" class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
    <div class="card shadow text-center w-100" routerLink="/addBook" style="cursor: pointer;">
      <div class="card-body d-flex flex-column justify-content-center align-items-center">
        <i class="bi bi-plus-circle-fill display-4 text-success mb-3"></i>
        <h5 class="text-success fw-semibold">Add New Book</h5>
        <p class="text-muted small">Click to add a new book to the library</p>
      </div>
    </div>
  </div>
  <!-- 🔍 Search Bar -->
  <div class="row mb-4 mt-4 search-area align-items-center">
    <div class="col-sm-12 col-md-4 mb-2 mb-md-0">
      <select class="form-select" [(ngModel)]="searchType">
        <option value="title">Search by Title</option>
        <option value="author">Search by Author</option>
        <option value="genre">Search by Genre</option>
      </select>
    </div>
    <div class="col-sm-12 col-md-6 mb-2 mb-md-0">
      <input type="text" class="form-control" placeholder="Enter value to search" [(ngModel)]="searchValue">
    </div>
    <div class="col-sm-12 col-md-2">
      <button class="btn btn-primary w-100" (click)="searchBooks()">
        <i class="bi bi-search"></i> Search
      </button>
    </div>
  </div>

  <!-- 📚 Book Cards -->
  <div class="row">
    <ng-container *ngFor="let book of books">
      <div class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
        <div class="card shadow w-100 text-center" [ngClass]="{ 'opacity-50': book.borrowedByMe }"
          style="transition: opacity 0.3s;">
          <img
            src="https://tse1.mm.bing.net/th/id/OIP.li28PO9vkz1NQS9jN9ZOOAHaHa?w=161&h=180&c=7&r=0&o=5&dpr=1.2&pid=1.7"
            class="img-fluid p-3 mx-auto" style="height: 180px; object-fit: contain;" />
          <div class="card-body text-start">
            <h5 class="text-primary text-center">Book Details</h5>
            <p><strong>Title:</strong> {{ book.title }}</p>
            <p><strong>Author:</strong> {{ book.author }}</p>
            <p><strong>Genre:</strong> {{ book.genre }}</p>
            <p><strong>ISBN:</strong> {{ book.isbn }}</p>
            <p><strong>Year:</strong> {{ book.yearPublished }}</p>
            <p><strong>Available:</strong> {{ book.availableCopies }}</p>
            <p *ngIf="book.borrowedByMe && book.returnDate">
              <strong>Return by:</strong> {{ book.returnDate }}
            </p>
          </div>

          <div class="card-footer d-flex flex-wrap justify-content-center gap-2 p-3">
            <!-- 👤 Member buttons -->
            <ng-container *ngIf="userRole === 'member'">
              <button *ngIf="!book.borrowedByMe" class="btn btn-outline-success" (click)="borrowBook(book.bookId)">
                <i class="bi bi-book"></i> Borrow
              </button>
              <button *ngIf="book.borrowedByMe" class="btn btn-outline-danger" (click)="returnBook(book.bookId)">
                <i class="bi bi-arrow-return-left"></i> Return
              </button>
            </ng-container>

            <!-- 🔧 Admin buttons -->
            <ng-container *ngIf="userRole === 'admin'">
              <button class="btn btn-outline-warning" (click)="updateBook(book.bookId)">
                <i class="bi bi-pencil-square"></i> Update
              </button>
              <button class="btn btn-outline-danger" (click)="deleteBook(book.bookId)">
                <i class="bi bi-trash"></i> Delete
              </button>
            </ng-container>
          </div>
        </div>
      </div>
    </ng-container>

    
  </div>

  <!-- ❗ No Results -->
  <div *ngIf="books.length === 0" class="alert alert-info text-center mt-4">
    No books found.
  </div>
</div>

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { AllBook, BookService } from '../book.service';
import { FormsModule } from '@angular/forms';
import { jwtDecode } from 'jwt-decode';
import { MemberService } from '../member.service';
import { BorrowService } from '../borrow.service';
 
@Component({
  selector: 'app-all-book',
  standalone: true,
  imports: [CommonModule, RouterLink, NavbarComponent, FormsModule],
  templateUrl: './all-book.component.html',
  styleUrls: ['./all-book.component.css']
})
export class AllBookComponent {
  books: AllBook[] = [];
  allBooks: AllBook[] = [];
  searchType: string = 'title';
  searchValue: string = '';
  error: any;
  userRole: string = '';
  toastMessage: string = '';
 
  constructor(
    private bookService: BookService,
    private route: Router,
    private memberService: MemberService,
    private borrowService: BorrowService
  ) {
    this.loadBooks();
    this.extractRole();
  }
 
  extractRole(): void {
    const token = localStorage.getItem('JWT');
    if (token) {
      try {
        const decoded: any = jwtDecode(token);
        this.userRole = decoded.role || decoded.roles || '';
        localStorage.setItem("userId", decoded.userId);
      } catch (err) {
        console.error('Failed to decode JWT', err);
      }
    }
  }
 
  extractEmail(): string | null {
    const token = localStorage.getItem('JWT');
    if (!token) return null;
 
    try {
      const decoded: any = jwtDecode(token);
return decoded.email || decoded.sub || null;
    } catch {
      return null;
    }
  }
 
  loadBooks(): void {
    this.bookService.view().subscribe({
      next: (response: AllBook[]) => {
        this.books = response.map(book => ({ ...book, borrowedByMe: false, returnDate: '' }));
        this.allBooks = this.books;
      },
      error: err => this.error = err.message
    });
  }
 
  searchBooks(): void {
    if (!this.searchValue.trim()) {
      this.books = this.allBooks;
      return;
    }
 
    switch (this.searchType) {
      case 'title':
        this.bookService.searchByTitle(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'author':
        this.bookService.searchByAuthor(this.searchValue).subscribe(data => this.books = data);
        break;
      case 'genre':
        this.bookService.searchByGenre(this.searchValue).subscribe(data => this.books = data);
        break;
    }
  }
 
  deleteBook(bookId: string): void {
    if (confirm('Are you sure you want to delete this book?')) {
      this.bookService.delete(bookId).subscribe(() => {
        this.books = this.books.filter(book => book.bookId !== bookId);
      });
    }
  }
 
  updateBook(bookId: string): void {
    console.log("clicked");
    this.route.navigate(['/updatebook', bookId]);
  }
 
  borrowBook(bookId: string): void {
    const email = this.extractEmail();
    if (!email) {
      this.toastMessage = 'User email not found in token, please login again.';
      return;
    }
 
    this.memberService.getMemberByEmail(email).subscribe({
      next: (member) => {
        if (!member || !member.memberId) {
          this.toastMessage = 'Member data not found';
          return;
        }
 
        const today = new Date();
        const returnDate = new Date(today);
        returnDate.setDate(today.getDate() + 14);
        const returnDateStr = returnDate.toISOString().slice(0, 10);
 
        this.borrowService.borrowBook(member.memberId, +bookId, returnDateStr).subscribe({
          next: () => {
            const borrowedBook = this.books.find(b => b.bookId === bookId);
            if (borrowedBook) {
              borrowedBook.borrowedByMe = true;
              borrowedBook.returnDate = returnDateStr;
            }
            this.toastMessage = `Book borrowed successfully! Return by ${returnDateStr}`;
          },
          error: err => {
            console.error(err);
            this.toastMessage = 'Error borrowing book: ' + (err.error || err.message);
          }
        });
      },
      error: err => {
        console.error('Error fetching member:', err);
        this.toastMessage = 'Failed to get member details.';
      }
    });
  }
 
  returnBook(bookId: string): void {
    const email = this.extractEmail();
    if (!email) {
      this.toastMessage = 'User email not found in token, please login again.';
      return;
    }
 
    this.memberService.getMemberByEmail(email).subscribe({
      next: (member) => {
        if (!member || !member.memberId) {
          this.toastMessage = 'Member data not found';
          return;
        }
 
        this.borrowService.returnBook(member.memberId, +bookId).subscribe({
          next: () => {
            const returnedBook = this.books.find(b => b.bookId === bookId);
            if (returnedBook) {
              returnedBook.borrowedByMe = false;
              returnedBook.returnDate = '';
            }
            this.toastMessage = 'Book returned successfully!';
          },
          error: err => {
            console.error(err);
            this.toastMessage = 'Error returning book: ' + (err.error || err.message);
          }
        });
      },
      error: err => {
        console.error('Error fetching member:', err);
        this.toastMessage = 'Failed to get member details.';
      }
    });
  }
}

there is an issue if i borrow the book and logout , again after logging in and checking if that book is borrowed it is not showing return button and if i click again borrow it give proper msg that book is already borrowed , so if i login and come again to return book it must show return 
