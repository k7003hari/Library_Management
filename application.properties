package com.cts.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.MemberDTO;
import com.cts.exception.BorrowingNotAllowedException;
import com.cts.exception.BorrowingTransactionNotFoundException;
import com.cts.feign.BookClient;
import com.cts.feign.MailClient;
import com.cts.feign.MemberClient;
import com.cts.model.BorrowingTransaction;
import com.cts.repository.BorrowingRepository;

import feign.FeignException;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@AllArgsConstructor
public class BorrowingServiceImpl implements BorrowingService {

	private final BorrowingRepository repository;
	private final BookClient bookClient;
	private final MemberClient memberClient;
	private final MailClient mailClient;

	@Override
	public BorrowingTransaction borrowBook(BorrowingTransactionDTO transactionDTO) {
		try {
			BorrowingTransaction transaction = BorrowingTransaction.builder().bookId(transactionDTO.getBookId())
					.memberId(transactionDTO.getMemberId()).borrowDate(LocalDate.now())
					.status(BorrowingTransaction.Status.BORROWED).build();

			BorrowingTransaction savedTransaction = repository.save(transaction);

			// Get book title from Book service
			Object bookObj = bookClient.getBook(transactionDTO.getBookId());
			String bookTitle = "";
			if (bookObj instanceof Map map && map.get("title") != null) {
				bookTitle = map.get("title").toString();
			}

			// Get member email
			Object memberObj = memberClient.getMember(transactionDTO.getMemberId());
			if (memberObj instanceof MemberDTO member) {
				String email = member.getEmail();
				String subject = "Library Borrow Confirmation";
				String message = "You have borrowed the book titled: \"" + bookTitle + "\" on " + LocalDate.now()
						+ ". Please return on time.";
				mailClient.sendEmail(email, subject, message);
				log.info("Email sent to member: {}", email);
			}

			// Temporarily store book title in thread local or logging if needed
			savedTransaction.setBookTitle(bookTitle); // Optional, if you have a transient field

			return savedTransaction;
		} catch (FeignException e) {
			log.error("Error while communicating with external services: {}", e.getMessage());
			throw new BorrowingNotAllowedException("Could not process borrowing due to external service error.");
		}
	}

	@Override
	public BorrowingTransaction returnBook(Long memberId, Long bookId) {
		log.info("Attempting to return book ID: {} for member ID: {}", bookId, memberId);

		BorrowingTransaction tx = repository
				.findByBookIdAndMemberIdAndStatus(bookId, memberId, BorrowingTransaction.Status.BORROWED)
				.orElseThrow(() -> {
					log.error("No active borrowing found for member ID: {}, book ID: {}", memberId, bookId);
					return new BorrowingTransactionNotFoundException("No active borrowing found");
				});

		tx.setStatus(BorrowingTransaction.Status.RETURNED);
		tx.setReturnDate(LocalDate.now());

		// Get book title
		try {
			Object bookObj = bookClient.getBook(bookId);
			if (bookObj instanceof Map map && map.get("title") != null) {
				tx.setBookTitle(map.get("title").toString()); // Optional transient field
			}
		} catch (Exception e) {
			log.warn("Failed to fetch book title for return message");
		}

		return repository.save(tx);
	}

	@Override
	public List<BorrowingTransaction> getMemberBorrowedBooks(Long memberId) {
		log.debug("Fetching borrowed books for member ID: {}", memberId);
		List<BorrowingTransaction> borrowedBooks = repository.findByMemberIdAndStatus(memberId,
				BorrowingTransaction.Status.BORROWED);
		log.info("Retrieved {} borrowed books for member ID: {}", borrowedBooks.size(), memberId);
		return borrowedBooks;
	}

	@Override
	public List<BorrowingTransaction> getAllBorrows() {
		log.debug("Fetching all borrow transactions");
		return repository.findAll();
	}
}

package com.cts.controller;

import java.time.LocalDate;
import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.ReturnRequestDTO;
import com.cts.model.ApiResponse;
import com.cts.model.BorrowingTransaction;
import com.cts.service.BorrowingService;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/borrowings")
public class BorrowingController {

	private final BorrowingService borrowingService;

	@PostMapping("/borrow")
	public ApiResponse borrowBook(@Valid @RequestBody BorrowingTransactionDTO transactionDTO) {
	BorrowingTransaction tx = borrowingService.borrowBook(transactionDTO);
	LocalDate dueDate = tx.getBorrowDate().plusDays(14);
	String message = "You have successfully borrowed \"" + tx.getBookTitle()
	+ "\". Please return it by " + dueDate + ".";
	return new ApiResponse(message, LocalDate.now());
	}
	 
	@PutMapping("/return")
	public ApiResponse returnBook(@Valid @RequestBody ReturnRequestDTO returnDTO) {
	BorrowingTransaction tx = borrowingService.returnBook(returnDTO.getMemberId(), returnDTO.getBookId());
	String message = "Book titled \"" + tx.getBookTitle() + "\" returned successfully on " + tx.getReturnDate() + ".";
	return new ApiResponse(message, LocalDate.now());
	}

	@GetMapping("/member/{memberId}")
	public List<BorrowingTransaction> getBorrowedBooks(@PathVariable Long memberId) {
		return borrowingService.getMemberBorrowedBooks(memberId);
	}

	@GetMapping("/allborrow")
	public List<BorrowingTransaction> getAllBorrows() {
		return borrowingService.getAllBorrows();
	}
}

