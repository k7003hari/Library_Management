<app-navbar></app-navbar>

<div class="container" style="margin-top: 100px;">
  <div class="text-center mt-3 mb-4">
    <div *ngIf="userRole === 'member'" class="alert alert-info">
      You are logged in as: <strong>{{ members[0]?.email }}</strong>
    </div>
    <div *ngIf="userRole === 'admin'" class="alert alert-primary">
      Admin Dashboard - Manage Members
    </div>
    <h2 class="text-primary">👥 Member Module</h2>
    <p class="text-muted mb-4">Manage all member-related operations from here</p>
  </div>

  <!-- 🔍 Search Section (Admin Only) -->
  <div *ngIf="userRole === 'admin'" class="row mb-4 justify-content-center">
    <div class="col-md-6">
      <div class="card p-4 shadow-sm">
        <h5 class="text-center text-primary">🔍 Search Member by ID or Email</h5>
        <input type="number" [(ngModel)]="memberId" class="form-control mt-3" placeholder="Enter Member ID" />
        <input type="email" [(ngModel)]="memberEmail" class="form-control mt-2" placeholder="Enter Member Email" />
        <button class="btn btn-primary w-100 mt-3" (click)="searchMember()">Search</button>
      </div>
    </div>
  </div>

  <!-- ✅ Searched Member -->
  <div *ngIf="member" class="row justify-content-center">
    <div class="col-md-6">
      <div class="card shadow border-success mb-4">
        <div class="card-body">
          <h5 class="text-success text-center">✅ Member Found</h5>
          <p><strong>Name:</strong> {{ member.name }}</p>
          <p><strong>Email:</strong> {{ member.email }}</p>
          <p><strong>Phone:</strong> {{ member.phone }}</p>
          <p><strong>Address:</strong> {{ member.address }}</p>
          <p><strong>Status:</strong> {{ member.membershipStatus }}</p>
        </div>
        <div class="card-footer text-center">
          <button class="btn btn-outline-secondary" (click)="member = null">OK</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 👥 All Members (Admin) or Logged-in Member (Member) -->
  <div class="row">
    <ng-container *ngFor="let member of members">
      <div class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch mb-4">
        <div class="card shadow text-center w-100">
          <img src="https://cdn-icons-png.flaticon.com/512/2288/2288510.png"
            class="img-fluid p-3 mx-auto" style="height: 180px; object-fit: contain;" />
          <div class="card-body text-start">
            <h5 class="text-primary text-center">Member Details</h5>
            <p><strong>Name:</strong> {{ member.name }}</p>
            <p><strong>Email:</strong> {{ member.email }}</p>
            <p><strong>Phone:</strong> {{ member.phone }}</p>
            <p><strong>Address:</strong> {{ member.address }}</p>
            <p><strong>Status:</strong> {{ member.membershipStatus }}</p>
          </div>
          <div class="card-footer d-flex flex-wrap justify-content-center gap-2 p-3">
            <!-- Admin actions -->
            <button *ngIf="userRole === 'admin'" class="btn btn-outline-warning" (click)="updateMember(member.memberId)">
              ✏️ Update
            </button>
            <button *ngIf="userRole === 'admin'" class="btn btn-outline-danger" (click)="deleteMember(member.memberId)">
              🗑️ Delete
            </button>

            <!-- Member actions -->
            <button *ngIf="userRole === 'member'" class="btn btn-outline-success" (click)="checkfine()">
              💰 Check Fine
            </button>
            <button *ngIf="userRole === 'member'" class="btn btn-outline-primary" (click)="pay()">
              🧾 Pay Fine
            </button>
          </div>
        </div>
      </div>
    </ng-container>
  </div>

  <!-- ➕ Add New Member Card (Admin Only) -->
  <div *ngIf="userRole === 'admin'" class="row justify-content-center">
    <div class="col-md-4 mb-5">
      <div class="card shadow text-center" routerLink="/addMember" style="cursor: pointer;">
        <div class="card-body d-flex flex-column align-items-center justify-content-center">
          <i class="bi bi-plus-circle-fill display-4 text-success mb-3"></i>
          <h5 class="text-success fw-bold">Add New Member</h5>
          <p class="text-muted">Click to register a new member</p>
        </div>
      </div>
    </div>
  </div>

  <!-- No Members Message -->
  <div *ngIf="members.length === 0" class="alert alert-info text-center">
    No members found.
  </div>
</div>

// import { Component, OnInit } from '@angular/core';
// import { MemberService } from '../member.service';
// import { CommonModule } from '@angular/common';
// import { FormsModule } from '@angular/forms';
// import { Router, RouterLink } from '@angular/router';
// import { NavbarComponent } from '../navbar/navbar.component';
// import { jwtDecode } from 'jwt-decode';

// @Component({
//   selector: 'app-member-up-del',
//   standalone: true,
//   imports: [RouterLink, FormsModule, CommonModule, NavbarComponent],
//   templateUrl: './member-up-del.component.html',
//   styleUrls: ['./member-up-del.component.css']
// })
// export class MemberUpDelComponent implements OnInit {
//   members: any[] = [];
//   member: any = null;
//   memberId: number | null = null;
//   memberEmail: string = '';
//   userRole: string = '';
//   loggedInEmail: string = '';

//   constructor(private memberService: MemberService, private router: Router) {}

//   ngOnInit(): void {
//     this.extractRoleAndThenLoadMembers();
//   }

//   extractRoleAndThenLoadMembers(): void {
//     const token = localStorage.getItem('JWT');
//     if (token) {
//       try {
//         const decoded: any = jwtDecode(token);
//         this.userRole = decoded.role || decoded.roles || '';
//         this.loggedInEmail = decoded.email;
//         localStorage.setItem('memberId', decoded.userId);
//         localStorage.setItem('email', decoded.email);
//         this.loadMembers();
//       } catch (err) {
//         console.error('Failed to decode JWT', err);
//       }
//     }
//   }

//   loadMembers(): void {
//     if (this.userRole === 'admin') {
//       this.memberService.getAllMembers().subscribe({
//         next: (data) => this.members = data,
//         error: (err) => console.error('Error loading members', err)
//       });
//     } else if (this.userRole === 'member') {
//       const email = localStorage.getItem('email');
//       if (email) {
//         this.memberService.getMemberByEmail(email).subscribe({
//           next: (data) => this.members = [data],
//           error: (err) => console.error('Error fetching member by email', err)
//         });
//       }
//     }
//   }

//   updateMember(memberId: number): void {
//     this.router.navigate(['/updateMember', memberId]);
//   }

//   deleteMember(memberId: number): void {
//     if (confirm('Are you sure you want to delete this member?')) {
//       this.memberService.deleteMember(memberId).subscribe(() => {
//         this.members = this.members.filter(m => m.memberId !== memberId);
//         alert('Deleted successfully');
//       });
//     }
//   }

//   searchMember(): void {
//     if (this.memberId) {
//       this.memberService.getMemberById(this.memberId).subscribe({
//         next: (data) => this.member = data,
//         error: () => {
//           alert('Member not found by ID.');
//           this.member = null;
//         }
//       });
//     } else if (this.memberEmail) {
//       this.memberService.getMemberByEmail(this.memberEmail).subscribe({
//         next: (data) => this.member = data,
//         error: () => {
//           alert('Member not found by email.');
//           this.member = null;
//         }
//       });
//     } else {
//       alert('Please enter a Member ID or Email to search.');
//     }
//   }

//   checkfine(): void {
//     this.router.navigate(['/fineCal']);
//   }

//   pay(): void {
//     this.router.navigate(['/finePay']);
//   }
// }

import { Component, OnInit } from '@angular/core';
import { MemberService } from '../member.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { jwtDecode } from 'jwt-decode';
import { ToastrService } from 'ngx-toastr';
 
@Component({
  selector: 'app-member-up-del',
  standalone: true,
  imports: [RouterLink, FormsModule, CommonModule, NavbarComponent],
  templateUrl: './member-up-del.component.html',
  styleUrls: ['./member-up-del.component.css']
})
export class MemberUpDelComponent implements OnInit {
  members: any[] = [];
  member: any = null;
  memberId: number | null = null;
  memberEmail: string = '';
  userRole: string = '';
  loggedInEmail: string = '';
 
  constructor(
    private memberService: MemberService,
    private router: Router,
    private toastr: ToastrService
  ) {}
 
  ngOnInit(): void {
    this.extractRoleAndThenLoadMembers();
  }
 
  extractRoleAndThenLoadMembers(): void {
    const token = localStorage.getItem('JWT');
    if (token) {
      try {
        const decoded: any = jwtDecode(token);
        this.userRole = decoded.role || decoded.roles || '';
this.loggedInEmail = decoded.email;
        localStorage.setItem('memberId', decoded.userId);
localStorage.setItem('email', decoded.email);
        this.loadMembers();
      } catch (err) {
        console.error('Failed to decode JWT', err);
        this.toastr.error('Invalid JWT token');
      }
    }
  }
 
  loadMembers(): void {
    if (this.userRole === 'admin') {
      this.memberService.getAllMembers().subscribe({
        next: (data) => this.members = data,
        error: (err) => {
          console.error('Error loading members', err);
          this.toastr.error('Failed to load members');
        }
      });
    } else if (this.userRole === 'member') {
      const email = localStorage.getItem('email');
      if (email) {
        this.memberService.getMemberByEmail(email).subscribe({
          next: (data) => this.members = [data],
          error: () => {
            this.toastr.error('Could not fetch your profile');
          }
        });
      }
    }
  }
 
  updateMember(memberId: number): void {
    this.router.navigate(['/updateMember', memberId]);
  }
 
  deleteMember(memberId: number): void {
    if (confirm('Are you sure you want to delete this member?')) {
      this.memberService.deleteMember(memberId).subscribe({
        next: () => {
          this.members = this.members.filter(m => m.memberId !== memberId);
          this.toastr.success('Member deleted successfully');
        },
        error: () => {
          this.toastr.error('Failed to delete member');
        }
      });
    }
  }
 
  searchMember(): void {
    if (this.memberId) {
      this.memberService.getMemberById(this.memberId).subscribe({
        next: (data) => this.member = data,
        error: () => {
          this.toastr.warning('Member not found by ID');
          this.member = null;
        }
      });
    } else if (this.memberEmail) {
      this.memberService.getMemberByEmail(this.memberEmail).subscribe({
        next: (data) => this.member = data,
        error: () => {
          this.toastr.warning('Member not found by email');
          this.member = null;
        }
      });
    } else {
this.toastr.info('Please enter a Member ID or Email to search');
    }
  }
 
  checkfine(): void {
    this.router.navigate(['/fineCal']);
  }
 
  pay(): void {
    this.router.navigate(['/finePay']);
  }
}

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class MemberService {
  private baseUrl = 'http://localhost:9090/members';

  constructor(private http: HttpClient) {}

  getAllMembers(): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/getallMember`);
  }

  getMemberById(id: number): Observable<any> {
    return this.http.get<any>(`${this.baseUrl}/${id}`);
  }

  getMemberByEmail(email: string): Observable<any> {
    return this.http.get<any>(`${this.baseUrl}/email/${email}`);
  }

  deleteMember(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/delete/${id}`);
  }

  updateMember(id: number, member: any): Observable<any> {
    return this.http.put<any>(`${this.baseUrl}/update/${id}`, member);
  }

  addMember(member: any): Observable<any> {
    return this.http.post<any>(`${this.baseUrl}/regMember`, member);
  }
}

above code is all about member module

<app-navbar></app-navbar>

<div class="container" style="margin-top: 130px; max-width: 700px;">
  <div class="card shadow-lg p-4">
    <h3 class="mb-4 text-primary text-center">Calculate Fine</h3>

    <form (ngSubmit)="calculateFine()">
      <div class="mb-3">
        <label for="memberId" class="form-label">Enter Member ID</label>
        <input type="number" class="form-control" [(ngModel)]="memberId" name="memberId" id="memberId" placeholder="e.g. 3" required />
      </div>

      <div class="d-grid">
        <button class="btn btn-primary mb-2" type="submit">Calculate</button>
      </div>
    </form>

    <div *ngIf="message" class="alert alert-success mt-2 text-center">{{ message }}</div>
    <div *ngIf="error" class="alert alert-danger mt-2 text-center">{{ error }}</div>

    <div *ngIf="fineDetails" class="card mt-4 p-4 bg-light border border-primary rounded-3">
      <h5 class="mb-3 text-primary">Fine Details</h5>
      <ul class="list-group list-group-flush">
        <li class="list-group-item"><strong>Fine ID:</strong> {{ fineDetails.fineId }}</li>
        <li class="list-group-item"><strong>Status:</strong> {{ fineDetails.status }}</li>
        <li class="list-group-item"><strong>Amount:</strong> ₹{{ fineDetails.amount }}</li>
        <li class="list-group-item"><strong>Transaction Date:</strong> {{ fineDetails.transactionDate }}</li>
      </ul>

      <h6 class="mt-4 text-secondary">Member Details</h6>
      <ul class="list-group list-group-flush">
        <li class="list-group-item"><strong>Name:</strong> {{ fineDetails.memberId.name }}</li>
        <li class="list-group-item"><strong>Email:</strong> {{ fineDetails.memberId.email }}</li>
        <li class="list-group-item"><strong>Phone:</strong> {{ fineDetails.memberId.phone }}</li>
        <li class="list-group-item"><strong>Address:</strong> {{ fineDetails.memberId.address }}</li>
        <li class="list-group-item"><strong>Status:</strong> {{ fineDetails.memberId.membershipStatus }}</li>
      </ul>
    </div>
  </div>
</div>
import { Component } from '@angular/core';
import { NavbarComponent } from '../navbar/navbar.component';
import { RouterLink } from '@angular/router';
import { FinesService } from '../fines.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-fine-cal',
  imports: [NavbarComponent,RouterLink,FormsModule,CommonModule],
  templateUrl: './fine-cal.component.html',
  styleUrl: './fine-cal.component.css'
})
export class FineCalComponent {
  memberId!: number;
  fineDetails: any = null;
  message: string = '';
  error: string = '';
  isLoading: boolean = false;

  constructor(private finesService: FinesService) {}

  calculateFine(): void {
    this.message = '';
    this.error = '';
    this.fineDetails = null;
    this.isLoading = true;

    if (!this.memberId || this.memberId <= 0) {
      this.error = '⚠️ Please enter a valid Member ID.';
      this.isLoading = false;
      return;
    }

    console.log(`Calculating fine for member ID ${this.memberId}`);

    this.finesService.calculateFine(this.memberId).subscribe({
      next: (res) => {
        this.fineDetails = res;
        this.message = '✅ Fine calculated successfully.';
        console.log('Fine Details:', res);
        this.isLoading = false;
      },
      error: (err) => {
        this.error = '❌ Failed to calculate fine. Please check the Member ID.';
        console.error('Calculation Error:', err);
        this.isLoading = false;
      }
    });
  }
}
<app-navbar></app-navbar>

<div class="container" style="margin-top: 130px; max-width: 600px;">
  <div class="card shadow-lg p-4">
    <h3 class="mb-4 text-success text-center">Pay Fine</h3>

    <form (ngSubmit)="payFine()">
      <div class="mb-3">
        <label class="form-label">Member ID</label>
        <input type="number" class="form-control" [(ngModel)]="memberId" name="memberId"
          placeholder="Enter Member ID" required />
      </div>

      <div class="mb-3">
        <label class="form-label">Fine ID</label>
        <input type="number" class="form-control" [(ngModel)]="fineId" name="fineId"
          placeholder="Enter Fine ID" required />
      </div>

      <div class="d-grid">
        <button class="btn btn-success" type="submit">Pay Fine</button>
      </div>
    </form>

    <div *ngIf="isLoading" class="text-center mt-3">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>

    <div *ngIf="message" class="alert alert-info mt-4 text-center">
      {{ message }}
    </div>
  </div>
</div>

<!-- Fine List Section -->
<div class="container mt-5" *ngIf="fineList.length > 0">
  <h4 class="text-center mb-4">
    {{ userRole === 'admin' ? 'All Fines (Admin View)' : 'My Fines' }}
  </h4>

  <div *ngFor="let fine of fineList" class="card mb-3 p-3 shadow-sm">
    <ng-container *ngIf="userRole === 'admin'">
      <p><strong>Member ID:</strong> {{ fine.memberId.memberId }}</p>
      <p><strong>Name:</strong> {{ fine.memberId.name }}</p>
      <p><strong>Email:</strong> {{ fine.memberId.email }}</p>
    </ng-container>
    <p><strong>Fine ID:</strong> {{ fine.fineId }}</p>
    <p><strong>Amount:</strong> ₹{{ fine.amount }}</p>
    <p><strong>Status:</strong> {{ fine.status }}</p>
    <p><strong>Date:</strong> {{ fine.transactionDate }}</p>
  </div>
</div>

import { Component, OnInit } from '@angular/core';
import { FinesService } from '../fines.service';
import { NavbarComponent } from '../navbar/navbar.component';
import { RouterLink } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-fine-pay',
  standalone: true,
  imports: [NavbarComponent, RouterLink, FormsModule, CommonModule],
  templateUrl: './fine-pay.component.html',
  styleUrl: './fine-pay.component.css'
})
export class FinePayComponent implements OnInit {
  memberId!: number;
  fineId!: number;
  message: string = '';
  userRole: string = '';
  fineList: any[] = [];
  isLoading = false;

  constructor(private fineService: FinesService) { }

  ngOnInit(): void {
    const role = localStorage.getItem('role');
    this.userRole = role ? role : '';

    if (this.userRole === 'admin') {
      this.loadAllFines();
    } else {
      const storedMemberId = localStorage.getItem('memberId');
      if (storedMemberId) {
        this.memberId = +storedMemberId;
        this.loadMemberFines(this.memberId);
      }
    }
  }

  payFine() {
    this.message = '';
    this.isLoading = true;
    this.fineService.payFine(this.memberId, this.fineId).subscribe({
      next: () => {
        this.message = `Fine with ID ${this.fineId} paid successfully by member ${this.memberId}.`;
        this.loadAllFines(); // refresh list
        this.isLoading = false;
      },
      error: (err) => {
        this.message = 'Error paying fine. Please check the Member ID and Fine ID.';
        console.error(err);
        this.isLoading = false;
      },
    });
  }

  loadAllFines() {
    this.isLoading = true;
    this.fineService.getAllFines().subscribe({
      next: (data) => {
        this.fineList = data;
        this.isLoading = false;
      },
      error: (err) => {
        this.message = 'Failed to load fines.';
        console.error(err);
        this.isLoading = false;
      }
    });
  }

  loadMemberFines(memberId: number) {
    this.isLoading = true;
    this.fineService.getMemberFines(memberId).subscribe({
      next: (data) => {
        this.fineList = data;
        this.isLoading = false;
      },
      error: (err) => {
        this.message = 'Failed to load member fines.';
        console.error(err);
        this.isLoading = false;
      }
    });
  }
}

<app-navbar></app-navbar>

<div class="container " style="margin-top: 150px;">
  <div class="card p-4 shadow">
    <h3 class="mb-3">All Fines (Admin View)</h3>
 
    <div *ngIf="message" class="alert alert-warning">{{ message }}</div>
 
    <div *ngFor="let fine of fineList" class="card mb-3 p-3 shadow-sm">
      <h5>Fine ID: {{ fine.fineId }}</h5>
      <p><strong>ID: </strong>{{ fine.memberId.memberId }}</p>
      <p><strong>Member:</strong> {{ fine.memberId.name }} </p>
      <p><strong>Email:</strong> {{ fine.memberId.email }}</p>
      <p><strong>Amount:</strong> ₹{{ fine.amount }}</p>
      <p><strong>Status:</strong> {{ fine.status }}</p>
      <p><strong>Transaction Date:</strong> {{ fine.transactionDate }}</p>
    </div>
  </div>
</div>

import { Component, OnInit } from '@angular/core';
import { FinesService } from '../fines.service';
import { FormsModule } from '@angular/forms';
import { NavbarComponent } from '../navbar/navbar.component';
import { RouterLink } from '@angular/router';
import { CommonModule } from '@angular/common';
 
@Component({
  selector: 'app-fine-view',
  standalone: true,
  imports: [FormsModule, NavbarComponent, RouterLink, CommonModule],
  templateUrl: './fine-view.component.html',
  styleUrl: './fine-view.component.css'
})
export class FineViewComponent implements OnInit {
  fineList: any[] = [];
  message = '';
  userRole: string = '';
  memberId: number | null = null;
  isLoading: boolean = false;
 
  constructor(private fineService: FinesService) {}
 
  ngOnInit(): void {
    this.userRole = localStorage.getItem('role') || '';
    const storedId = localStorage.getItem('memberId');
    this.memberId = storedId ? +storedId : null;
 
    this.fetchFines();
  }
 
  fetchFines() {
    this.message = '';
    this.fineList = [];
    this.isLoading = true;
 
    if (this.userRole === 'admin') {
      this.fineService.getAllFines().subscribe({
        next: (data) => {
          this.fineList = data;
          if (data.length === 0) this.message = 'No fines available.';
          this.isLoading = false;
        },
        error: (err) => {
          this.message = 'Error fetching fines.';
          this.isLoading = false;
          console.error(err);
        },
      });
    } else if (this.userRole === 'member' && this.memberId !== null) {
      this.fineService.getMemberFines(this.memberId).subscribe({
        next: (data) => {
          this.fineList = data;
          if (data.length === 0) this.message = 'You have no fines.';
          this.isLoading = false;
        },
        error: (err) => {
          this.message = 'Error fetching your fines.';
          this.isLoading = false;
          console.error(err);
        },
      });
    } else {
      this.message = 'Invalid user role or session expired.';
      this.isLoading = false;
    }
  }
}

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class FinesService {
  private pathCal = 'http://localhost:9090/fines/calculatefine';
  private pathPay = 'http://localhost:9090/fines/pay';
  private pathView = 'http://localhost:9090/fines/allfines';
  private pathMemberFines = 'http://localhost:9090/fines/member'; 

  constructor(private http: HttpClient) {}

  calculateFine(memberId: number): Observable<any> {
    return this.http.post(`${this.pathCal}/${memberId}`, {});
  }

  payFine(memberId: number, fineId: number): Observable<any> {
    return this.http.post(`${this.pathPay}/${memberId}/${fineId}`, {});
  }

  getAllFines(): Observable<any[]> {
    return this.http.get<any[]>(this.pathView);
  }

  getMemberFines(memberId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.pathMemberFines}/${memberId}`);
  }
}

the above code is about the fine module

