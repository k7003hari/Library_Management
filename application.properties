<app-navbar></app-navbar>

<div class="container " style="margin-top: 150px;">
    <div class="card p-4 shadow-sm">
      <h3 class="mb-3">Borrow Book</h3>
      <form (ngSubmit)="borrow()">
        <div class="mb-3">
          <label for="memberId" class="form-label">Member ID</label>
          <input type="number" id="memberId" class="form-control" [(ngModel)]="memberId" name="memberId" required min="1"/>
        </div>
   
        <div class="mb-3">
          <label for="bookId" class="form-label">Book ID</label>
          <input type="number" id="bookId" class="form-control" [(ngModel)]="bookId" name="bookId" required min="1"/>
        </div>
   
        <div class="mb-3">
          <label for="returnDate" class="form-label">Return Date</label>
          <input type="date" id="returnDate" class="form-control"  [(ngModel)]="returnDate" name="returnDate" required  min="{{ today }}" />
        </div>
   
        <button type="submit" class="btn btn-primary">Borrow</button>
      </form>
      <!-- <p class="mt-3 text-success" *ngIf="message">{{ message }}</p>  -->
    </div>
  </div>

import { Component } from '@angular/core';
import { NavbarComponent } from '../navbar/navbar.component';
import { Router, RouterLink } from '@angular/router';
import { BorrowService } from '../borrow.service';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-borrow-book',
  imports: [NavbarComponent,RouterLink, FormsModule],
  templateUrl: './borrow-book.component.html',
  styleUrl: './borrow-book.component.css'
})
export class BorrowBookComponent {
  memberId!: number;
  bookId!: number;
  returnDate!: string;
  message: string = '';
  today: string = new Date().toISOString().split('T')[0]; 
 
  constructor(private borrowService: BorrowService, private router:Router) {}
 
  borrow() {
    if (!this.memberId || !this.bookId || !this.returnDate) {
      alert('Please fill all fields.');
      return;
    }
 
    this.borrowService.borrowBook(this.memberId, this.bookId, this.returnDate)
      .subscribe({
        next: (response) => {
          this.message = 'Book borrowed successfully!';
          console.log(response);
          alert(this.message);
          this.clearForm();
        },
        error: (err) => {
          this.message = 'Failed to borrow book. Please try again.';
          console.error(err);
          alert(this.message);
        }
      });
  }
 
  clearForm() {
    this.memberId = 0;
    this.bookId = 0;
    this.returnDate = '';
    this.router.navigate(['/borrow'])
  }
}

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
 
@Injectable({
  providedIn: 'root'
})
export class BorrowService {
 
private pathBorrow = 'http://localhost:9090/borrowings/borrow'; // ("memberId": 3, "bookId": 2, "returnDate":"2025-06-03")
private pathReturn = 'http://localhost:9090/borrowings/return'; // ("memberId": 1, "bookId": 2)
private pathAllBorrows = 'http://localhost:9090/borrowings/'; // http://localhost:9090/borrowings/1 pass the member. Id
 
  constructor(private clients: HttpClient) {}
 
  borrowBook(memberId: number, bookId: number, returnDate: string): Observable<any> {
    const payload = { memberId, bookId, returnDate };
return this.clients.post(this.pathBorrow, payload);
  }

  returnBook(memberId: number, bookId: number): Observable<any> {
    const payload = { memberId, bookId };
  return this.clients.post(this.pathReturn, payload);
  }
  
  viewBorrowsByMember(memberId: number): Observable<any> {
    return this.clients.get(this.pathAllBorrows + memberId);
  }

}
