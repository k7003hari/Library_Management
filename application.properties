package com.cts;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients;
@EnableFeignClients
@SpringBootApplication
public class FineServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(FineServiceApplication.class, args);
	}

}

package com.cts.controller;

import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.dto.FineDTO;
import com.cts.service.FineService;

import lombok.AllArgsConstructor;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/fines")
@AllArgsConstructor
public class FineController {
 
    private final FineService fineService;
 
    // Endpoint to calculate fine for a member
    @PostMapping("/calculatefine/{memberId}")
    public FineDTO calculateFine(@PathVariable Long memberId) {
        return fineService.calculateFine(memberId);
    }
 
    // Endpoint for member to pay their fine
    @PostMapping("/pay/{memberId}/{fineId}")
    public void payFine(@PathVariable Long memberId, @PathVariable Long fineId) {
        fineService.payFine(memberId, fineId);
    }
 
    // Endpoint for Admin to view all fines
    @GetMapping("/allfines")
    public List<FineDTO> getAllFines() {
        return fineService.getAllFines();
    }
}
package com.cts.dto;

import java.time.LocalDate;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class BorrowingTransactionDTO {

    private Long transactionId;
    private Long bookId;
    private Long memberId;
    private LocalDate borrowDate;
    private LocalDate returnDate;

    private Status status;

    public enum Status {
        BORROWED,
        RETURNED
    }
}

package com.cts.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import java.time.LocalDateTime;

@Data
@AllArgsConstructor
public class ErrorResponse {
   private String code;
   private String message;
   private String path;
   private LocalDateTime timestamp = LocalDateTime.now();

   public ErrorResponse(String code, String message, String path) {
       this.code = code;
       this.message = message;
       this.path = path;
   }
}

package com.cts.dto;

import java.math.BigDecimal;
import java.time.LocalDate;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class FineDTO {
    private Long fineId;
    private MemberDTO memberId;
    private BigDecimal amount;
    private String status; // Must be named "status"
    private LocalDate transactionDate;
}
package com.cts.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class MemberDTO {
	private Long memberId;
	private String name;
	private String email;
	private String phone;
	private String address;
	private String membershipStatus;
}
package com.cts.feign;

import java.util.List;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.cts.dto.BorrowingTransactionDTO;

@FeignClient(name = "BORROWINGSERVICE", path = "/borrowings")
public interface BorrowingClient {

    @GetMapping("/{memberId}")
    List<BorrowingTransactionDTO> getBorrowedBooksByMember(@PathVariable("memberId") Long memberId);
}
package com.cts.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.cts.dto.MemberDTO;

@FeignClient(name = "MEMBERSERVICE", path = "/members")
public interface MemberClient {

    @GetMapping("/{memberId}")
    MemberDTO getMemberById(@PathVariable("memberId") Long memberId);

    @GetMapping("/getMember/{id}/{Email}")
    MemberDTO getMember(@PathVariable("id") Long id, @PathVariable("Email") String email);
}

package com.cts.model;

import java.math.BigDecimal;
import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Fine {


	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long fineId;

	private Long memberId;

	private BigDecimal amount;

	@Enumerated(EnumType.STRING)
	private FineStatus status;

	private LocalDate transactionDate;

	public enum FineStatus {
		PAID, PENDING
	}
}
package com.cts.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.cts.model.Fine;
import com.cts.model.Fine.FineStatus;

public interface FineRepository extends JpaRepository<Fine, Long> {
	List<Fine> findByMemberId(Long memberId);

	List<Fine> findByMemberIdAndStatus(Long memberId, Fine.FineStatus status);
}
package com.cts.service;

import java.util.List;

import com.cts.dto.FineDTO;

public interface FineService {

	FineDTO calculateFine(Long memberId);

	FineDTO payFine(Long memberId, Long fineId);

	List<FineDTO> getAllFines();
}

package com.cts.service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.ctc.exception.FineNotFoundException;
import com.ctc.exception.NoFineDueException;
import com.ctc.exception.UnauthorizedAccessException;
import com.cts.dto.BorrowingTransactionDTO;
import com.cts.dto.FineDTO;
import com.cts.feign.BorrowingClient;
import com.cts.feign.MemberClient;
import com.cts.model.Fine;
import com.cts.repository.FineRepository;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@AllArgsConstructor
@Slf4j
public class FineServiceImpl implements FineService {

    private final FineRepository fineRepository;
    private final BorrowingClient borrowingClient;
    private final MemberClient memberClient;

    @Override
    public FineDTO calculateFine(Long memberId) {
    log.info("Calculating fine for member ID: {}", memberId);
        List<BorrowingTransactionDTO> borrowedBooks = borrowingClient.getBorrowedBooksByMember(memberId);
     
        BigDecimal totalFine = BigDecimal.ZERO;
     
        for (BorrowingTransactionDTO transaction : borrowedBooks) {
            long overdueDays = calculateOverdueDays(transaction.getReturnDate());
            if (overdueDays > 0) {
                totalFine = totalFine.add(BigDecimal.valueOf(overdueDays).multiply(new BigDecimal("1.00")));
            }
        }
     
        if (totalFine.compareTo(BigDecimal.ZERO) <= 0) {
    log.info("No fine applicable for member ID: {}", memberId);
            throw new NoFineDueException("No fine due at this time.");
        }
     
        // Save fine
        Fine fine = Fine.builder()
                .memberId(memberId)
                .amount(totalFine)
                .status(Fine.FineStatus.PENDING)
                .transactionDate(LocalDate.now())
                .build();
     
        fineRepository.save(fine);
    log.info("Fine of {} saved for member ID: {}", totalFine, memberId);
     
        return new FineDTO(
                fine.getFineId(),
                memberClient.getMemberById(memberId),
                fine.getAmount(),
                fine.getStatus().name(),
                fine.getTransactionDate()
        );
    }

    @Override
    public FineDTO payFine(Long memberId, Long fineId) {
        log.info("Paying fine with ID: {} for member ID: {}", fineId, memberId);
        Fine fine = fineRepository.findById(fineId)
                .orElseThrow(() -> new FineNotFoundException("Fine not found with ID: " + fineId));

        if (!fine.getMemberId().equals(memberId)) {
            log.error("Unauthorized access attempt by member ID: {}", memberId);
            throw new UnauthorizedAccessException("You are not authorized to pay this fine.");
        }

        fine.setStatus(Fine.FineStatus.PAID);
        fineRepository.save(fine);
        log.info("Fine paid for member ID: {}", memberId);
        return new FineDTO(
                fine.getFineId(),
                memberClient.getMemberById(memberId),
                fine.getAmount(),
                fine.getStatus().name(),
                fine.getTransactionDate());
    }


    @Override
    public List<FineDTO> getAllFines() {
        log.debug("Fetching all fines");
        List<Fine> fines = fineRepository.findAll();
        return fines.stream()
                .map(fine -> new FineDTO(fine.getFineId(), memberClient.getMemberById(fine.getMemberId()), fine.getAmount(), fine.getStatus().name(), fine.getTransactionDate()))
                .collect(Collectors.toList());
    }
    
    private long calculateOverdueDays(LocalDate returnDate) {
        if (returnDate == null || returnDate.isBefore(LocalDate.now())) {
            return returnDate == null ? 0 : returnDate.until(LocalDate.now()).getDays();
        }
        return 0;
    }
}
package com.cts.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.model.Member;
import com.cts.service.MemberService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/members")
@RequiredArgsConstructor
@Slf4j
@Validated
public class MemberController {

    @Autowired
    private MemberService memberService;

    @PostMapping("/regMember")
    public Member registerMember(@RequestBody Member member) {
        log.info("POST /members");
        return memberService.registerMember(member);
    }

    @PutMapping("update/{id}")
    public Member updateMember(@PathVariable Long id, @Valid @RequestBody Member member) {
        log.info("PUT /members/{}", id);
        return memberService.updateMember(id, member);
    }

    @GetMapping("/email/{email}")
    public Member getMemberByEmail( @PathVariable("email") String email) {
        log.info("GET /members/{}", email);
        return memberService.getMemberByEmail(email);
    }
    
    @GetMapping("/getallMember")
	public List<Member> getAllMember() {
		return memberService.getAllMember();
	}


    @GetMapping("/{memberId}")
    public Member getMemberById(@PathVariable Long memberId) {
        log.info("GET /members/{}", memberId);
        return memberService.getMemberById(memberId);
    }
}

package com.cts.controller;

import java.util.List;

import org.springframework.web.bind.annotation.*;

import com.cts.dto.BorrowingTransactionDTO;
import com.cts.model.BorrowingTransaction;
import com.cts.service.BorrowingService;

import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/borrowings")
public class BorrowingController {

	private final BorrowingService borrowingService;

	@PostMapping("/borrow")
	public BorrowingTransaction borrowBook(@RequestBody BorrowingTransactionDTO transactionDTO) {
		return borrowingService.borrowBook(transactionDTO);
	}

	@PostMapping("/return")
	public BorrowingTransaction returnBook(@RequestBody BorrowingTransactionDTO transactionDTO) {
		return borrowingService.returnBook(transactionDTO.getMemberId(), transactionDTO.getBookId());
	}

	@GetMapping("/member/{memberId}") 
	public List<BorrowingTransaction> getBorrowedBooks(@PathVariable Long memberId) {
		return borrowingService.getMemberBorrowedBooks(memberId);
	}

	@GetMapping("/getall")
	public List<BorrowingTransaction> getAllBorrows() {
		return borrowingService.getAllBorrows();
	}
}

analyse these code and give the perfect code for calculate fine , payfine, and to fetch all the fines foe each member
according to previous codes comparen and enhance the code.


