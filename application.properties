import { Component, OnInit } from '@angular/core';
import { MemberService } from '../member.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { jwtDecode } from 'jwt-decode';

@Component({
  selector: 'app-member-up-del',
  standalone: true,
  imports: [RouterLink, FormsModule, CommonModule, NavbarComponent],
  templateUrl: './member-up-del.component.html',
  styleUrls: ['./member-up-del.component.css']
})
export class MemberUpDelComponent implements OnInit {
  members: any[] = [];
  userRole: string = '';
  loggedInEmail: string = '';

  constructor(private memberService: MemberService, private router: Router) {}

  ngOnInit(): void {
    this.decodeJWT();
    this.loadMembers();
  }

  decodeJWT(): void {
    const token = localStorage.getItem('JWT');
    if (token) {
      try {
        const decoded: any = jwtDecode(token);
        this.userRole = decoded.role || decoded.roles || '';
        this.loggedInEmail = decoded.email;
        console.log('Logged-in role:', this.userRole);
      } catch (error) {
        console.error('JWT decode failed:', error);
      }
    }
  }

  loadMembers(): void {
    if (this.userRole === 'admin') {
      this.memberService.getAllMembers().subscribe({
        next: (data) => {
          this.members = data;
        },
        error: (err) => console.error('Error loading all members', err)
      });
    } else if (this.userRole === 'member') {
      this.memberService.getMemberByEmail(this.loggedInEmail).subscribe({
        next: (data) => {
          this.members = [data];
        },
        error: (err) => console.error('Error fetching member by email', err)
      });
    }
  }

  updateMember(memberId: number): void {
    this.router.navigate(['/updateMember', memberId]);
  }

  deleteMember(memberId: number): void {
    if (confirm('Are you sure you want to delete this member?')) {
      this.memberService.deleteMember(memberId).subscribe(() => {
        this.members = this.members.filter(m => m.memberId !== memberId);
        alert('Member deleted successfully.');
      });
    }
  }

  checkfine(): void {
    this.router.navigate(['/fineCal']);
  }

  pay(): void {
    this.router.navigate(['/finePay']);
  }
}


<app-navbar></app-navbar>

<div class="container mt-4">
  <h3 class="text-center mb-4">Member Details</h3>

  <div *ngFor="let member of members" class="card mb-3 p-3 shadow-sm">
    <div class="card-body">
      <p><strong>ID:</strong> {{ member.memberId }}</p>
      <p><strong>Name:</strong> {{ member.name }}</p>
      <p><strong>Email:</strong> {{ member.email }}</p>
      <p><strong>Phone:</strong> {{ member.phone }}</p>
      <p><strong>Address:</strong> {{ member.address }}</p>
      <p><strong>Status:</strong> {{ member.membershipStatus }}</p>

      <!-- Admin-only actions -->
      <div *ngIf="userRole === 'admin'">
        <button class="btn btn-warning me-2" (click)="updateMember(member.memberId)">Update</button>
        <button class="btn btn-danger" (click)="deleteMember(member.memberId)">Delete</button>
      </div>

      <!-- Member-only actions -->
      <div *ngIf="userRole === 'member'">
        <button class="btn btn-info me-2" (click)="checkfine()">Check Fine</button>
        <button class="btn btn-success" (click)="pay()">Pay Fine</button>
      </div>
    </div>
  </div>

  <!-- Admin: Add Member Button -->
  <div *ngIf="userRole === 'admin'" class="text-center">
    <a routerLink="/addMember" class="btn btn-primary mt-3">Add New Member</a>
  </div>
</div>


.container {
  max-width: 800px;
  margin: 0 auto;
}

.card {
  border: 1px solid #e0e0e0;
  border-radius: 12px;
  background-color: #ffffff;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.card:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
}

.card-body p {
  margin-bottom: 0.5rem;
  font-size: 15px;
  color: #444;
}

.card-body strong {
  color: #333;
}

.btn {
  min-width: 100px;
}

.btn-info {
  background-color: #17a2b8;
  border: none;
}

.btn-success {
  background-color: #28a745;
  border: none;
}

.btn-warning {
  background-color: #ffc107;
  border: none;
  color: black;
}

.btn-danger {
  background-color: #dc3545;
  border: none;
}

.btn-primary {
  background-color: #007bff;
  border: none;
}

.text-center {
  text-align: center;
}

h3 {
  color: #333;
  font-weight: 600;
}
