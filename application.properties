<app-navbar></app-navbar>

<section class="vh-100" style="background-color: #eee;">
  <div class="container h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col-lg-12 col-xl-11">
        <div class="card text-black" style="border-radius: 25px;">
          <div class="card-body p-md-5">
            <div class="row justify-content-center">
              <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Register</p>

                <form #RegisterForm="ngForm" class="mx-1 mx-md-4" (ngSubmit)="validateR(RegisterForm)" novalidate>

                  <!-- Name -->
                  <div class="form-outline mb-4">
                    <input ngModel name="name" id="name" type="text" class="form-control form-control-lg"
                      placeholder="Enter full name" required minlength="3" #name="ngModel" />
                    <label class="form-label" for="name">Full Name</label>
                    <div *ngIf="name.invalid && name.touched" class="text-danger mt-1">
                      <small *ngIf="name.errors?.['required']">Name is required.</small>
                      <small *ngIf="name.errors?.['minlength']">Minimum 3 characters required.</small>
                    </div>
                  </div>

                  <!-- Email -->
                  <div class="form-outline mb-4">
                    <input ngModel name="email" id="email" type="email" class="form-control form-control-lg"
                      placeholder="Enter email" required email #email="ngModel" />
                    <label class="form-label" for="email">Email</label>
                    <div *ngIf="email.invalid && email.touched" class="text-danger mt-1">
                      <small *ngIf="email.errors?.['required']">Email is required.</small>
                      <small *ngIf="email.errors?.['email']">Enter a valid email.</small>
                    </div>
                  </div>

                  <!-- Password -->
                  <div class="form-outline mb-4">
                    <input ngModel name="password" id="password" type="password" class="form-control form-control-lg"
                      placeholder="Enter password" required minlength="4" #password="ngModel" />
                    <label class="form-label" for="password">Password</label>
                    <div *ngIf="password.invalid && password.touched" class="text-danger mt-1">
                      <small *ngIf="password.errors?.['required']">Password is required.</small>
                      <small *ngIf="password.errors?.['minlength']">Minimum 4 characters required.</small>
                    </div>
                  </div>

                  <!-- Role -->
                  <div class="form-outline mb-4">
                    <input ngModel name="roles" id="roles" type="text" class="form-control form-control-lg"
                      placeholder="Enter role (e.g., member/admin)" required #roles="ngModel" />
                    <label class="form-label" for="roles">Role</label>
                    <div *ngIf="roles.invalid && roles.touched" class="text-danger mt-1">
                      <small *ngIf="roles.errors?.['required']">Role is required.</small>
                    </div>
                  </div>

                  <!-- Phone -->
                  <div class="form-outline mb-4">
                    <input ngModel name="phone" id="phone" type="text" class="form-control form-control-lg"
                      placeholder="Enter phone number" required minlength="10" #phone="ngModel" />
                    <label class="form-label" for="phone">Phone</label>
                    <div *ngIf="phone.invalid && phone.touched" class="text-danger mt-1">
                      <small *ngIf="phone.errors?.['required']">Phone is required.</small>
                      <small *ngIf="phone.errors?.['minlength']">Minimum 10 digits required.</small>
                    </div>
                  </div>

                  <!-- Address -->
                  <div class="form-outline mb-4">
                    <textarea ngModel name="address" id="address" class="form-control form-control-lg"
                      placeholder="Enter your address" required #address="ngModel"></textarea>
                    <label class="form-label" for="address">Address</label>
                    <div *ngIf="address.invalid && address.touched" class="text-danger mt-1">
                      <small *ngIf="address.errors?.['required']">Address is required.</small>
                    </div>
                  </div>

                  <!-- Submit -->
                  <div class="d-flex justify-content-center mb-3">
                    <button type="submit" class="btn btn-primary btn-lg px-5" [disabled]="RegisterForm.invalid">
                      Register
                    </button>
                  </div>

                  <!-- Already have account -->
                  <p class="text-center mt-3 small">Already have an account?
                    <a routerLink="/login" class="text-primary fw-bold">Login here</a>
                  </p>

                </form>

              </div>
              <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">
                <img src="https://img.freepik.com/premium-vector/library-public-reading-room-with-bookcase-bookshelves-wooden-desks-chairs-computers_176411-1523.jpg?w=900"
                  class="img-fluid" alt="Library Illustration">
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</section>


import { Component } from '@angular/core';
import { Router, RouterLink } from '@angular/router';
import { FormsModule, NgForm } from '@angular/forms';
import { AuthService } from '../auth.service';
import { NavbarComponent } from '../navbar/navbar.component';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [NavbarComponent, RouterLink, FormsModule],
  templateUrl: './register.component.html',
  styleUrl: './register.component.css'
})
export class RegisterComponent {
  constructor(private router: Router, private authService: AuthService) {}

  validateR(form: NgForm) {
    if (form.invalid) return;

    this.authService.register(form.value).subscribe({
      next: (response) => {
        console.log("Registration successful:", response);
        this.router.navigate(['/login']);
      },
      error: (err) => {
        console.error("Registration failed:", err);
      }
    });
  }
}


.form-label {
  font-weight: 500;
}

textarea.form-control {
  resize: none;
}
