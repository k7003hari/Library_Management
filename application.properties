package com.client;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import com.dto.MemberDTO;
@FeignClient(name = "MEMBERSERVICE", path = "/members")
public interface MemberClient {
	@GetMapping("/user/{username}")
	MemberDTO getMemberByUsername(@PathVariable String username);
	@GetMapping("/{memberId}")
	MemberDTO getMemberById(@PathVariable("memberId") Long memberId);
}

package com.service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
@Component
public class JwtService {
	public static final String SECRET = "d3780ec3d1cfaba271e0538d4fae686d8367e10155ee424691fbf191eabec53d";
	public String extractUsername(String token) {
		return extractClaim(token, Claims::getSubject);
}
	public Date extractExpiration(String token) {
		return extractClaim(token, Claims::getExpiration);
}
	public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
		final Claims claims = extractAllClaims(token);
		return claimsResolver.apply(claims);
	}
	private Claims extractAllClaims(String token) {
		return Jwts.parserBuilder().setSigningKey(getSignKey()).build().parseClaimsJws(token).getBody();
	}
	private Boolean isTokenExpired(String token) {
		return extractExpiration(token).before(new Date());
	}

	public Boolean validateToken(String token, UserDetails userDetails) {
		final String username = extractUsername(token);
		return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
	}
	public String generateToken(String userName, String roles, int userId, String email, Long memberId) {
	    Map<String, Object> claims = new HashMap<>();
	    claims.put("roles", roles);
	    claims.put("userId", userId);
	    claims.put("email", email);
	    claims.put("memberId", memberId);
	    return createToken(claims, userName);
	}
	private String createToken(Map<String, Object> claims, String userName) {
		return Jwts.builder().setClaims(claims).setSubject(userName).setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
				.signWith(getSignKey(), SignatureAlgorithm.HS256).compact();		
	}
	private Key getSignKey() {
		byte[] keyBytes = Decoders.BASE64.decode(SECRET);
		return Keys.hmacShaKeyFor(keyBytes);
	}}
package com.controller;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.client.MemberClient;
import com.dto.AuthRequest;
import com.dto.MemberDTO;
import com.entity.UserInfo;
import com.repository.UserInfoRepository;
import com.service.JwtService;
import com.service.UserService;

import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/auth")
//@CrossOrigin("*")
@AllArgsConstructor
public class AuthController {

	private UserService service;
	private JwtService jwtService;
	private MemberClient memberClient;
	private UserInfoRepository repo;
	private AuthenticationManager authenticationManager;

	@GetMapping("/welcome") // http://localhost:9090/auth/welcome
	public String welcome() {
		return "Welcome this endpoint is not secure";
	}

	@PostMapping("/new") // http://localhost:9090/auth/new
	public String addNewUser(@RequestBody UserInfo userInfo) {
		return service.addUser(userInfo);
	}

	@PostMapping("/authenticate")
	public String authenticateAndGetToken(@RequestBody AuthRequest authRequest) {
		Authentication authentication = authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword()));

		if (authentication.isAuthenticated()) {
			UserInfo user = repo.findByName(authRequest.getUsername()).orElse(null);

			Long memberId = null;
			if (user.getRoles().contains("MEMBER")) {
				try {
					MemberDTO member = memberClient.getMemberByUsername(authRequest.getUsername());
					memberId = member.getMemberId();
				} catch (Exception e) {
					// Log and handle gracefully
					System.out.println("Member service not available or user not found.");
				}
			}

			return jwtService.generateToken(authRequest.getUsername(), user.getRoles(), user.getId(), user.getEmail(),
					memberId);
		} else {
			throw new UsernameNotFoundException("Invalid user request!");
		}
		
	}

	@GetMapping("/getroles/{username}") // http://localhost:9090/auth/getroles/{username}
	public String getRoles(@PathVariable String username) {
		return service.getRoles(username);
	}
}
package com.cts.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.memberDTO.MemberDto;
import com.cts.model.Member;
import com.cts.service.MemberService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/members")
@RequiredArgsConstructor
@Slf4j
@Validated
public class MemberController {

    @Autowired
    private MemberService memberService;

    @PostMapping("/regMember")
    public Member registerMember(@RequestBody Member member) {
        log.info("POST /members");
        return memberService.registerMember(member);
    }
    @GetMapping("/user/{username}")
    public ResponseEntity<MemberDto> getMemberByUsername(@PathVariable String username) {
        MemberDto memberDto = memberService.getMemberByUsername(username);
        return new ResponseEntity<>(memberDto, HttpStatus.OK);
    }

    @PutMapping("update/{id}")
    public Member updateMember(@PathVariable Long id, @Valid @RequestBody Member member) {
        log.info("PUT /members/{}", id);
        return memberService.updateMember(id, member);
    }

    @GetMapping("/email/{email}")
    public ResponseEntity<MemberDto> getMemberByEmail(@PathVariable String email) {
        MemberDto memberDto = memberService.getMemberByEmail(email);
        return new ResponseEntity<>(memberDto, HttpStatus.OK);
    }
    
    @GetMapping("/getallMember")
	public List<Member> getAllMember() {
		return memberService.getAllMember();
	}


    @GetMapping("/{memberId}")
    public Member getMemberById(@PathVariable Long memberId) {
        log.info("GET /members/{}", memberId);
        return memberService.getMemberById(memberId);
    }
    
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteMember(@PathVariable Long id) {
        memberService.deleteById(id);
        return ResponseEntity.ok("Member deleted successfully");
    }
}

package com.cts.service;
 
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.cts.exception.MemberNotFoundException;
import com.cts.exception.ResourceNotFoundException;
import com.cts.memberDTO.MemberDto;
import com.cts.model.Member;
import com.cts.repository.MemberRepository;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
 
@Service
@Slf4j
@AllArgsConstructor
public class MemberServiceImpl implements MemberService {
 
	private final MemberRepository memberRepository;
	private final ModelMapper modelMapper; 
 
	@Override
	public Member registerMember(Member member) {
		log.info("Registering new member: {}", member.getEmail());
		Member saved = memberRepository.save(member);
		log.info("Member registered successfully with ID: {}", saved.getMemberId());
		return saved;
	}
 
	@Override
	public Member updateMember(Long memberId, Member member) {
		log.info("Updating member: {}", memberId);
		Member existingMember = memberRepository.findById(memberId).orElseThrow(() -> {
			log.error("Update failed: Member not found with ID: {}", memberId);
			return new MemberNotFoundException("Member not found with ID: " + memberId);
		});
		existingMember.setName(member.getName());
		existingMember.setEmail(member.getEmail());
		existingMember.setPhone(member.getPhone());
		existingMember.setAddress(member.getAddress());
		existingMember.setMembershipStatus(member.getMembershipStatus());
		memberRepository.save(existingMember);
		log.info("Member updated successfully with ID: {}", memberId);
		return existingMember;
	}
	
	@Override
	public MemberDto getMemberByUsername(String username) {
	    Member member = memberRepository.findByName(username)
	        .orElseThrow(() -> new MemberNotFoundException("Member not found with username: " + username));
	    return modelMapper.map(member, MemberDto.class);
	}	
	@Override
	public List<Member> getAllMember() {
	    log.debug("Fetching all Member");
	    return memberRepository.findAll();
	} 
	@Override
	public MemberDto getMemberByEmail(String email) {
	    Member member = memberRepository.findByEmail(email)
	            .orElseThrow(() -> new ResourceNotFoundException("Member", "Email", email));
	    return modelMapper.map(member, MemberDto.class);
	} 
	@Override
	public Member getMemberById(Long memberId) {
		log.info("Fetching member by ID {}", memberId);
		return memberRepository.findById(memberId).orElseThrow(() -> {
			log.error("Member not found with ID: {}", memberId);
			return new MemberNotFoundException("Member not found with ID: " + memberId);
		});
	}
	@Override
	public void deleteById(Long id) {
		log.info("Attempting to delete member with ID: {}", id);
		if (!memberRepository.existsById(id)) {
			log.error("Delete failed: Member not found with ID: {}", id);
			throw new MemberNotFoundException("Member not found with ID: " + id);
		}
		memberRepository.deleteById(id);
		log.info("Member deleted successfully with ID: {}", id);
	}
}
